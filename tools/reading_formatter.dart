import 'dart:io';
import 'dart:convert';

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–µ–∫—Å—Ç–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
class ReadingTextFormatter {
  static Future<void> formatFile(String inputPath, String cleanedPath, String outputPath) async {
    print('üìñ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏: $inputPath');
    print('üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π: $cleanedPath');

    try {
      final inputFile = File(inputPath);
      if (!await inputFile.exists()) {
        throw Exception('–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $inputPath');
      }

      final cleanedFile = File(cleanedPath);
      if (!await cleanedFile.exists()) {
        throw Exception('–û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $cleanedPath');
      }

      final originalContent = await inputFile.readAsString(encoding: utf8);
      final cleanedContent = await cleanedFile.readAsString(encoding: utf8);

      print('üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: ${originalContent.length} —Å–∏–º–≤–æ–ª–æ–≤');
      print('üìä –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${cleanedContent.length} —Å–∏–º–≤–æ–ª–æ–≤');

      final readableText = _mapToCleanedParagraphs(originalContent, cleanedContent);

      final outputFile = File(outputPath);
      await outputFile.create(recursive: true);
      await outputFile.writeAsString(readableText, encoding: utf8);

      print('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $outputPath');
      print('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${readableText.length} —Å–∏–º–≤–æ–ª–æ–≤');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      rethrow;
    }
  }

  static String _mapToCleanedParagraphs(String originalText, String cleanedText) {
    print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤...');

    final buffer = StringBuffer();
    final cleanedParagraphs = _extractCleanedParagraphs(cleanedText);
    final originalParagraphs = originalText.split(RegExp(r'\n\s*\n'));

    print('üìù –û—á–∏—â–µ–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤: ${cleanedParagraphs.length}');
    print('üìÑ –ê–±–∑–∞—Ü–µ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: ${originalParagraphs.length}');

    final used = <int>{};
    int matched = 0;

    for (final cleanedPar in cleanedParagraphs) {
      final normCleaned = _normalizeText(cleanedPar.content);

      bool found = false;
      for (int i = 0; i < originalParagraphs.length; i++) {
        if (used.contains(i)) continue;

        final normOriginal = _normalizeText(originalParagraphs[i]);
        if (normOriginal == normCleaned) {
          buffer.writeln('[pos:${cleanedPar.position}]');
          buffer.writeln(originalParagraphs[i].trim());
          buffer.writeln();
          used.add(i);
          matched++;
          found = true;
          break;
        }
      }

      if (!found) {
        print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–±–∑–∞—Ü [pos:${cleanedPar.position}]');
      }
    }

    print('üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: $matched –∏–∑ ${cleanedParagraphs.length}');
    return buffer.toString();
  }

  static List<CleanedParagraph> _extractCleanedParagraphs(String cleanedText) {
    final result = <CleanedParagraph>[];
    final blocks = cleanedText.split(RegExp(r'\n\s*\n'));

    for (final block in blocks) {
      final trimmed = block.trim();
      if (trimmed.startsWith('[pos:')) {
        final match = RegExp(r'\[pos:(\d+)\]\s*(.*)', dotAll: true).firstMatch(trimmed);
        if (match != null) {
          final pos = int.parse(match.group(1)!);
          final content = match.group(2)!.trim();
          result.add(CleanedParagraph(pos, content));
        }
      }
    }

    return result;
  }

  static String _normalizeText(String text) {
    return text
        .toLowerCase()
        .replaceAll(RegExp(r'[^\w\s]'), '')
        .replaceAll(RegExp(r'\s+'), ' ')
        .trim();
  }

  /// –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  static Future<void> formatDirectory(String inputDir, String cleanedDir, String outputDir) async {
    final inputDirectory = Directory(inputDir);
    if (!await inputDirectory.exists()) {
      throw Exception('–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $inputDir');
    }

    final cleanedDirectory = Directory(cleanedDir);
    if (!await cleanedDirectory.exists()) {
      throw Exception('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $cleanedDir');
    }

    final outputDirectory = Directory(outputDir);
await outputDirectory.create(recursive: true);

    await for (final entity in inputDirectory.list()) {
      if (entity is File && entity.path.endsWith('.txt')) {
        final name = entity.uri.pathSegments.last.replaceAll('.txt', '');
        final cleanedPath = '$cleanedDir/${name}_raw.txt';
        final outputPath = '$outputDir/${name}_cleaned.txt';

        final cleanedFile = File(cleanedPath);
        if (await cleanedFile.exists()) {
          print('\nüìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: $name');
          await formatFile(entity.path, cleanedPath, outputPath);
        } else {
          print('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ—Ç raw-—Ñ–∞–π–ª–∞ –¥–ª—è $name');
        }
      }
    }
  }
}

class CleanedParagraph {
  final int position;
  final String content;

  CleanedParagraph(this.position, this.content);
}

void main(List<String> args) async {
  if (args.length < 3) {
    print('''
üìñ Reading Text Formatter

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart reading_formatter.dart <source.txt> <raw.txt> <output.txt>
  dart reading_formatter.dart <source_dir> <raw_dir> <output_dir> --batch
    ''');
    exit(1);
  }

  try {
    if (args.length > 3 && args[3] == '--batch') {
      await ReadingTextFormatter.formatDirectory(args[0], args[1], args[2]);
    } else {
      await ReadingTextFormatter.formatFile(args[0], args[1], args[2]);
    }

    print('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}