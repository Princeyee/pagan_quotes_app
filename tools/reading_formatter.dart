// tools/reading_formatter.dart
import 'dart:io';
import 'dart:convert';

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–µ–∫—Å—Ç–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
/// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã [pos:N]
/// –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
class ReadingTextFormatter {
  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
  static Future<void> formatFile(String inputPath, String cleanedPath, String outputPath) async {
    print('üìñ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏: $inputPath');
    print('üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π: $cleanedPath');
    
    try {
      // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
      final inputFile = File(inputPath);
      if (!await inputFile.exists()) {
        throw Exception('–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $inputPath');
      }
      
      // –ß–∏—Ç–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π
      final cleanedFile = File(cleanedPath);
      if (!await cleanedFile.exists()) {
        throw Exception('–û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $cleanedPath');
      }
      
      final originalContent = await inputFile.readAsString(encoding: utf8);
      final cleanedContent = await cleanedFile.readAsString(encoding: utf8);
      
      print('üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: ${originalContent.length} —Å–∏–º–≤–æ–ª–æ–≤');
      print('üìä –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${cleanedContent.length} —Å–∏–º–≤–æ–ª–æ–≤');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
      final readableText = _processText(originalContent, cleanedContent);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      final outputFile = File(outputPath);
      await outputFile.create(recursive: true);
      await outputFile.writeAsString(readableText, encoding: utf8);
      
      print('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $outputPath');
      print('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${readableText.length} —Å–∏–º–≤–æ–ª–æ–≤');
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      final positionCount = _countPositionMarkers(readableText);
      print('üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤: $positionCount');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: $e');
      rethrow;
    }
  }
  
  /// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
  static String _processText(String originalText, String cleanedText) {
    print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —á—Ç–µ–Ω–∏—è...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    final cleanedParagraphs = _extractCleanedParagraphs(cleanedText);
    print('üìù –ù–∞–π–¥–µ–Ω–æ –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤: ${cleanedParagraphs.length}');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    String text = originalText;
    
    // 1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º—É—Å–æ—Ä)
    text = _minimalCleanup(text);
    
    // 2. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = _normalizeLineBreaks(text);
    
    // 3. –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –∞–±–∑–∞—Ü–∞–º–∏
    text = _mapToCleanedParagraphs(text, cleanedParagraphs);
    
    print('‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return text;
  }
  
  /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–±–∑–∞—Ü—ã –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Ö –ø–æ–∑–∏—Ü–∏—è–º–∏
  static List<CleanedParagraph> _extractCleanedParagraphs(String cleanedText) {
    final paragraphs = <CleanedParagraph>[];
    final lines = cleanedText.split('\n\n');
    
    for (final line in lines) {
      final trimmed = line.trim();
      if (trimmed.isNotEmpty && trimmed.startsWith('[pos:')) {
        final match = RegExp(r'\[pos:(\d+)\]\s*(.*)').firstMatch(trimmed);
        if (match != null) {
          final position = int.parse(match.group(1)!);
          final content = match.group(2)!.trim();
          paragraphs.add(CleanedParagraph(position, content));
        }
      }
    }
    
    return paragraphs;
  }
  
  /// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—É—Å–æ—Ä–∞
  static String _minimalCleanup(String text) {
    print('üßπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...');
    
    // –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ –≤—Ä–µ–¥–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    final patterns = [
      // –°–ª—É–∂–µ–±–Ω—ã–µ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
      RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'),
      
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã)
      RegExp(r'[ \t]{2,}'),
    ];
    
    text = text.replaceAll(patterns[0], ''); // –°–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replaceAll(patterns[1], ' '); // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    
    return text;
  }
  
  /// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  static String _normalizeLineBreaks(String text) {
    print('‚Ü©Ô∏è –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫...');
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –Ω–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ
    text = text.replaceAll(RegExp(r'\r\n|\r'), '\n');
    
    return text;
  }
  
  /// –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –∞–±–∑–∞—Ü–∞–º–∏
  static String _mapToCleanedParagraphs(String originalText, List<CleanedParagraph> cleanedParagraphs) {
    print('üó∫Ô∏è –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –∞–±–∑–∞—Ü–∞–º–∏...');
    
    if (cleanedParagraphs.isEmpty) {
      print('‚ö†Ô∏è –ù–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
      return originalText;
    }
    
    // –£–ü–†–û–©–ï–ù–ù–´–ô –ü–û–î–•–û–î: —Ä–∞–∑–±–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤
    final originalLines = originalText.split('\n');
    final result = <String>[];
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—É—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞
    final linesPerParagraph = (originalLines.length / cleanedParagraphs.length).ceil();
    
    int lineIndex = 0;
    int paragraphIndex = 0;
    
    while (lineIndex < originalLines.length && paragraphIndex < cleanedParagraphs.length) {
      final cleanedPar = cleanedParagraphs[paragraphIndex];
      
      // –ë–µ—Ä–µ–º –∫—É—Å–æ–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      final endIndex = (lineIndex + linesPerParagraph).clamp(0, originalLines.length);
      final chunk = originalLines.sublist(lineIndex, endIndex);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –∞–±–∑–∞—Ü
      final chunkText = chunk.join('\n').trim();
      
      if (chunkText.isNotEmpty) {
        result.add('[pos:${cleanedPar.position}]');
        result.add(chunkText);
        result.add(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
      }
      
      lineIndex = endIndex;
      paragraphIndex++;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (lineIndex < originalLines.length) {
      final remainingText = originalLines.sublist(lineIndex).join('\n').trim();
      if (remainingText.isNotEmpty) {
        if (paragraphIndex < cleanedParagraphs.length) {
          result.add('[pos:${cleanedParagraphs[paragraphIndex].position}]');
        } else {
          result.add('[pos:${cleanedParagraphs.last.position + 1}]');
        }
        result.add(remainingText);
      }
    }
    
    print('üéØ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: $paragraphIndex –∏–∑ ${cleanedParagraphs.length}');
    return result.join('\n');
  }
  
  /// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
  static int _countPositionMarkers(String text) {
    return RegExp(r'\[pos:\d+\]').allMatches(text).length;
  }
  
  /// –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  static Future<void> formatDirectory(String inputDir, String cleanedDir, String outputDir) async {
    print('üìÅ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $inputDir');
    print('üîó –û—á–∏—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑: $cleanedDir');
    
    final inputDirectory = Directory(inputDir);
    if (!await inputDirectory.exists()) {
      throw Exception('–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $inputDir');
    }
    
    final cleanedDirectory = Directory(cleanedDir);
    if (!await cleanedDirectory.exists()) {
      throw Exception('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $cleanedDir');
    }
    
    final outputDirectory = Directory(outputDir);
    await outputDirectory.create(recursive: true);
    
    await for (final entity in inputDirectory.list()) {
      if (entity is File && entity.path.endsWith('.txt')) {
        final fileName = entity.path.split('/').last;
        final baseName = fileName.replaceAll('.txt', '');
        
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        final cleanedPath = '$cleanedDir/${baseName}_raw.txt';
        final cleanedFile = File(cleanedPath);
        
        if (await cleanedFile.exists()) {
          final outputPath = '$outputDir/${baseName}_reading.txt';
          
          print('\nüìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: $fileName');
          await formatFile(entity.path, cleanedPath, outputPath);
        } else {
          print('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º $fileName - –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: $cleanedPath');
        }
      }
    }
    
    print('\n‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  }
}

/// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–∏—â–µ–Ω–Ω–æ–º –∞–±–∑–∞—Ü–µ
class CleanedParagraph {
  final int position;
  final String content;
  
  CleanedParagraph(this.position, this.content);
  
  @override
  String toString() => 'CleanedParagraph(pos: $position, content: ${content.length} chars)';
}

/// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
void main(List<String> args) async {
  if (args.length < 3) {
    print('''
üìñ Reading Text Formatter –¥–ª—è Sacral App

–°–æ–∑–¥–∞–µ—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–µ–∫—Å—Ç–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart reading_formatter.dart <input_file> <cleaned_file> <output_file>
  dart reading_formatter.dart <input_dir> <cleaned_dir> <output_dir> --batch

–ü—Ä–∏–º–µ—Ä—ã:
  dart reading_formatter.dart republic_source.txt republic_raw.txt republic_reading.txt
  dart reading_formatter.dart ./sources/ ./assets/raw_texts/ ./assets/reading_texts/ --batch

–§—É–Ω–∫—Ü–∏–∏:
  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—É—Å–æ—Ä–∞
  ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –æ—á–∏—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
  ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —É–¥–æ–±–Ω–æ–π –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
    ''');
    exit(1);
  }
  
  try {
    if (args.length > 3 && args[3] == '--batch') {
      await ReadingTextFormatter.formatDirectory(args[0], args[1], args[2]);
    } else {
      await ReadingTextFormatter.formatFile(args[0], args[1], args[2]);
    }
    
    print('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}