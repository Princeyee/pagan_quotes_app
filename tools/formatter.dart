// tools/formatter.dart - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import 'dart:io';
import 'dart:convert';
import 'dart:math';

class BookFormatter {
  static Future<void> processBook(String sourcePath, String category, String author, String bookName) async {
    print('üìö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥—É: $bookName');
    print('üìÅ –ò—Å—Ö–æ–¥–Ω–∏–∫: $sourcePath');
    
    try {
      // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      final sourceFile = File(sourcePath);
      if (!await sourceFile.exists()) {
        throw Exception('–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $sourcePath');
      }
      
      print('üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
      final sourceContent = await sourceFile.readAsString(encoding: utf8);
      print('üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${sourceContent.length}');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      final targetDir = '../assets/full_texts/$category/$author';
      await Directory(targetDir).create(recursive: true);
      
      // –ü—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
      final rawPath = '$targetDir/${bookName}_raw.txt';
      final cleanedPath = '$targetDir/${bookName}_cleaned.txt';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      print('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...');
      final originalPositions = _extractOriginalPositions(sourceContent);
      print('üìç –ù–∞–π–¥–µ–Ω–æ ${originalPositions.length} –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è RAW –≤–µ—Ä—Å–∏–∏ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞) —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
      print('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ RAW –≤–µ—Ä—Å–∏–∏...');
      final rawText = await _processForRaw(sourceContent, originalPositions);
      print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ RAW —Ñ–∞–π–ª–∞...');
      await File(rawPath).writeAsString(rawText, encoding: utf8);
      print('‚úÖ RAW —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $rawPath');
      
      // –°–æ–∑–¥–∞–µ–º CLEANED –≤–µ—Ä—Å–∏—é —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
      print('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ CLEANED –≤–µ—Ä—Å–∏–∏...');
      final cleanedText = await _processForCleaned(sourceContent, originalPositions);
      print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CLEANED —Ñ–∞–π–ª–∞...');
      await File(cleanedPath).writeAsString(cleanedText, encoding: utf8);
      print('‚úÖ CLEANED —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $cleanedPath');
      
      print('üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ 2 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –¥–ª—è $bookName');
      
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      print('üìú Stack trace: $stackTrace');
      rethrow;
    }
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  static List<Map<String, dynamic>> _extractOriginalPositions(String text) {
    final positions = <Map<String, dynamic>>[];
    final paragraphs = text.split(RegExp(r'\n\s*\n'));
    var currentPosition = 1;
    var processedCount = 0;
    final totalParagraphs = paragraphs.length;
    
    for (final paragraph in paragraphs) {
      processedCount++;
      if (processedCount % 100 == 0) {
        print('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: $processedCount / $totalParagraphs');
      }
      
      final trimmed = paragraph.trim();
      if (trimmed.isEmpty) continue;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (_isServiceInfo(trimmed)) continue;
      
      positions.add({
        'position': currentPosition,
        'content': trimmed,
      });
      currentPosition++;
    }
    
    return positions;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  static bool _isServiceInfo(String text) {
    return RegExp(r'^(ISBN|Copyright|¬©|\(c\)|–ì–õ–ê–í–ê\s+\w+)', caseSensitive: false).hasMatch(text) ||
           RegExp(r'^[-=_*]{3,}$').hasMatch(text) ||
           RegExp(r'^\d+$').hasMatch(text);
  }
  
  // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è RAW –≤–µ—Ä—Å–∏–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞)
  static Future<String> _processForRaw(String text, List<Map<String, dynamic>> originalPositions) async {
    print('üîç –°–æ–∑–¥–∞–µ–º RAW –≤–µ—Ä—Å–∏—é (–¥–ª—è –ø–æ–∏—Å–∫–∞)...');
    
    // 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    print('üìù –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤...');
    text = _normalizeCharacters(text);
    
    // 2. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    print('üßπ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...');
    text = _aggressiveClean(text);
    
    // 3. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    print('üìë –°–æ–∑–¥–∞–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏...');
    return await _createPositionedParagraphs(text, originalPositions, aggressive: true);
  }
  
  // –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è CLEANED –≤–µ—Ä—Å–∏–∏ (–¥–ª—è —á—Ç–µ–Ω–∏—è)
  static Future<String> _processForCleaned(String text, List<Map<String, dynamic>> originalPositions) async {
    print('üìñ –°–æ–∑–¥–∞–µ–º CLEANED –≤–µ—Ä—Å–∏—é (–¥–ª—è —á—Ç–µ–Ω–∏—è)...');
    
    // 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    print('üìù –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤...');
    text = _normalizeCharacters(text);
    
    // 2. –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    print('üßπ –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...');
    text = _gentleClean(text);
    
    // 3. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    print('üìë –°–æ–∑–¥–∞–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏...');
    return await _createPositionedParagraphs(text, originalPositions, aggressive: false);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–π (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  static Future<String> _createPositionedParagraphs(
    String text,
    List<Map<String, dynamic>> originalPositions,
    {required bool aggressive}
  ) async {
    final paragraphs = text.split(RegExp(r'\n\s*\n'));
    final result = <String>[];
    var currentParagraphIndex = 0;
    var processedCount = 0;
    final totalPositions = originalPositions.length;
    
    for (final position in originalPositions) {
      processedCount++;
      if (processedCount % 50 == 0) {
        print('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: $processedCount / $totalPositions');
        // –î–∞–µ–º —à–∞–Ω—Å –¥—Ä—É–≥–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
        await Future.delayed(Duration.zero);
      }
      
      if (currentParagraphIndex >= paragraphs.length) break;
      
      // –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–π –∞–±–∑–∞—Ü –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
      var bestMatch = '';
      var bestScore = 0.0;
      final windowSize = 10; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞
      
      final searchEnd = min(currentParagraphIndex + windowSize, paragraphs.length);
      for (var i = currentParagraphIndex; i < searchEnd; i++) {
        final score = _calculateMatchScore(
          _normalizeText(position['content']),
          _normalizeText(paragraphs[i])
        );
        
        if (score > bestScore) {
          bestScore = score;
          bestMatch = paragraphs[i];
          currentParagraphIndex = i + 1;
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
        if (score > 0.8) break;
      }
      
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–±–∑–∞—Ü
      if (bestMatch.isNotEmpty) {
        final content = aggressive ? _aggressiveCleanParagraph(bestMatch) : bestMatch.trim();
        result.add('[pos:${position['position']}] $content');
      }
    }
    
    return result.join('\n\n');
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  static String _normalizeText(String text) {
    return text
        .toLowerCase()
        .replaceAll(RegExp(r'[^\w\s]'), '') // –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        .replaceAll(RegExp(r'\s+'), ' ')
        .trim();
  }
  
  // –ü–æ–¥—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  static double _calculateMatchScore(String text1, String text2) {
    if ((text1.length - text2.length).abs() > text1.length * 0.5) {
      return 0.0; // –°–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω—ã–µ –ø–æ –¥–ª–∏–Ω–µ
    }
    
    final words1 = text1.split(' ');
    final words2 = text2.split(' ');
    
    final Set<String> commonWords = Set<String>.from(words1).intersection(Set<String>.from(words2));
    return 2 * commonWords.length / (words1.length + words2.length);
  }
  
  // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞
  static String _aggressiveCleanParagraph(String text) {
    return text
        .replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '')
        .replaceAll(RegExp(r'[ \t]+'), ' ')
        .trim();
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
  static String _normalizeCharacters(String text) {
    return text
        .replaceAll(RegExp(r'[""‚Äû"]'), '"')
        .replaceAll(RegExp(r'[''`]'), "'")
        .replaceAll(RegExp(r'[‚Äî‚Äì‚àí]'), '-')
        .replaceAll('‚Ä¶', '...');
  }
  
  // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
  static String _aggressiveClean(String text) {
    return text
        .replaceAll(RegExp(r'\n\s*\d+\s*\n'), '\n\n')
        .replaceAll(RegExp(r'\n\s*-\s*\d+\s*-\s*\n'), '\n\n')
        .replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '')
        .replaceAll(RegExp(r'[ \t]+'), ' ')
        .replaceAll(RegExp(r'\n\s*[-=_*]{3,}\s*\n'), '\n\n')
        .replaceAll(RegExp(r'\n\s*(ISBN|Copyright|¬©|\(c\)).*\n', caseSensitive: false), '\n');
  }
  
  // –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
  static String _gentleClean(String text) {
    return text
        .replaceAll(RegExp(r'\n\s*\d+\s*\n'), '\n\n')
        .replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '')
        .replaceAll(RegExp(r'[ \t]+'), ' ')
        .replaceAll(RegExp(r'\n\s*(ISBN|Copyright|¬©|\(c\)).*\n', caseSensitive: false), '\n');
  }
}

void main(List<String> args) async {
  if (args.length < 4) {
    print('''
üìö Book Formatter –¥–ª—è Sacral App

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart formatter.dart <source_file> <category> <author> <book_name>

–ü—Ä–∏–º–µ—Ä:
  dart formatter.dart source_files/metaphysics_source.txt greece aristotle metaphysics

–†–µ–∑—É–ª—å—Ç–∞—Ç:
  - RAW —Ñ–∞–π–ª —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π + –ø–æ–∑–∏—Ü–∏–∏ [pos:N] (–¥–ª—è –ø–æ–∏—Å–∫–∞)
  - CLEANED —Ñ–∞–π–ª —Å –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π + —Ç–µ –∂–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è —á—Ç–µ–Ω–∏—è)
    ''');
    exit(1);
  }
  
  try {
    await BookFormatter.processBook(args[0], args[1], args[2], args[3]);
    print('\nüéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}

