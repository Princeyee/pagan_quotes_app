// tools/formatter.dart - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import 'dart:io';
import 'dart:convert';
import 'dart:math';

class BookFormatter {
  static Future<void> processBook(String sourcePath, String category, String author, String bookName) async {
    print('üìö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥—É: $bookName');
    print('üìÅ –ò—Å—Ö–æ–¥–Ω–∏–∫: $sourcePath');
    
    try {
      // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
      final sourceFile = File(sourcePath);
      if (!await sourceFile.exists()) {
        throw Exception('–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $sourcePath');
      }
      
      final sourceContent = await sourceFile.readAsString(encoding: utf8);
      print('üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${sourceContent.length}');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
      final targetDir = '../assets/full_texts/$category/$author';
      await Directory(targetDir).create(recursive: true);
      
      // –ü—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
      final rawPath = '$targetDir/${bookName}_raw.txt';
      final cleanedPath = '$targetDir/${bookName}_cleaned.txt';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è RAW –≤–µ—Ä—Å–∏–∏ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞)
      final rawText = _processForRaw(sourceContent);
      await File(rawPath).writeAsString(rawText, encoding: utf8);
      print('‚úÖ RAW —Ñ–∞–π–ª: $rawPath');
      
      // –°–æ–∑–¥–∞–µ–º CLEANED –≤–µ—Ä—Å–∏—é (–¥–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –Ω–æ —Å —Ç–µ–º–∏ –∂–µ –ø–æ–∑–∏—Ü–∏—è–º–∏)
      final cleanedText = _processForCleaned(sourceContent, rawText);
      await File(cleanedPath).writeAsString(cleanedText, encoding: utf8);
      print('‚úÖ CLEANED —Ñ–∞–π–ª: $cleanedPath');
      
      print('üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ 2 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –¥–ª—è $bookName');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      rethrow;
    }
  }
  
  // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è RAW –≤–µ—Ä—Å–∏–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞)
  static String _processForRaw(String text) {
    print('üîç –°–æ–∑–¥–∞–µ–º RAW –≤–µ—Ä—Å–∏—é (–¥–ª—è –ø–æ–∏—Å–∫–∞)...');
    
    // 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    text = _normalizeCharacters(text);
    
    // 2. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    text = _aggressiveClean(text);
    
    // 3. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = text.replaceAll(RegExp(r'\r\n|\r'), '\n');
    text = text.replaceAll(RegExp(r'\n{4,}'), '\n\n\n');
    
    // 4. –°–∫–ª–µ–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
    text = _joinLines(text);
    
    // 5. –°–æ–∑–¥–∞–µ–º –∞–±–∑–∞—Ü—ã
    text = _makeParagraphs(text);
    
    // 6. –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
    text = _addMarkers(text);
    
    return text;
  }
  
  // –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è CLEANED –≤–µ—Ä—Å–∏–∏ (–¥–ª—è —á—Ç–µ–Ω–∏—è)
  static String _processForCleaned(String originalText, String rawText) {
    print('üìñ –°–æ–∑–¥–∞–µ–º CLEANED –≤–µ—Ä—Å–∏—é (–¥–ª—è —á—Ç–µ–Ω–∏—è)...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ RAW –≤–µ—Ä—Å–∏–∏
    final rawParagraphs = <Map<String, dynamic>>[];
    final rawLines = rawText.split('\n\n');
    final posPattern = RegExp(r'\[pos:(\d+)\]\s*(.*)');
    
    for (final line in rawLines) {
      final match = posPattern.firstMatch(line.trim());
      if (match != null) {
        rawParagraphs.add({
          'position': int.parse(match.group(1)!),
          'content': match.group(2)!.trim()
        });
      }
    }
    
    print('üìä –ù–∞–π–¥–µ–Ω–æ RAW –∞–±–∑–∞—Ü–µ–≤: ${rawParagraphs.length}');
    
    String cleanedText = originalText;
    
    // 1. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    cleanedText = _normalizeCharacters(cleanedText);
    
    // 2. –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleanedText = _gentleClean(cleanedText);
    
    // 3. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
    cleanedText = cleanedText.replaceAll(RegExp(r'\r\n|\r'), '\n');
    
    // 4. –î–µ–ª–∏–∫–∞—Ç–Ω–æ–µ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ
    cleanedText = _gentleJoinLines(cleanedText);
    
    // 5. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    final paragraphs = cleanedText.split(RegExp(r'\n\s*\n'))
        .map((p) => p.trim())
        .where((p) => p.isNotEmpty)
        .toList();
    
    // 6. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å RAW –≤–µ—Ä—Å–∏–µ–π
    final rawParagraphsList = rawLines.map((line) => line.trim()).where((line) => line.isNotEmpty).toList();
    return _synchronizeWithRaw(paragraphs.join('\n\n'), rawParagraphsList);
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
  static String _normalizeCharacters(String text) {
    text = text.replaceAll(RegExp(r'[""‚Äû"]'), '"');
    text = text.replaceAll(RegExp(r'[''`]'), "'");
    text = text.replaceAll(RegExp(r'[‚Äî‚Äì‚àí]'), '-');
    text = text.replaceAll('‚Ä¶', '...');
    return text;
  }
  
  // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
  static String _aggressiveClean(String text) {
    // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    text = text.replaceAll(RegExp(r'\n\s*\d+\s*\n'), '\n\n');
    text = text.replaceAll(RegExp(r'\n\s*-\s*\d+\s*-\s*\n'), '\n\n');
    
    // –°–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '');
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.replaceAll(RegExp(r'[ \t]+'), ' ');
    
    // –õ–∏–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    text = text.replaceAll(RegExp(r'\n\s*[-=_*]{3,}\s*\n'), '\n\n');
    
    // –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = text.replaceAll(RegExp(r'\n\s*(ISBN|Copyright|¬©|\(c\)).*\n', caseSensitive: false), '\n');
    
    return text;
  }
  
  // –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
  static String _gentleClean(String text) {
    // –¢–æ–ª—å–∫–æ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
    text = text.replaceAll(RegExp(r'\n\s*\d+\s*\n'), '\n\n'); // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    text = text.replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), ''); // –°–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replaceAll(RegExp(r'[ \t]+'), ' '); // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.replaceAll(RegExp(r'\n\s*(ISBN|Copyright|¬©|\(c\)).*\n', caseSensitive: false), '\n'); // –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    return text;
  }
  
  // –°–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è RAW
  static String _joinLines(String text) {
    final lines = text.split('\n');
    final result = <String>[];
    
    for (int i = 0; i < lines.length; i++) {
      final current = lines[i].trim();
      
      if (current.isEmpty) {
        result.add('');
        continue;
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –≤ RegExp
      if (i < lines.length - 1 && 
          !RegExp(r'[.!?;:,]$').hasMatch(current) &&
          lines[i + 1].trim().isNotEmpty &&
          !RegExp(r'^[A-Z–ê-–Ø]').hasMatch(lines[i + 1].trim()) &&
          current.length > 10) {
        
        final next = lines[i + 1].trim();
        result.add('$current $next');
        i++;
      } else {
        result.add(current);
      }
    }
    
    return result.join('\n');
  }
  
  // –î–µ–ª–∏–∫–∞—Ç–Ω–æ–µ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ –¥–ª—è CLEANED
  static String _gentleJoinLines(String text) {
    final lines = text.split('\n');
    final result = <String>[];
    
    for (int i = 0; i < lines.length; i++) {
      final current = lines[i].trim();
      
      if (current.isEmpty) {
        result.add('');
        continue;
      }
      
      // –ë–æ–ª–µ–µ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–µ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ
      if (i < lines.length - 1 && 
          current.length > 20 &&
          !RegExp(r'[.!?;:]$').hasMatch(current) &&
          lines[i + 1].trim().isNotEmpty &&
          !RegExp(r'^[A-Z–ê-–Ø]').hasMatch(lines[i + 1].trim()) &&
          lines[i + 1].trim().length > 10) {
        
        final next = lines[i + 1].trim();
        result.add('$current $next');
        i++;
      } else {
        result.add(current);
      }
    }
    
    return result.join('\n');
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤
  static String _makeParagraphs(String text) {
    final lines = text.split('\n');
    final paragraphs = <String>[];
    final current = <String>[];
    
    for (final line in lines) {
      final trimmed = line.trim();
      
      if (trimmed.isEmpty) {
        if (current.isNotEmpty) {
          paragraphs.add(current.join(' ').trim());
          current.clear();
        }
      } else {
        current.add(trimmed);
      }
    }
    
    if (current.isNotEmpty) {
      paragraphs.add(current.join(' ').trim());
    }
    
    final filtered = paragraphs.where((p) => p.length > 5).toList();
    return filtered.join('\n\n');
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
  static String _addMarkers(String text) {
    final paragraphs = text.split('\n\n');
    final result = <String>[];
    
    for (int i = 0; i < paragraphs.length; i++) {
      final paragraph = paragraphs[i].trim();
      if (paragraph.isNotEmpty) {
        result.add('[pos:${i + 1}] $paragraph');
      }
    }
    
    return result.join('\n\n');
  }
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è CLEANED —Å RAW –ø–æ–∑–∏—Ü–∏—è–º–∏
  static String _synchronizeWithRaw(String cleanedText, List<String> rawParagraphs) {
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    final paragraphs = cleanedText.split(RegExp(r'\n\s*\n'))
        .map((p) => p.trim())
        .where((p) => p.isNotEmpty)
        .toList();
    
    if (paragraphs.isEmpty) {
      print('‚ö†Ô∏è No paragraphs found in cleaned text');
      return cleanedText;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ RAW –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    final rawPositions = <int>[];
    final rawContents = <String>[];
    final rawPositionPattern = RegExp(r'\[pos:(\d+)\]\s*(.*)');
    
    for (final raw in rawParagraphs) {
      final match = rawPositionPattern.firstMatch(raw);
      if (match != null) {
        rawPositions.add(int.parse(match.group(1)!));
        rawContents.add(match.group(2)!.trim());
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
    if (rawPositions.isEmpty) {
      print('‚ö†Ô∏è No positions found in RAW paragraphs');
      // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
      final result = <String>[];
      for (int i = 0; i < paragraphs.length; i++) {
        if (paragraphs[i].trim().isNotEmpty) {
          result.add('[pos:${i + 1}] ${paragraphs[i].trim()}');
        }
      }
      return result.join('\n\n');
    }

    print('üìä Found ${rawPositions.length} positions (${rawPositions.first} - ${rawPositions.last})');
    print('üìä Processing ${paragraphs.length} cleaned paragraphs');

    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
    final result = <String>[];
    final minLength = min(paragraphs.length, rawPositions.length);

    for (int i = 0; i < minLength; i++) {
      final position = rawPositions[i];
      final content = paragraphs[i].trim();
      
      if (content.isNotEmpty) {
        result.add('[pos:$position] $content');
      }
    }

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –±–µ–∑ –ø–æ–∑–∏—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é + –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
    if (paragraphs.length > rawPositions.length) {
      var nextPosition = rawPositions.last + 1;
      
      for (int i = rawPositions.length; i < paragraphs.length; i++) {
        final content = paragraphs[i].trim();
        if (content.isNotEmpty) {
          result.add('[pos:$nextPosition] $content');
          nextPosition++;
        }
      }
    }

    return result.join('\n\n');
  }
}

void main(List<String> args) async {
  if (args.length < 4) {
    print('''
üìö Book Formatter –¥–ª—è Sacral App

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart formatter.dart <source_file> <category> <author> <book_name>

–ü—Ä–∏–º–µ—Ä:
  dart formatter.dart source_files/metaphysics_source.txt greece aristotle metaphysics

–†–µ–∑—É–ª—å—Ç–∞—Ç:
  - RAW —Ñ–∞–π–ª —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π + –ø–æ–∑–∏—Ü–∏–∏ [pos:N] (–¥–ª—è –ø–æ–∏—Å–∫–∞)
  - CLEANED —Ñ–∞–π–ª —Å –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π + —Ç–µ –∂–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è —á—Ç–µ–Ω–∏—è)
    ''');
    exit(1);
  }
  
  try {
    await BookFormatter.processBook(args[0], args[1], args[2], args[3]);
    print('\nüéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}

