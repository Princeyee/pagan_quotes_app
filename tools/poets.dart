
// tools/poets.dart - –§–û–†–ú–ê–¢–ï–† –î–õ–Ø –ü–û–≠–¢–ò–ß–ï–°–ö–ò–• –¢–ï–ö–°–¢–û–í
import 'dart:io';
import 'dart:convert';

class PoetsFormatter {
  static Future<void> processBook(String sourcePath, String category, String author, String bookName) async {
    print('üìö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç: $bookName');
    print('üìÅ –ò—Å—Ö–æ–¥–Ω–∏–∫: $sourcePath');
    
    try {
      // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
      final sourceFile = File(sourcePath);
      if (!await sourceFile.exists()) {
        throw Exception('–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $sourcePath');
      }
      
      print('üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
      final sourceContent = await sourceFile.readAsString(encoding: utf8);
      print('üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${sourceContent.length}');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      final targetDir = '../assets/full_texts/$category/$author';
      await Directory(targetDir).create(recursive: true);
      
      // –ü—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
      final rawPath = '$targetDir/${bookName}_raw.txt';
      final cleanedPath = '$targetDir/${bookName}_cleaned.txt';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      print('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π...');
      final poeticPositions = _extractPoeticPositions(sourceContent);
      print('üìç –ù–∞–π–¥–µ–Ω–æ ${poeticPositions.length} –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª—è RAW –≤–µ—Ä—Å–∏–∏
      print('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ RAW –≤–µ—Ä—Å–∏–∏...');
      final rawText = await _processForRaw(poeticPositions);
      print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ RAW —Ñ–∞–π–ª–∞...');
      await File(rawPath).writeAsString(rawText, encoding: utf8);
      print('‚úÖ RAW —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $rawPath');
      
      // –°–æ–∑–¥–∞–µ–º CLEANED –≤–µ—Ä—Å–∏—é
      print('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ CLEANED –≤–µ—Ä—Å–∏–∏...');
      final cleanedText = await _processForCleaned(poeticPositions);
      print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ CLEANED —Ñ–∞–π–ª–∞...');
      await File(cleanedPath).writeAsString(cleanedText, encoding: utf8);
      print('‚úÖ CLEANED —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $cleanedPath');
      
      print('üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ 2 —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –¥–ª—è $bookName');
      
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      print('üìú Stack trace: $stackTrace');
      rethrow;
    }
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π (—Å—Ç—Ä–æ—Ñ—ã/—á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à–∏—è + –∑–∞–≥–æ–ª–æ–≤–∫–∏)
  static List<Map<String, dynamic>> _extractPoeticPositions(String text) {
    final positions = <Map<String, dynamic>>[];
    var currentPosition = 1;
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
    text = _normalizeCharacters(text);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º
    final rawBlocks = text.split(RegExp(r'\n\s*\n'));
    
    for (final block in rawBlocks) {
      final trimmed = block.trim();
      if (trimmed.isEmpty) continue;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (_isServiceInfo(trimmed)) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º - —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–Ω—ã–π –±–ª–æ–∫
      if (_isHeader(trimmed)) {
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        positions.add({
          'position': currentPosition,
          'content': trimmed,
          'type': 'header'
        });
        currentPosition++;
      } else {
        // –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–Ω—ã–π –±–ª–æ–∫ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ—Ñ—ã
        final stanzas = _splitIntoStanzas(trimmed);
        for (final stanza in stanzas) {
          if (stanza.trim().isNotEmpty) {
            positions.add({
              'position': currentPosition,
              'content': stanza.trim(),
              'type': 'stanza'
            });
            currentPosition++;
          }
        }
      }
    }
    
    print('üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${positions.where((p) => p['type'] == 'header').length}');
    print('üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ—Ñ: ${positions.where((p) => p['type'] == 'stanza').length}');
    
    return positions;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫
  static bool _isHeader(String text) {
    final lines = text.split('\n').map((l) => l.trim()).where((l) => l.isNotEmpty).toList();
    
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 3 —Å—Ç—Ä–æ–∫ –∏ –Ω–µ—Ç —Ü–∏—Ñ—Ä –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ - –≤–µ—Ä–æ—è—Ç–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (lines.length <= 2) return true;
    
    // –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    final headerPatterns = [


RegExp(r'^(–ü–µ—Å–Ω—å|–ü–µ—Å–Ω—è|–ì–ª–∞–≤–∞|–ö–Ω–∏–≥–∞|–ß–∞—Å—Ç—å)\s+', caseSensitive: false),
      RegExp(r'^[IVXLCDM]+\.?\s*$'), // –†–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã
      RegExp(r'^\d+\.?\s*$'), // –û–±—ã—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
    ];
    
    for (final pattern in headerPatterns) {
      if (pattern.hasMatch(text)) return true;
    }
    
    return false;
  }
  
  // –†–∞–∑–±–∏–≤–∫–∞ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–Ω–æ–≥–æ –±–ª–æ–∫–∞ –Ω–∞ —Å—Ç—Ä–æ—Ñ—ã
  static List<String> _splitIntoStanzas(String text) {
    final lines = text.split('\n');
    final stanzas = <String>[];
    var currentStanza = <String>[];
    var emptyLineCount = 0;
    
    for (int i = 0; i < lines.length; i++) {
      final line = lines[i].trim();
      
      if (line.isEmpty) {
        emptyLineCount++;
        // –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–æ—Ñ—É
        if (currentStanza.isNotEmpty && emptyLineCount >= 1) {
          stanzas.add(currentStanza.join('\n'));
          currentStanza.clear();
          emptyLineCount = 0;
        }
      } else {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        emptyLineCount = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ (–Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫)
        final cleanLine = _removeLineNumbers(line);
        if (cleanLine.isNotEmpty) {
          currentStanza.add(cleanLine);
        }
        
        // –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 4-6 —Å—Ç—Ä–æ–∫ - –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç—Ä–æ—Ñ—É (—á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à–∏–µ/—à–µ—Å—Ç–∏—Å—Ç–∏—à–∏–µ)
        if (currentStanza.length >= 4) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ –æ–Ω–∞
          if (i + 1 < lines.length) {
            final nextLine = lines[i + 1].trim();
            if (nextLine.isEmpty || currentStanza.length >= 6) {
              stanzas.add(currentStanza.join('\n'));
              currentStanza.clear();
            }
          }
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—Ç—Ä–æ—Ñ—É
    if (currentStanza.isNotEmpty) {
      stanzas.add(currentStanza.join('\n'));
    }
    
    return stanzas;
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
  static String _removeLineNumbers(String line) {
    // –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ —Å—Ç–æ—è—â–∏–µ —Ü–∏—Ñ—Ä—ã
    line = line.replaceAll(RegExp(r'^\s*\d+\s*$'), '');
    // –£–¥–∞–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    line = line.replaceAll(RegExp(r'^\s*\d+\s+'), '');
    // –£–¥–∞–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    line = line.replaceAll(RegExp(r'\s+\d+\s*$'), '');
    return line.trim();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  static bool _isServiceInfo(String text) {
    return RegExp(r'^(ISBN|Copyright|¬©|\(c\))', caseSensitive: false).hasMatch(text) ||
           RegExp(r'^[-=_*]{3,}$').hasMatch(text);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è RAW –≤–µ—Ä—Å–∏–∏
  static Future<String> _processForRaw(List<Map<String, dynamic>> positions) async {
    final result = <String>[];
    
    for (final position in positions) {
      var content = position['content'] as String;
      
      // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      content = _aggressiveClean(content);
      
      if (content.isNotEmpty) {
        result.add('[pos:${position['position']}] $content');
      }
    }
    
    return result.join('\n\n');
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è CLEANED –≤–µ—Ä—Å–∏–∏
  static Future<String> _processForCleaned(List<Map<String, dynamic>> positions) async {
    final result = <String>[];
    
    for (final position in positions) {
      var content = position['content'] as String;
      
      // –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è
      content = _gentleClean(content);
      
      if (content.isNotEmpty) {
        result.add('[pos:${position['position']}] $content');
      }
    }
    
    return result.join('\n\n');
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤
  static String _normalizeCharacters(String text) {
    return text
        .replaceAll(RegExp(r'[""‚Äû"]'), '"')
        .replaceAll(RegExp(r'[''`]'), "'")
        .replaceAll(RegExp(r'[‚Äî‚Äì‚àí]'), '-')
        .replaceAll('‚Ä¶', '...');
  }
  
  // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è RAW
  static String _aggressiveClean(String text) {
    return text
        .replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '') // –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        .replaceAll(RegExp(r'\[[\d\s\-‚Äì‚Äî.,;:!?]*\]'), '') // –£–¥–∞–ª—è–µ–º —Å–Ω–æ—Å–∫–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
        .


replaceAll(RegExp(r'[ \t]+'), ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        .replaceAll(RegExp(r'\n\s*\n\s*\n+'), '\n\n') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        .trim();
  }
  
  // –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è CLEANED
  static String _gentleClean(String text) {
    return text
        .replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '') // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
        .replaceAll(RegExp(r'[ \t]+'), ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        .replaceAll(RegExp(r'\n\s*\n\s*\n+'), '\n\n') // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        .trim();
  }
}

void main(List<String> args) async {
  if (args.length < 4) {
    print('''
üé≠ Poets Formatter –¥–ª—è –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart poets.dart <source_file> <category> <author> <book_name>

–ü—Ä–∏–º–µ—Ä:
  dart poets.dart source_files/odyssey.txt greece homer odyssey
  dart poets.dart source_files/beowulf.txt england anonymous beowulf

–†–µ–∑—É–ª—å—Ç–∞—Ç:
  - RAW —Ñ–∞–π–ª —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π + –ø–æ–∑–∏—Ü–∏–∏ [pos:N] (–¥–ª—è –ø–æ–∏—Å–∫–∞)
  - CLEANED —Ñ–∞–π–ª —Å –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π + —Ç–µ –∂–µ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è —á—Ç–µ–Ω–∏—è)
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ—Ñ—ã/—á–µ—Ç–≤–µ—Ä–æ—Å—Ç–∏—à–∏—è
    ''');
    exit(1);
  }
  
  try {
    await PoetsFormatter.processBook(args[0], args[1], args[2], args[3]);
    print('\nüéâ –ü–æ—ç—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}
