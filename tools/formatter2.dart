
// tools/formatter2.dart - –§–û–†–ú–ê–¢–ï–† –î–õ–Ø –ö–û–†–û–¢–ö–ò–• –¶–ò–¢–ê–¢
import 'dart:io';
import 'dart:convert';
import 'dart:math';

class BookFormatter2 {
  static const int TARGET_LENGTH = 200; // –¶–µ–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞ —Ü–∏—Ç–∞—Ç—ã (—Å–∏–º–≤–æ–ª–æ–≤)
  static const int MIN_LENGTH = 80;     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
  static const int MAX_LENGTH = 400;    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
  
  static Future<void> processBook(String sourcePath, String category, String author, String bookName) async {
    print('üìö –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –¥–ª—è —Ü–∏—Ç–∞—Ç: $bookName');
    print('üìÅ –ò—Å—Ö–æ–¥–Ω–∏–∫: $sourcePath');
    print('üéØ –†–∞–∑–º–µ—Ä —Ü–∏—Ç–∞—Ç: $MIN_LENGTH-$MAX_LENGTH —Å–∏–º–≤–æ–ª–æ–≤ (—Ü–µ–ª—å: $TARGET_LENGTH)');
    
    try {
      // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
      final sourceFile = File(sourcePath);
      if (!await sourceFile.exists()) {
        throw Exception('–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $sourcePath');
      }
      
      print('üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
      final sourceContent = await sourceFile.readAsString(encoding: utf8);
      print('üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${sourceContent.length}');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
      final targetDir = '../assets/full_texts/$category/$author';
      await Directory(targetDir).create(recursive: true);
      
      // –ü—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
      final rawPath = '$targetDir/${bookName}_raw.txt';
      final cleanedPath = '$targetDir/${bookName}_cleaned.txt';
      
      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
      print('üßπ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...');
      final cleanedText = _preClean(sourceContent);
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã
      print('‚úÇÔ∏è  –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Ü–∏—Ç–∞—Ç—ã...');
      final quotes = _splitIntoQuotes(cleanedText);
      print('üìú –°–æ–∑–¥–∞–Ω–æ —Ü–∏—Ç–∞—Ç: ${quotes.length}');
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
      print('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ RAW –≤–µ—Ä—Å–∏–∏...');
      final rawText = _createVersionedText(quotes, aggressive: true);
      await File(rawPath).writeAsString(rawText, encoding: utf8);
      print('‚úÖ RAW —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $rawPath');
      
      print('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ CLEANED –≤–µ—Ä—Å–∏–∏...');
      final cleanedFinalText = _createVersionedText(quotes, aggressive: false);
      await File(cleanedPath).writeAsString(cleanedFinalText, encoding: utf8);
      print('‚úÖ CLEANED —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $cleanedPath');
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      _printStatistics(quotes);
      
      print('üéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ 2 —Ñ–∞–π–ª–∞ —Å ${quotes.length} —Ü–∏—Ç–∞—Ç–∞–º–∏ –¥–ª—è $bookName');
      
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      print('üìú Stack trace: $stackTrace');
      rethrow;
    }
  }
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
  static String _preClean(String text) {
    return text
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–∏–º–≤–æ–ª—ã
        .replaceAll(RegExp(r'[""‚Äû"]'), '"')
        .replaceAll(RegExp(r'[''`]'), "'")
        .replaceAll(RegExp(r'[‚Äî‚Äì‚àí]'), '-')
        .replaceAll('‚Ä¶', '...')
        // –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        .replaceAll(RegExp(r'\n\s*\d+\s*\n'), '\n\n')
        .replaceAll(RegExp(r'\n\s*[-=_*]{3,}\s*\n'), '\n\n')
        .replaceAll(RegExp(r'\n\s*(ISBN|Copyright|¬©|\(c\)).*\n', caseSensitive: false), '\n')
        // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        .replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '')
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        .replaceAll(RegExp(r'[ \t]+'), ' ')
        .replaceAll(RegExp(r'\n\s*\n\s*\n+'), '\n\n');
  }
  
  // –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã
  static List<String> _splitIntoQuotes(String text) {
    final quotes = <String>[];
    
    // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    final paragraphs = text.split(RegExp(r'\n\s*\n'))
        .map((p) => p.trim())
        .where((p) => p.isNotEmpty && !_isServiceInfo(p))
        .toList();
    
    for (final paragraph in paragraphs) {
      // –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —É–∂–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–ª–∏–∫–æ–º
      if (paragraph.length >= MIN_LENGTH && paragraph.length <= MAX_LENGTH) {
        quotes.add(paragraph);
        continue;
      }
      
      // –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
      if (paragraph.length < MIN_LENGTH) {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–∏—Ç–∞—Ç–æ–π
        if (quotes.isNotEmpty) {
          final lastQuote = quotes.last;
          final combined = '$lastQuote $paragraph';
          if (combined.length <= MAX_LENGTH) {
            quotes[quotes.length - 1] = combined;
            continue;
          }
        }
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏ —Ü–∏—Ç–∞—Ç–∞ —Å–æ–≤—Å–µ–º –∫–æ—Ä–æ—Ç–∫–∞—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (paragraph.length < 50) continue;
        quotes.add(paragraph);
        continue;
      }
      
      // –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - —Ä–∞–∑–±–∏–≤–∞–µ–º
      if (paragraph.length > MAX_LENGTH) {
        final splitQuotes = _splitLongParagraph(paragraph);
        quotes.addAll(splitQuotes);
        continue;
      }
      
      quotes.add(paragraph);
    }
    
    return quotes;
  }
  
  // –†–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –Ω–∞ —Ü–∏—Ç–∞—Ç—ã
  static List<String> _splitLongParagraph(String paragraph) {
    final quotes = <String>[];
    final sentences = _splitIntoSentences(paragraph);
    
    var currentQuote = '';
    
    for (final sentence in sentences) {
      final testQuote = currentQuote.isEmpty 
          ? sentence 
          : '$currentQuote $sentence';
      
      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º - –¥–æ–±–∞–≤–ª—è–µ–º
      if (testQuote.length <= MAX_LENGTH) {
        currentQuote = testQuote;
      } else {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–∏—Ç–∞—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if (currentQuote.length >= MIN_LENGTH) {
          quotes.add(currentQuote.trim());
          currentQuote = sentence;
        } else {
          // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–∏—Ç–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è - –æ–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
          currentQuote = testQuote;
        }
      }
      
      // –ï—Å–ª–∏ —Ü–∏—Ç–∞—Ç–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      if (currentQuote.length >= TARGET_LENGTH) {
        quotes.add(currentQuote.trim());
        currentQuote = '';
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ç–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (currentQuote.trim().isNotEmpty) {
      if (currentQuote.length >= MIN_LENGTH || quotes.isEmpty) {
        quotes.add(currentQuote.trim());
      } else {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ç–∞—Ç–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
        if (quotes.isNotEmpty) {
          quotes[quotes.length - 1] = '${quotes.last} $currentQuote'.trim();
        } else {
          quotes.add(currentQuote.trim());
        }
      }
    }
    
    return quotes;
  }
  
  // –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ç–æ—á–µ–∫
  static List<String> _splitIntoSentences(String text) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ç–æ—á–∫–∞–º, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    final sentences = <String>[];
    final parts = text.split('.');
    
    var currentSentence = '';
    
    for (int i = 0; i < parts.length; i++) {
      final part = parts[i].trim();
      
      if (i == parts.length - 1) {
        // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
        currentSentence += part;
        break;
      }
      
      currentSentence += '$part.';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ª–∏ —ç—Ç–æ
      if (_isSentenceEnd(part, i < parts.length - 1 ? parts[i + 1] : '')) {
        sentences.add(currentSentence.trim());
        currentSentence = '';
      }
    }
    
    if (currentSentence.trim().isNotEmpty) {
      sentences.add(currentSentence.trim());
    }
    
    return sentences.where((s) => s.isNotEmpty).toList();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  static bool _isSentenceEnd(String beforeDot, String afterDot) {
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ –∏–¥–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞ –∏–ª–∏ –ø—Ä–æ–±–µ–ª —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π - —ç—Ç–æ –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (afterDot.isEmpty) return true;
    
    final firstChar = afterDot.trim().isNotEmpty ? afterDot.trim()[0] : '';
    if (firstChar.toUpperCase() == firstChar && RegExp(r'[A-Z–ê-–Ø]').hasMatch(firstChar)) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    final words = beforeDot.split(' ');
    if (words.isNotEmpty) {
      final lastWord = words.last.toLowerCase();
      // –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
      if (['—Ç', '–ø', '–≥', '–≤', '–Ω', '—ç', '—Å–º', '–¥—Ä', '–ø—Ä', '—Ç–ø', '–∏–º', '—É–ª'].contains(lastWord)) {
        return false;
      }
    }
    
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  static bool _isServiceInfo(String text) {
    return RegExp(r'^(ISBN|Copyright|¬©|\(c\)|–ì–õ–ê–í–ê\s+\w+|Chapter\s+\w+)', caseSensitive: false).hasMatch(text) ||
           RegExp(r'^[-=_*]{3,}$').hasMatch(text) ||
           RegExp(r'^\d+$').hasMatch(text) ||
           text.length < 10;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
  static String _createVersionedText(List<String> quotes, {required bool aggressive}) {
    final result = <String>[];
    
    for (int i = 0; i < quotes.length; i++) {
      final position = i + 1;
      final content = aggressive ? _aggressiveClean(quotes[i]) : quotes[i];
      result.add('[pos:$position] $content');
    }
    
    return result.join('\n\n');
  }
  
  // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è RAW –≤–µ—Ä—Å–∏–∏ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ—Ä–µ)
  static String _aggressiveClean(String text) {
    return text
        .replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '')
        .replaceAll(RegExp(r'[ \t]+'), ' ')
        .trim();
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏–Ω–µ —Ü–∏—Ç–∞—Ç
  static void _printStatistics(List<String> quotes) {
    if (quotes.isEmpty) return;
    
    final lengths = quotes.map((q) => q.length).toList();
    lengths.sort();
    
    final minLen = lengths.first;
    final maxLen = lengths.last;
    final avgLen = lengths.reduce((a, b) => a + b) / lengths.length;
    final medianLen = lengths[lengths.length ~/ 2];
    
    print('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ò–¢–ê–¢:');
    print('   –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: ${quotes.length}');
    print('   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: $minLen —Å–∏–º–≤–æ–ª–æ–≤');
    print('   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: $maxLen —Å–∏–º–≤–æ–ª–æ–≤');
    print('   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: ${avgLen.round()} —Å–∏–º–≤–æ–ª–æ–≤');
    print('   –ú–µ–¥–∏–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: $medianLen —Å–∏–º–≤–æ–ª–æ–≤');
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
    var small = lengths.where((l) => l < BookFormatter2.MIN_LENGTH).length;
    var medium = lengths.where((l) => l >= BookFormatter2.MIN_LENGTH && l <= BookFormatter2.TARGET_LENGTH).length;
    var large = lengths.where((l) => l > BookFormatter2.TARGET_LENGTH && l <= BookFormatter2.MAX_LENGTH).length;
    var xlarge = lengths.where((l) => l > BookFormatter2.MAX_LENGTH).length;
    
    print('   üìè –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:');
    print('      –ö–æ—Ä–æ—Ç–∫–∏–µ (<${BookFormatter2.MIN_LENGTH}): $small');
    print('      –°—Ä–µ–¥–Ω–∏–µ (${BookFormatter2.MIN_LENGTH}-${BookFormatter2.TARGET_LENGTH}): $medium');
    print('      –î–ª–∏–Ω–Ω—ã–µ (${BookFormatter2.TARGET_LENGTH}-${BookFormatter2.MAX_LENGTH}): $large');
    print('      –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ (>${BookFormatter2.MAX_LENGTH}): $xlarge');
  }
}

void main(List<String> args) async {
  if (args.length < 4) {
    print('''
üì± Quote-Sized Book Formatter –¥–ª—è Sacral App

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart formatter2.dart <source_file> <category> <author> <book_name>

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–º –¥–ª—è —ç–∫—Ä–∞–Ω–∞ (${BookFormatter2.MIN_LENGTH}-${BookFormatter2.MAX_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –Ω–∞ —Ç–æ—á–∫—É
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É [pos:N] –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä:
  dart formatter2.dart source_files/metaphysics_source.txt greece aristotle metaphysics

–†–µ–∑—É–ª—å—Ç–∞—Ç:
- RAW —Ñ–∞–π–ª —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏ + –ø–æ–∑–∏—Ü–∏–∏ [pos:N] (–¥–ª—è –ø–æ–∏—Å–∫–∞)
- CLEANED —Ñ–∞–π–ª —Å —Ç–µ–º–∏ –∂–µ —Ü–∏—Ç–∞—Ç–∞–º–∏ (–¥–ª—è —á—Ç–µ–Ω–∏—è)
  ''');
  exit(1);
  }
  
  try {
    await BookFormatter2.processBook(args[0], args[1], args[2], args[3]);
    print('\nüéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}