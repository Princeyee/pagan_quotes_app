
// tools/raw_formatter.dart - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
import 'dart:io';
import 'dart:convert';

class RawTextFormatter {
  static Future<void> formatFile(String inputPath, String outputPath) async {
    print('üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: $inputPath');
    
    try {
      final inputFile = File(inputPath);
      if (!await inputFile.exists()) {
        throw Exception('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $inputPath');
      }
      
      final content = await inputFile.readAsString(encoding: utf8);
      print('üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤');
      
      final formattedText = _processText(content);
      
      final outputFile = File(outputPath);
      await outputFile.create(recursive: true);
      await outputFile.writeAsString(formattedText, encoding: utf8);
      
      print('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: $outputPath');
      print('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${formattedText.length}');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: $e');
      rethrow;
    }
  }
  
  static String _processText(String rawText) {
    print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ–∫—Å—Ç–∞...');
    
    String text = rawText;
    
    // 1. –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –í–°–ï –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    text = _removeAllBrackets(text);
    
    // 2. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
    text = _normalizeCharacters(text);
    
    // 3. –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    text = _removePageNumbers(text);
    
    // 4. –£–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã
    text = _removeHeaders(text);
    
    // 5. –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É—Å–æ—Ä
    text = _removeTechnicalJunk(text);
    
    // 6. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = _normalizeLineBreaks(text);
    
    // 7. –°–∫–ª–µ–∏–≤–∞–µ–º –æ–±–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = _joinBrokenLines(text);
    
    // 8. –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±–∑–∞—Ü—ã
    text = _createParagraphs(text);
    
    // 9. –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –Ω–∞—à–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã [pos:N]
    text = _addPositionMarkers(text);
    
    print('‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return text;
  }
  
  /// –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±–∏—Ä–∞–µ–º –í–°–ï –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  static String _removeAllBrackets(String text) {
    print('üóëÔ∏è –£–¥–∞–ª—è–µ–º –í–°–ï –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞...');
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å [–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ], [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π], [—Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è] –∏ —Ç.–¥.
    text = text.replaceAll(RegExp(r'\[[^\]]*\]'), '');
    
    // –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–∫–æ–±–æ–∫
    text = text.replaceAll('[', '');
    text = text.replaceAll(']', '');
    
    // –£–±–∏—Ä–∞–µ–º —Ç–∞–∫–∂–µ –ø–æ–ª–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–µ Unicode —Å–∫–æ–±–∫–∏
    text = text.replaceAll('Ôºª', '');
    text = text.replaceAll('ÔºΩ', '');
    
    print('‚úÖ –í—Å–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ —É–¥–∞–ª–µ–Ω—ã');
    return text;
  }
  
  static String _normalizeCharacters(String text) {
    print('üî§ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã...');
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏
    text = text.replaceAll(RegExp(r'[""‚Äû"]'), '"');
    text = text.replaceAll(RegExp(r'[''`]'), "'");
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏—Ä–µ
    text = text.replaceAll(RegExp(r'[‚Äî‚Äì‚àí]'), '-');
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    text = text.replaceAll('‚Ä¶', '...');
    
    return text;
  }
  
  static String _removePageNumbers(String text) {
    print('üìÑ –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü...');
    
    final patterns = [
      RegExp(r'\n\s*\d+\s*\n', multiLine: true),
      RegExp(r'\n\s*-\s*\d+\s*-\s*\n', multiLine: true),
      RegExp(r'\n\s*Page\s+\d+\s*\n', multiLine: true, caseSensitive: false),
    ];
    
    for (final pattern in patterns) {
      text = text.replaceAll(pattern, '\n\n');
    }
    
    return text;
  }
  
  static String _removeHeaders(String text) {
    print('üìã –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã...');
    
    final patterns = [
      RegExp(r'\n\s*(CHAPTER|–ì–õ–ê–í–ê|–ß–ê–°–¢–¨|PART)\s+[IVXLCDM\d]+\s*\n', multiLine: true, caseSensitive: false),
      RegExp(r'\n\s*[A-Z–ê-–Ø\s\-]{5,30}\s*\n(?=\s*\n)', multiLine: true),
    ];
    
    for (final pattern in patterns) {
      text = text.replaceAll(pattern, '\n\n');
    }
    
    return text;
  }
  
  static String _removeTechnicalJunk(String text) {
    print('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É—Å–æ—Ä...');
    
    // –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.


replaceAll(RegExp(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]'), '');
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    text = text.replaceAll(RegExp(r'[ \t]+'), ' ');
    
    // –°—Ç—Ä–æ–∫–∏ –∏–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
    text = text.replaceAll(RegExp(r'\n\s*[-=_*]{3,}\s*\n', multiLine: true), '\n\n');
    
    // –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = text.replaceAll(RegExp(r'\n\s*(ISBN|Copyright|¬©|\(c\)).*\n', multiLine: true, caseSensitive: false), '\n\n');
    
    // –ü—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏ (–ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
    text = text.replaceAll(RegExp(r'\(\s*\)'), '');
    
    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    text = text.replaceAll(RegExp(r'[.]{4,}'), '...');
    
    return text;
  }
  
  static String _normalizeLineBreaks(String text) {
    print('‚Ü©Ô∏è –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫...');
    
    text = text.replaceAll(RegExp(r'\r\n|\r'), '\n');
    text = text.replaceAll(RegExp(r'\n{4,}'), '\n\n\n');
    
    return text;
  }
  
  static String _joinBrokenLines(String text) {
    print('üîó –°–∫–ª–µ–∏–≤–∞–µ–º –æ–±–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏...');
    
    final lines = text.split('\n');
    final result = <String>[];
    
    for (int i = 0; i < lines.length; i++) {
      final currentLine = lines[i].trim();
      
      if (currentLine.isEmpty) {
        result.add('');
        continue;
      }
      
      if (i < lines.length - 1 && 
          !RegExp(r'[.!?;:,]$').hasMatch(currentLine) &&
          lines[i + 1].trim().isNotEmpty &&
          !RegExp(r'^[A-Z–ê-–Ø]').hasMatch(lines[i + 1].trim()) &&
          currentLine.length > 10) {
        
        final nextLine = lines[i + 1].trim();
        result.add('$currentLine $nextLine');
        i++;
      } else {
        result.add(currentLine);
      }
    }
    
    return result.join('\n');
  }
  
  static String _createParagraphs(String text) {
    print('üìù –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±–∑–∞—Ü—ã...');
    
    final lines = text.split('\n');
    final paragraphs = <String>[];
    final currentParagraph = <String>[];
    
    for (final line in lines) {
      final trimmedLine = line.trim();
      
      if (trimmedLine.isEmpty) {
        if (currentParagraph.isNotEmpty) {
          paragraphs.add(currentParagraph.join(' ').trim());
          currentParagraph.clear();
        }
      } else {
        currentParagraph.add(trimmedLine);
      }
    }
    
    if (currentParagraph.isNotEmpty) {
      paragraphs.add(currentParagraph.join(' ').trim());
    }
    
    // –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä - —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã
    final filteredParagraphs = paragraphs.where((p) => p.length > 5).toList();
    
    print('üìä –ê–±–∑–∞—Ü–µ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${filteredParagraphs.length}');
    
    return filteredParagraphs.join('\n\n');
  }
  
  /// –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –Ω–∞—à–∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
  static String _addPositionMarkers(String text) {
    print('üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã...');
    
    final paragraphs = text.split('\n\n');
    final result = <String>[];
    
    for (int i = 0; i < paragraphs.length; i++) {
      final paragraph = paragraphs[i].trim();
      if (paragraph.isNotEmpty) {
        // –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û ASCII —Å–∫–æ–±–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π
        result.add('[pos:${i + 1}] $paragraph');
      }
    }
    
    return result.join('\n\n');
  }
  
  static int _countParagraphs(String text) {
    return RegExp(r'\[pos:\d+\]').allMatches(text).length;
  }
}

//================================================================
// tools/reading_formatter.dart - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
//================================================================

class ReadingTextFormatter {
  static Future<void> formatFile(String inputPath, String cleanedPath, String outputPath) async {
    print('üìñ –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–±–µ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é: $inputPath');
    print('üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å: $cleanedPath');
    
    try {
      final inputFile = File(inputPath);
      final cleanedFile = File(cleanedPath);
      
      if (!await inputFile.exists()) {
        throw Exception('–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $inputPath');
      }
      
      if (!await cleanedFile.exists()) {
        throw Exception('–û—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $cleanedPath');
      }


final originalContent = await inputFile.readAsString(encoding: utf8);
      final cleanedContent = await cleanedFile.readAsString(encoding: utf8);
      
      // –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–±–µ–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ë–ï–ó –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
      final readableText = _createReadableVersion(originalContent, cleanedContent);
      
      final outputFile = File(outputPath);
      await outputFile.create(recursive: true);
      await outputFile.writeAsString(readableText, encoding: utf8);
      
      print('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: $outputPath');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞: $e');
      rethrow;
    }
  }
  
  /// –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è —á—Ç–µ–Ω–∏—è –ë–ï–ó –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
  static String _createReadableVersion(String originalText, String cleanedText) {
    print('üìñ –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è —á—Ç–µ–Ω–∏—è...');
    
    // –ë–µ—Ä–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –£–ë–ò–†–ê–ï–ú –∏–∑ –Ω–µ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    String readableText = cleanedText;
    
    // –£–¥–∞–ª—è–µ–º –í–°–ï –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã [pos:N]
    readableText = readableText.replaceAll(RegExp(r'\[pos:\d+\]\s*'), '');
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
    readableText = readableText.replaceAll(RegExp(r'\n\s*\n\s*\n'), '\n\n');
    readableText = readableText.replaceAll(RegExp(r'^\s+|\s+$', multiLine: true), '');
    
    print('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤');
    return readableText;
  }
}

/// –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
void main(List<String> args) async {
  if (args.isEmpty) {
    print('''
üìö Text Formatters –¥–ª—è Sacral App

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart tools.dart raw <input_file> <output_file>     - —Å–æ–∑–¥–∞—Ç—å RAW –≤–µ—Ä—Å–∏—é —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
  dart tools.dart clean <raw_file> <output_file>     - —Å–æ–∑–¥–∞—Ç—å CLEANED –≤–µ—Ä—Å–∏—é –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤

–ü—Ä–∏–º–µ—Ä—ã:
  dart tools.dart raw metaphysics_source.txt metaphysics_raw.txt
  dart tools.dart clean metaphysics_raw.txt metaphysics_cleaned.txt
    ''');
    exit(1);
  }
  
  try {
    if (args[0] == 'raw' && args.length >= 3) {
      await RawTextFormatter.formatFile(args[1], args[2]);
    } else if (args[0] == 'clean' && args.length >= 3) {
      // –ß–∏—Ç–∞–µ–º RAW —Ñ–∞–π–ª –∏ —Å–æ–∑–¥–∞–µ–º CLEANED –≤–µ—Ä—Å–∏—é
      final rawFile = File(args[1]);
      final rawContent = await rawFile.readAsString(encoding: utf8);
      
      // –£–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è CLEANED –≤–µ—Ä—Å–∏–∏
      final cleanedContent = rawContent.replaceAll(RegExp(r'\[pos:\d+\]\s*'), '');
      final cleanedFormatted = cleanedContent.replaceAll(RegExp(r'\n\s*\n\s*\n'), '\n\n');
      
      final outputFile = File(args[2]);
      await outputFile.create(recursive: true);
      await outputFile.writeAsString(cleanedFormatted, encoding: utf8);
      
      print('‚úÖ –°–æ–∑–¥–∞–Ω–∞ CLEANED –≤–µ—Ä—Å–∏—è: ${args[2]}');
    } else {
      print('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
      exit(1);
    }
    
    print('\nüéâ –ì–æ—Ç–æ–≤–æ!');
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}
