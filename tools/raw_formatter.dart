// tools/raw_formatter.dart
import 'dart:io';
import 'dart:convert';

/// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—ã—Ä—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∫–Ω–∏–≥ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç raw.txt —Ñ–∞–π–ª—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏ [pos:N]
class RawTextFormatter {
  /// –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
  static Future<void> formatFile(String inputPath, String outputPath) async {
    print('üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: $inputPath');
    
    try {
      // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
      final inputFile = File(inputPath);
      if (!await inputFile.exists()) {
        throw Exception('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $inputPath');
      }
      
      final content = await inputFile.readAsString(encoding: utf8);
      print('üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
      final formattedText = _processText(content);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      final outputFile = File(outputPath);
      await outputFile.create(recursive: true);
      await outputFile.writeAsString(formattedText, encoding: utf8);
      
      print('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: $outputPath');
      print('üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: ${formattedText.length}');
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      final paragraphCount = _countParagraphs(formattedText);
      print('üìù –°–æ–∑–¥–∞–Ω–æ –∞–±–∑–∞—Ü–µ–≤: $paragraphCount');
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: $e');
      rethrow;
    }
  }
  
  /// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
  static String _processText(String rawText) {
    print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ç–µ–∫—Å—Ç–∞...');
    
    String text = rawText;
    
    // 1. –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    text = _removePageNumbers(text);
    
    // 2. –£–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã –∏ —Ö—ç–¥–µ—Ä—ã
    text = _removeHeaders(text);
    
    // 3. –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É—Å–æ—Ä
    text = _removeTechnicalJunk(text);
    
    // 4. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = _normalizeLineBreaks(text);
    
    // 5. –°–∫–ª–µ–∏–≤–∞–µ–º –æ–±–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = _joinBrokenLines(text);
    
    // 6. –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±–∑–∞—Ü—ã
    text = _createParagraphs(text);
    
    // 7. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    text = _addPositionMarkers(text);
    
    print('‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return text;
  }
  
  /// –£–¥–∞–ª—è–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
  static String _removePageNumbers(String text) {
    print('üìÑ –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü...');
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
    final patterns = [
      RegExp(r'\n\s*\d+\s*\n', multiLine: true), // –ù–æ–º–µ—Ä –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
      RegExp(r'\n\s*-\s*\d+\s*-\s*\n', multiLine: true), // -123-
      RegExp(r'\n\s*\[\s*\d+\s*\]\s*\n', multiLine: true), // [123]
      RegExp(r'\n\s*Page\s+\d+\s*\n', multiLine: true, caseSensitive: false), // Page 123
      RegExp(r'\n\s*\d+\s*/\s*\d+\s*\n', multiLine: true), // 123/456
    ];
    
    for (final pattern in patterns) {
      text = text.replaceAll(pattern, '\n\n');
    }
    
    return text;
  }
  
  /// –£–¥–∞–ª—è–µ—Ç –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã –∏ —Ö—ç–¥–µ—Ä—ã
  static String _removeHeaders(String text) {
    print('üìã –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª—ã –∏ —Ö—ç–¥–µ—Ä—ã...');
    
    final patterns = [
      // –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–Ω–∏–≥/–≥–ª–∞–≤
      RegExp(r'\n\s*[A-Z–ê-–Ø\s]{10,50}\s*\n(?=\s*[A-Z–ê-–Ø\s]{10,50}\s*\n)', multiLine: true),
      
      // –°—Ç—Ä–æ–∫–∏ —Å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
      RegExp(r'\n\s*[A-Z–ê-–Ø\s\-]{5,}\s*\n', multiLine: true),
      
      // –°—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "CHAPTER 1", "–ì–õ–ê–í–ê 1"
      RegExp(r'\n\s*(CHAPTER|–ì–õ–ê–í–ê|–ß–ê–°–¢–¨|PART)\s+[IVXLCDM\d]+\s*\n', multiLine: true, caseSensitive: false),
      
      // –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤
      RegExp(r'\n\s*[A-Z–ê-–Ø][a-z–∞-—è]+\s+[A-Z–ê-–Ø][a-z–∞-—è]+\s*\n(?=.*\n\s*[A-Z–ê-–Ø][a-z–∞-—è]+\s+[A-Z–ê-–Ø][a-z–∞-—è]+\s*\n)', multiLine: true),
    ];
    
    for (final pattern in patterns) {
      text = text.replaceAll(pattern, '\n\n');
    }
    
    return text;
  }
  
  /// –£–¥–∞–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É—Å–æ—Ä
  static String _removeTechnicalJunk(String text) {
    print('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º—É—Å–æ—Ä...');
    
    final patterns = [
      // –°–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      RegExp(r'[^\w\s\.,!?;:()\-""''¬´¬ª\n]', unicode: true),
      
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
      RegExp(r'[ \t]+'),
      
      // –°—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
      RegExp(r'\n\s*[-=_*]{3,}\s*\n', multiLine: true),
      
      // –°—Ç—Ä–æ–∫–∏ —Å —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      RegExp(r'\n\s*(ISBN|Copyright|¬©|\(c\)).*\n', multiLine: true, caseSensitive: false),
      
      // –ü—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏ –∏ –∫–∞–≤—ã—á–∫–∏
      RegExp(r'\(\s*\)|\[\s*\]|""\s*|''\s*'),
      
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      RegExp(r'[.]{3,}'),
    ];
    
    text = text.replaceAll(patterns[0], ''); // –°–ª—É–∂–µ–±–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = text.replaceAll(patterns[1], ' '); // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    
    for (int i = 2; i < patterns.length - 1; i++) {
      text = text.replaceAll(patterns[i], '\n\n');
    }
    
    text = text.replaceAll(patterns.last, '...'); // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    
    return text;
  }
  
  /// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  static String _normalizeLineBreaks(String text) {
    print('‚Ü©Ô∏è –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫...');
    
    // –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –Ω–∞ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ
    text = text.replaceAll(RegExp(r'\r\n|\r'), '\n');
    
    // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã (–±–æ–ª—å—à–µ 3)
    text = text.replaceAll(RegExp(r'\n{4,}'), '\n\n\n');
    
    return text;
  }
  
  /// –°–∫–ª–µ–∏–≤–∞–µ—Ç –æ–±–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
  static String _joinBrokenLines(String text) {
    print('üîó –°–∫–ª–µ–∏–≤–∞–µ–º –æ–±–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏...');
    
    final lines = text.split('\n');
    final result = <String>[];
    
    for (int i = 0; i < lines.length; i++) {
      final currentLine = lines[i].trim();
      
      if (currentLine.isEmpty) {
        result.add('');
        continue;
      }
      
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–Ω–∞–∫–æ–º –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
      if (i < lines.length - 1 && 
          !currentLine.endsWith(RegExp(r'[.!?;:]')) &&
          !currentLine.endsWith(',') &&
          lines[i + 1].trim().isNotEmpty &&
          !lines[i + 1].trim().startsWith(RegExp(r'[A-Z–ê-–Ø]')) && // –ù–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π
          currentLine.length > 10) { // –ù–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞
        
        // –°–∫–ª–µ–∏–≤–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
        final nextLine = lines[i + 1].trim();
        result.add('$currentLine $nextLine');
        i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
      } else {
        result.add(currentLine);
      }
    }
    
    return result.join('\n');
  }
  
  /// –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–±–∑–∞—Ü—ã
  static String _createParagraphs(String text) {
    print('üìù –§–æ—Ä–º–∏—Ä—É–µ–º –∞–±–∑–∞—Ü—ã...');
    
    final lines = text.split('\n');
    final paragraphs = <String>[];
    final currentParagraph = <String>[];
    
    for (final line in lines) {
      final trimmedLine = line.trim();
      
      if (trimmedLine.isEmpty) {
        // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –∫–æ–Ω–µ—Ü –∞–±–∑–∞—Ü–∞
        if (currentParagraph.isNotEmpty) {
          paragraphs.add(currentParagraph.join(' ').trim());
          currentParagraph.clear();
        }
      } else {
        currentParagraph.add(trimmedLine);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (currentParagraph.isNotEmpty) {
      paragraphs.add(currentParagraph.join(' ').trim());
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã
    final filteredParagraphs = paragraphs.where((p) => p.length > 20).toList();
    
    return filteredParagraphs.join('\n\n');
  }
  
  /// –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã [pos:N]
  static String _addPositionMarkers(String text) {
    print('üè∑Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã...');
    
    final paragraphs = text.split('\n\n');
    final result = <String>[];
    
    for (int i = 0; i < paragraphs.length; i++) {
      final paragraph = paragraphs[i].trim();
      if (paragraph.isNotEmpty) {
        result.add('[pos:${i + 1}] $paragraph');
      }
    }
    
    return result.join('\n\n');
  }
  
  /// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–∑–∞—Ü–µ–≤
  static int _countParagraphs(String text) {
    return RegExp(r'\[pos:\d+\]').allMatches(text).length;
  }
  
  /// –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  static Future<void> formatDirectory(String inputDir, String outputDir) async {
    print('üìÅ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: $inputDir');
    
    final inputDirectory = Directory(inputDir);
    if (!await inputDirectory.exists()) {
      throw Exception('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $inputDir');
    }
    
    final outputDirectory = Directory(outputDir);
    await outputDirectory.create(recursive: true);
    
    await for (final entity in inputDirectory.list()) {
      if (entity is File && entity.path.endsWith('.txt')) {
        final fileName = entity.path.split('/').last;
        final outputPath = '$outputDir/${fileName.replaceAll('.txt', '_raw.txt')}';
        
        print('\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: $fileName');
        await formatFile(entity.path, outputPath);
      }
    }
    
    print('\n‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  }
}

/// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
void main(List<String> args) async {
  if (args.length < 2) {
    print('''
üìö Raw Text Formatter –¥–ª—è Sacral App

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  dart raw_formatter.dart <input_file> <output_file>
  dart raw_formatter.dart <input_dir> <output_dir> --batch

–ü—Ä–∏–º–µ—Ä—ã:
  dart raw_formatter.dart republic_source.txt republic_raw.txt
  dart raw_formatter.dart ./sources/ ./assets/full_texts/ --batch

–§—É–Ω–∫—Ü–∏–∏:
  ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª–æ–≤
  ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –º—É—Å–æ—Ä–∞
  ‚úÖ –°–∫–ª–µ–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
  ‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤
  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ [pos:N]
    ''');
    exit(1);
  }
  
  try {
    if (args.length > 2 && args[2] == '--batch') {
      await RawTextFormatter.formatDirectory(args[0], args[1]);
    } else {
      await RawTextFormatter.formatFile(args[0], args[1]);
    }
    
    print('\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } catch (e) {
    print('\n‚ùå –û—à–∏–±–∫–∞: $e');
    exit(1);
  }
}