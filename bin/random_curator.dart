
# 
// bin/random_curator.dart - –°–õ–£–ß–ê–ô–ù–´–ô –û–¢–ë–û–† –ò–ó –í–°–ï–• –ö–ù–ò–ì
import 'dart:io';
import 'dart:convert';
import 'dart:math';

class BookInfo {
  final String path;
  final String category;
  final String author;
  final String source;
  
  BookInfo({
    required this.path,
    required this.category,
    required this.author,
    required this.source,
  });
}

class Quote {
  final String id;
  final String text;
  final String author;
  final String source;
  final String category;
  final int position;
  final bool approved;
  final DateTime reviewedAt;

  Quote({
    required this.id,
    required this.text,
    required this.author,
    required this.source,
    required this.category,
    required this.position,
    required this.approved,
    required this.reviewedAt,
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'text': text,
    'author': author,
    'source': source,
    'category': category,
    'position': position,
    'approved': approved,
    'reviewedAt': reviewedAt.toIso8601String(),
  };

  factory Quote.fromJson(Map<String, dynamic> json) => Quote(
    id: json['id'],
    text: json['text'],
    author: json['author'],
    source: json['source'],
    category: json['category'],
    position: json['position'],
    approved: json['approved'],
    reviewedAt: DateTime.parse(json['reviewedAt']),
  );
}

class Paragraph {
  final String text;
  final BookInfo book;
  final int position;
  final String id;
  
  Paragraph({
    required this.text,
    required this.book,
    required this.position,
    required this.id,
  });
}

class RandomCurator {
  final String outputPath;
  final Random random = Random();
  
  List<BookInfo> books = [];
  List<Paragraph> allParagraphs = [];
  List<Quote> processedQuotes = [];
  Set<String> processedIds = {};
  
  RandomCurator({required this.outputPath});

  Future<void> run() async {
    print('\nüé≤ –°–õ–£–ß–ê–ô–ù–´–ô –û–¢–ë–û–† –¶–ò–¢–ê–¢ –ò–ó –í–°–ï–• –ö–ù–ò–ì');
    print('=' * 50);

    setupBooks();
    await loadAllTexts();
    await loadExisting();
    showStats();
    await mainLoop();
  }

  void setupBooks() {
    books = [
      // –ì—Ä–µ—Ü–∏—è - –∞–Ω—Ç–∏—á–Ω–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è
      BookInfo(path: 'assets/full_texts/greece/aristotle/metaphysics_cleaned.txt', category: 'greece', author: '–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å', source: '–ú–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞'),
      BookInfo(path: 'assets/full_texts/greece/aristotle/ethics_cleaned.txt', category: 'greece', author: '–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å', source: '–≠—Ç–∏–∫–∞'),
      BookInfo(path: 'assets/full_texts/greece/aristotle/politics_cleaned.txt', category: 'greece', author: '–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å', source: '–ü–æ–ª–∏—Ç–∏–∫–∞'),
      BookInfo(path: 'assets/full_texts/greece/aristotle/rhetoric_cleaned.txt', category: 'greece', author: '–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å', source: '–†–∏—Ç–æ—Ä–∏–∫–∞'),
      BookInfo(path: 'assets/full_texts/greece/plato/sophist_cleaned.txt', category: 'greece', author: '–ü–ª–∞—Ç–æ–Ω', source: '–°–æ—Ñ–∏—Å—Ç'),
      BookInfo(path: 'assets/full_texts/greece/plato/parmenides_cleaned.txt', category: 'greece', author: '–ü–ª–∞—Ç–æ–Ω', source: '–ü–∞—Ä–º–µ–Ω–∏–¥'),
      BookInfo(path: 'assets/full_texts/greece/homer/iliad_cleaned.txt', category: 'greece', author: '–ì–æ–º–µ—Ä', source: '–ò–ª–∏–∞–¥–∞'),
      BookInfo(path: 'assets/full_texts/greece/homer/odyssey_cleaned.txt', category: 'greece', author: '–ì–æ–º–µ—Ä', source: '–û–¥–∏—Å—Å–µ—è'),
      BookInfo(path: 'assets/full_texts/greece/hesiod/labour_and_days_cleaned.txt', category: 'greece', author: '–ì–µ—Å–∏–æ–¥', source: '–¢—Ä—É–¥—ã –∏ –¥–Ω–∏'),
      
      // –°–µ–≤–µ—Ä - —ç–ø–æ—Å –∏ –º–∏—Ñ–æ–ª–æ–≥–∏—è
      BookInfo(path: 'assets/full_texts/nordic/folk/beowulf_cleaned.txt', category: 'nordic', author: '–ê–Ω–æ–Ω–∏–º', source: '–ë–µ–æ–≤—É–ª—å—Ñ'),
      BookInfo(path: 'assets/full_texts/nordic/folk/elder_edda_cleaned.txt', category: 'nordic', author: '–ê–Ω–æ–Ω–∏–º', source: '–°—Ç–∞—Ä—à–∞—è –≠–¥–¥–∞'),
      
      // –§–∏–ª–æ—Å–æ—Ñ–∏—è - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º—ã—Å–ª—å
      BookInfo(path: 'assets/full_texts/philosophy/heidegger/being_and_time_cleaned.txt', category: 'philosophy', author: '–•–∞–π–¥–µ–≥–≥–µ—Ä', source: '–ë—ã—Ç–∏–µ –∏ –≤—Ä–µ–º—è'),
      BookInfo(path: 'assets/full_texts/philosophy/heidegger/what_means_to_think_cleaned.txt', category: 'philosophy', author: '–•–∞–π–¥–µ–≥–≥–µ—Ä', source: '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –º—ã—Å–ª–∏—Ç—å'),
      BookInfo(path: 'assets/full_texts/philosophy/nietzsche/antichrist_cleaned.txt', category: 'philosophy', author: '–ù–∏—Ü—à–µ', source: '–ê–Ω—Ç–∏—Ö—Ä–∏—Å—Ç'),
      BookInfo(path: 'assets/full_texts/philosophy/nietzsche/gay_science_cleaned.txt', category: 'philosophy', author: '–ù–∏—Ü—à–µ', source: '–í–µ—Å–µ–ª–∞—è –Ω–∞—É–∫–∞'),
      BookInfo(path: 'assets/full_texts/philosophy/nietzsche/thus_spoke_zarathustra_cleaned.txt', category: 'philosophy', author: '–ù–∏—Ü—à–µ', source: '–ó–∞—Ä–∞—Ç—É—Å—Ç—Ä–∞'),
      BookInfo(path: 'assets/full_texts/philosophy/nietzsche/birth_of_tragedy_cleaned.txt', category: 'philosophy', author: '–ù–∏—Ü—à–µ', source: '–†–æ–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–≥–µ–¥–∏–∏'),
      BookInfo(path: 'assets/full_texts/philosophy/nietzsche/beyond_good_and_evil_cleaned.txt', category: 'philosophy', author: '–ù–∏—Ü—à–µ', source: '–ü–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É –¥–æ–±—Ä–∞ –∏ –∑–ª–∞'),
      BookInfo(path: 'assets/full_texts/philosophy/schopenhauer/world_as_will_and_representation_cleaned.txt', category: 'philosophy', author: '–®–æ–ø–µ–Ω–≥–∞—É—ç—Ä', source: '–ú–∏—Ä –∫–∞–∫ –≤–æ–ª—è'),
      BookInfo(path: 'assets/full_texts/philosophy/schopenhauer/aphorisms_on_wisdom_of_life_cleaned.txt', category: 'philosophy', author: '–®–æ–ø–µ–Ω–≥–∞—É—ç—Ä', source: '–ê—Ñ–æ—Ä–∏–∑–º—ã'),
      
      // –Ø–∑—ã—á–µ—Å—Ç–≤–æ - —Ç—Ä–∞–¥–∏—Ü–∏—è –∏ —Å–∏–º–≤–æ–ª–∏–∑–º
      BookInfo(path: 'assets/full_texts/pagan/julius_evola/pagan_imperialism_cleaned.txt', category: 'pagan', author: '–≠–≤–æ–ª–∞', source: '–Ø–∑—ã—á–µ—Å–∫–∏–π –∏–º–ø–µ—Ä–∏–∞–ª–∏–∑–º'),
      BookInfo(path: 'assets/full_texts/pagan/julius_evola/metaphysics_of_sex_cleaned.txt', category: 'pagan', author: '–≠–≤–æ–ª–∞', source: '–ú–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞ –ø–æ–ª–∞'),
      BookInfo(path: 'assets/full_texts/pagan/julius_evola/men_among_ruins_cleaned.txt', category: 'pagan', author: '–≠–≤–æ–ª–∞', source: '–õ—é–¥–∏ –∏ —Ä—É–∏–Ω—ã'),
      BookInfo(path: 'assets/full_texts/pagan/mercea_eliade/sacred_and_profane_cleaned.txt', category: 'pagan', author: '–≠–ª–∏–∞–¥–µ', source: '–°–≤—è—â–µ–Ω–Ω–æ–µ –∏ –º–∏—Ä—Å–∫–æ–µ'),
      BookInfo(path: 'assets/full_texts/pagan/mercea_eliade/myth_of_eternal_return_cleaned.txt', category: 'pagan', author: '–≠–ª–∏–∞–¥–µ', source: '–ú–∏—Ñ –æ –≤–µ—á–Ω–æ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏'),
      BookInfo(path: 'assets/full_texts/pagan/mercea_eliade/history_of_religious_ideas_vol1_cleaned.txt', category: 'pagan', author: '–≠–ª–∏–∞–¥–µ', source: '–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—ã —Ç–æ–º 1'),
      BookInfo(path: 'assets/full_texts/pagan/mercea_eliade/history_of_religious_ideas_vol2_cleaned.txt', category: 'pagan', author: '–≠–ª–∏–∞–¥–µ', source: '–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—ã —Ç–æ–º 2'),
      BookInfo(path: 'assets/full_texts/pagan/mercea_eliade/history_of_religious_ideas_vol3_cleaned.txt', category: 'pagan', author: '–≠–ª–∏–∞–¥–µ', source: '–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—ã —Ç–æ–º 3'),
    ];
  }

  Future<void> loadAllTexts() async {
    print('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏...');
    
    for (final book in books) {
      try {
        final file = File(book.path);
        if (!await file.exists()) {
          print('‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${book.path}');
          continue;
        }
        
        final content = await file.readAsString();
        final parts = content.split(RegExp(r'\[pos:\d+\]'));
        
        for (int i = 0; i < parts.length; i++) {
          final text = parts[i].trim();
          if (text.isNotEmpty && text.length > 20) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
            final id = '${book.category}_${book.author}_${book.source}_$i';
            allParagraphs.add(Paragraph(
              text: text,
              book: book,
              position: i,
              id: id,
            ));
          }
        }
        
        print('‚úÖ ${book.author} - ${book.source}: ${parts.where((p) => p.trim().isNotEmpty).length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤');
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${book.path}: $e');
      }
    }
    
    print('\nüìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${allParagraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏–∑ ${books.length} –∫–Ω–∏–≥');
  }

  Future<void> loadExisting() async {
    try {
      final file = File(outputPath);
      if (await file.exists()) {
        final content = await file.readAsString();
        final List<dynamic> jsonData = json.decode(content);
        processedQuotes = jsonData.map((j) => Quote.fromJson(j)).toList();
        processedIds = processedQuotes.map((q) => q.id).toSet();
        print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedQuotes.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç');
      }
    } catch (e) {
      print('üìù –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è');
    }
  }

  void showStats() {
    final approved = processedQuotes.where((q) => q.approved).length;
    final rejected = processedQuotes.where((q) => !q.approved).length;
    final remaining = allParagraphs.where((p) => !processedIds.contains(p.id)).length;
    
    print('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    print('–í—Å–µ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: ${allParagraphs.length}');
    print('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedQuotes.length}');
    print('–û–¥–æ–±—Ä–µ–Ω–æ: $approved');
    print('–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: $rejected');
    print('–û—Å—Ç–∞–ª–æ—Å—å: $remaining');
    print('-' * 50);
  }

  Future<void> mainLoop() async {
    print('\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –æ—Ç–±–æ—Ä–∞ —Ü–∏—Ç–∞—Ç:');
    print('[s] - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    print('[done] - —ç–∫—Å–ø–æ—Ä—Ç –∏ –≤—ã—Ö–æ–¥');
    print('[q] - –≤—ã—Ö–æ–¥ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    print('');
    print('–î–ª—è –∫–∞–∂–¥–æ–π —Ü–∏—Ç–∞—Ç—ã: [y] - —Ö–æ—Ä–æ—à–∞—è, [n] - –ø–ª–æ—Ö–∞—è, [s] - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
    print('–ù–∞—á–∏–Ω–∞–µ–º...\n');

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ç–∞—Ç—É
    await reviewRandom();

    while (true) {
      stdout.write('> ');
      final command = stdin.readLineSync()?.trim().toLowerCase() ?? '';
      
      switch (command) {
        case 's':
          showStats();
          break;
        case 'done':
          await exportAndQuit();
          return;
        case 'q':
          return;
        default:
          print('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ [s], [done] –∏–ª–∏ [q]');
      }
    }
  }

  Future<void> reviewRandom() async {
    // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    final unprocessed = allParagraphs.where((p) => !processedIds.contains(p.id)).toList();
    
    if (unprocessed.isEmpty) {
      print('‚úÖ –í—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
      print('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É [done] –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.');
      return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    final randomParagraph = unprocessed[random.nextInt(unprocessed.length)];
    await reviewParagraph(randomParagraph);
  }

  Future<void> reviewParagraph(Paragraph paragraph) async {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
    print('\n' + '=' * 70);
    print('üé≤ –°–õ–£–ß–ê–ô–ù–ê–Ø –¶–ò–¢–ê–¢–ê');
    print('=' * 70);
    print('üìö –ö–Ω–∏–≥–∞: ${paragraph.book.source}');
    print('‚úçÔ∏è  –ê–≤—Ç–æ—Ä: ${paragraph.book.author}');
    print('üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${paragraph.book.category}');
    print('üìç –ü–æ–∑–∏—Ü–∏—è: ${paragraph.position}');
    print('=' * 70);
    print('');
    
    // –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    _printFormatted(paragraph.text);
    
    print('\n' + '-' * 70);
    final remaining = allParagraphs.where((p) => !processedIds.contains(p.id)).length;
    print('–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: $remaining');
    print('\n[y] –î–ê, –æ—Ç–ª–∏—á–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞!   [n] –ù–ï–¢, –ø–ª–æ—Ö–∞—è   [s] –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å');
    
    while (true) {
      stdout.write('–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ: ');
      final decision = stdin.readLineSync()?.trim().toLowerCase() ?? 's';
      
      bool? approved;
      bool shouldContinue = false;
      
      switch (decision) {
        case 'y':
        case 'yes':
        case '–¥–∞':
          approved = true;
          print('‚úÖ –û–î–û–ë–†–ï–ù–û! üî•');
          shouldContinue = true;
          break;
        case 'n':
        case 'no':
        case '–Ω–µ—Ç':
          approved = false;
          print('‚ùå –û–¢–ö–õ–û–ù–ï–ù–û');
          shouldContinue = true;
          break;
        case 's':
        case 'skip':
          print('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ');
          shouldContinue = true;
          break;
        default:
          print('‚ùì –í–≤–µ–¥–∏—Ç–µ y, n –∏–ª–∏ s');
          continue; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –≤–≤–æ–¥
      }
      
      if (approved != null) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        final quote = Quote(
          id: paragraph.id,
          text: paragraph.text,
          author: paragraph.book.author,
          source: paragraph.book.source,
          category: paragraph.book.category,
          position: paragraph.position,
          approved: approved,
          reviewedAt: DateTime.now(),
        );
        
        processedQuotes.add(quote);
        processedIds.add(paragraph.id);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await save();
        
        final approvedCount = processedQuotes.where((q) => q.approved).length;
        print('üíé –û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç: $approvedCount');
      }
      
      if (shouldContinue) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É
        print('\n‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ü–∏—Ç–∞—Ç—É...');
        await Future.delayed(Duration(milliseconds: 500)); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        await reviewRandom();
        break;
      }
    }
  }

  void _printFormatted(String text) {
    // –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
    final words = text.split(' ');
    var currentLine = '';
    
    for (final word in words) {
      if (currentLine.length + word.length > 65) {
        print('   $currentLine');
        currentLine = word;
      } else {
        currentLine += (currentLine.isEmpty ? '' : ' ') + word;
      }
    }
    if (currentLine.isNotEmpty) print('   $currentLine');
  }

  Future<void> save() async {
    try {
      final file = File(outputPath);
      await file.writeAsString(
        JsonEncoder.withIndent('  ').convert(
          processedQuotes.map((q) => q.toJson()).toList()
        )
      );
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e');
    }
  }

  Future<void> exportAndQuit() async {
    await save();
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
    final approved = processedQuotes.where((q) => q.approved).toList();
    final approvedPath = outputPath.replaceAll('.json', '_approved.json');
    
    try {
      final file = File(approvedPath);
      await file.writeAsString(
        JsonEncoder.withIndent('  ').convert(
          approved.map((q) => q.toJson()).toList()
        )
      );
      
      print('\n' + '=' * 50);
      print('üéâ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
      print('=' * 50);
      print('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedQuotes.length} —Ü–∏—Ç–∞—Ç');
      print('üíé –û–¥–æ–±—Ä–µ–Ω–æ: ${approved.length} —Ü–∏—Ç–∞—Ç');
      print('üìÇ –≠–∫—Å–ø–æ—Ä—Ç: $approvedPath');
      print('\nüî• –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å —Ñ–∞–π–ª –≤ pubspec.yaml:');
      print('   - $approvedPath');
      print('\nüöÄ –ì–æ—Ç–æ–≤–æ! –¢–≤–æ—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ü–∏—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∞! üëã');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: $e');
    }
  }
}

void main(List<String> args) async {
  final outputPath = args.isNotEmpty ? args[0] : 'assets/curated/all_quotes.json';
  
  print('üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤: $outputPath');
  
  final curator = RandomCurator(outputPath: outputPath);
  await curator.run();
}