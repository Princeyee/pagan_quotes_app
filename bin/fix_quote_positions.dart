import 'dart:convert';
import 'dart:io';
import 'dart:math';

/// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —Ü–∏—Ç–∞—Ç –≤ JSON —Ñ–∞–π–ª–∞—Ö
/// –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Ü–∏—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç JSON
void main() async {
  print('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π —Ü–∏—Ç–∞—Ç...');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
  final jsonFiles = [
    'assets/curated/my_quotes_approved.json',
    'assets/curated/my_quotes_approved_4.json',
    'assets/curated/my_quotes_approved_5.json',
    'assets/curated/my_quotes_approved10.json',
  ];
  
  // –ú–∞–ø–ø–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫ —Ñ–∞–π–ª–∞–º
  final sourceMapping = {
    '–¢–∞–∫ –≥–æ–≤–æ—Ä–∏–ª –ó–∞—Ä–∞—Ç—É—Å—Ç—Ä–∞': 'assets/full_texts/philosophy/nietzsche/thus_spoke_zarathustra_cleaned.txt',
    '–ê–Ω—Ç–∏—Ö—Ä–∏—Å—Ç': 'assets/full_texts/philosophy/nietzsche/antichrist_cleaned.txt',
    '–í–µ—Å–µ–ª–∞—è –Ω–∞—É–∫–∞': 'assets/full_texts/philosophy/nietzsche/gay_science_cleaned.txt',
    '–ü–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É –¥–æ–±—Ä–∞ –∏ –∑–ª–∞': 'assets/full_texts/philosophy/nietzsche/beyond_good_and_evil_cleaned.txt',
    '–†–æ–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–≥–µ–¥–∏–∏ –∏–∑ –¥—É—Ö–∞ –º—É–∑—ã–∫–∏': 'assets/full_texts/philosophy/nietzsche/birth_of_tragedy_cleaned.txt',
    '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç –º—ã—Å–ª–∏—Ç—å': 'assets/full_texts/philosophy/heidegger/what_means_to_think_cleaned.txt',
    '–ë—ã—Ç–∏–µ –∏ –≤—Ä–µ–º—è': 'assets/full_texts/philosophy/heidegger/being_and_time_cleaned.txt',
    '–ú–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞': 'assets/full_texts/greece/aristotle/metaphysics_cleaned.txt',
    '–ù–∏–∫–æ–º–∞—Ö–æ–≤–∞ —ç—Ç–∏–∫–∞': 'assets/full_texts/greece/aristotle/ethics_cleaned.txt',
    '–ü–æ–ª–∏—Ç–∏–∫–∞': 'assets/full_texts/greece/aristotle/politics_cleaned.txt',
    '–†–∏—Ç–æ—Ä–∏–∫–∞': 'assets/full_texts/greece/aristotle/rhetoric_cleaned.txt',
    '–°–æ—Ñ–∏—Å—Ç': 'assets/full_texts/greece/plato/sophist_cleaned.txt',
    '–ü–∞—Ä–º–µ–Ω–∏–¥': 'assets/full_texts/greece/plato/parmenides_cleaned.txt',
    '–ò–ª–∏–∞–¥–∞': 'assets/full_texts/greece/homer/iliad_cleaned.txt',
    '–û–¥–∏—Å—Å–µ—è': 'assets/full_texts/greece/homer/odyssey_cleaned.txt',
    '–¢—Ä—É–¥—ã –∏ –¥–Ω–∏': 'assets/full_texts/greece/hesiod/labour_and_days_cleaned.txt',
    '–ë–µ–æ–≤—É–ª—å—Ñ': 'assets/full_texts/nordic/folk/beowulf_cleaned.txt',
    '–°—Ç–∞—Ä—à–∞—è –≠–¥–¥–∞': 'assets/full_texts/nordic/folk/elder_edda_cleaned.txt',
    '–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ': 'assets/full_texts/pagan/askr_svarte/priblizheniye_i_okruzheniye_cleaned.txt',
    '–ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å —è–∑—ã—á–Ω–∏–∫–∞ –≤ 21 –≤–µ–∫–µ': 'assets/full_texts/pagan/askr_svarte/pagan_identity_xxi_cleaned.txt',
    'Polemos': 'assets/full_texts/pagan/askr_svarte/polemos_cleaned.txt',
  };
  
  // –ö—ç—à –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
  final textCache = <String, String>{};
  
  for (final jsonFile in jsonFiles) {
    print('\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: $jsonFile');
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
      final jsonString = await File(jsonFile).readAsString();
      final quotes = jsonDecode(jsonString) as List<dynamic>;
      
      int fixedCount = 0;
      
      for (int i = 0; i < quotes.length; i++) {
        final quote = quotes[i] as Map<String, dynamic>;
        final source = quote['source'] as String;
        final text = quote['text'] as String;
        final currentPosition = quote['position'] as int;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if (sourceMapping.containsKey(source)) {
          final textFilePath = sourceMapping[source]!;
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–∫—ç—à–∏—Ä—É–µ–º)
          String fullText;
          if (textCache.containsKey(textFilePath)) {
            fullText = textCache[textFilePath]!;
          } else {
            fullText = await File(textFilePath).readAsString();
            textCache[textFilePath] = fullText;
          }
          
          // –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
          final correctPosition = findQuotePosition(fullText, text);
          
          if (correctPosition != null && correctPosition != currentPosition) {
            print('‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–∏—Ç–∞—Ç—ã "${text.substring(0, min(50, text.length))}..."');
            print('   –°—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è: $currentPosition -> –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: $correctPosition');
            quotes[i]['position'] = correctPosition;
            fixedCount++;
          }
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON
      if (fixedCount > 0) {
        final updatedJson = jsonEncode(quotes);
        await File(jsonFile).writeAsString(updatedJson);
        print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ $fixedCount –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ $jsonFile');
      } else {
        print('‚ÑπÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è $jsonFile');
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ $jsonFile: $e');
    }
  }
  
  print('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

/// –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–∑–∏—Ü–∏—é —Ü–∏—Ç–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
int? findQuotePosition(String fullText, String quoteText) {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
  final regex = RegExp(r'\[pos:(\d+)\]\s*((?:(?!\[pos:\d+\])[\s\S])*)', multiLine: true);
  final matches = regex.allMatches(fullText);
  
  for (final match in matches) {
    final position = int.parse(match.group(1)!);
    final content = match.group(2)!.trim();
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    final normalizedContent = content.replaceAll(RegExp(r'\s+'), ' ').trim();
    final normalizedQuote = quoteText.replaceAll(RegExp(r'\s+'), ' ').trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (normalizedContent.toLowerCase() == normalizedQuote.toLowerCase()) {
      return position;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ü–∏—Ç–∞—Ç–∞ –¥–ª–∏–Ω–Ω–∞—è)
    if (normalizedQuote.length > 30) {
      final searchText = normalizedQuote.substring(0, min(50, normalizedQuote.length));
      if (normalizedContent.toLowerCase().contains(searchText.toLowerCase())) {
        return position;
      }
    }
  }
  
  return null;
} 