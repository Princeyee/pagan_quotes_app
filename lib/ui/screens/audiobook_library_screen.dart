import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../models/audiobook.dart';
import '../../services/audiobook_service.dart';
import '../../services/google_drive_service.dart';
import '../../services/debug_audiobook_service.dart';
import '../../ui/widgets/audiobook_card.dart';
import '../widgets/glass_background.dart';
import 'audiobook_player_screen.dart';
import 'dart:convert';

class AudiobookLibraryScreen extends StatefulWidget {
  @override
  _AudiobookLibraryScreenState createState() => _AudiobookLibraryScreenState();
}

class _AudiobookLibraryScreenState extends State<AudiobookLibraryScreen> {
  final AudiobookService _audiobookService = AudiobookService();
  final GoogleDriveService _googleDriveService = GoogleDriveService();
  final DebugAudiobookService _debugService = DebugAudiobookService();
  List<Audiobook> _audiobooks = [];
  bool _isLoading = true;
  bool _isGoogleDriveConnected = false;
  bool _useDebugMode = false; // –§–ª–∞–≥ –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏

  @override
  void initState() {
    super.initState();
    _loadAudiobooks();
    _checkGoogleDriveStatus();
  }
  
  Future<void> _checkGoogleDriveStatus() async {
    try {
      final isInitialized = await _googleDriveService.initialize();
      setState(() {
        _isGoogleDriveConnected = isInitialized;
      });
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ Google Drive: $e');
    }
  }

  Future<void> _loadAudiobooks() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      List<Audiobook> audiobooks;
      
      if (_useDebugMode) {
        // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        print('üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏');
        audiobooks = await _debugService.getLocalAudiobooks();
      } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Google Drive
        audiobooks = await _audiobookService.getAudiobooks();
      }
      
      if (mounted) {
        setState(() {
          _audiobooks = audiobooks;
          _isLoading = false;
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Google Drive –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ (—Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        if (!_useDebugMode) {
          _checkGoogleDriveStatus();
        }
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥: $e');
      
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ–∫ÔøΩÔøΩ–∏–≥: $e')),
        );
      }
    }
  }
  
  Future<void> _connectToGoogleDrive() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      final isInitialized = await _googleDriveService.initialize();
      
      if (mounted) {
        setState(() {
          _isGoogleDriveConnected = isInitialized;
          _isLoading = false;
        });
        
        if (isInitialized) {
          // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏
          _loadAudiobooks();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Drive')),
          );
        } else {
          final lastError = _googleDriveService.getLastError();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Drive: $lastError'),
              duration: Duration(seconds: 5),
            ),
          );
        }
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Drive: $e');
      
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive: $e'),
            duration: Duration(seconds: 5),
          ),
        );
      }
    }
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  Future<void> _showDiagnosticInfo() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      final diagnosticInfo = await _googleDriveService.getDiagnosticInfo();
      
      setState(() {
        _isLoading = false;
      });
      
      if (mounted) {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        final String fullDiagnosticText = '''
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GOOGLE DRIVE:
–°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${diagnosticInfo['isInitialized'] ? '–î–∞' : '–ù–µ—Ç'}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${diagnosticInfo['userEmail'] ?? '–ù–µ—Ç'}
–û–Ω–ª–∞–π–Ω: ${diagnosticInfo['isOnline'] ? '–î–∞' : '–ù–µ—Ç'}
ID –ø–∞–ø–∫–∏: ${diagnosticInfo['targetFolderId']}
–ö–µ—à: ${diagnosticInfo['cacheStatus'] ?? '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
–§–∞–π–ª–æ–≤ –≤ –∫–µ—à–µ: ${diagnosticInfo['cachedFilesCount'] ?? '0'}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞: ${diagnosticInfo['cacheLastUpdated'] ?? '–ù–∏–∫–æ–≥–¥–∞'}
–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${diagnosticInfo['lastError'] ?? '–ù–µ—Ç'}

–ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
${const JsonEncoder.withIndent('  ').convert(diagnosticInfo)}
''';

        showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: Text('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Google Drive'),
            content: SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text('–°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${diagnosticInfo['isInitialized'] ? '–î–∞' : '–ù–µ—Ç'}'),
                  SizedBox(height: 8),
                  Text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${diagnosticInfo['userEmail'] ?? '–ù–µ—Ç'}'),
                  SizedBox(height: 8),
                  Text('–û–Ω–ª–∞–π–Ω: ${diagnosticInfo['isOnline'] ? '–î–∞' : '–ù–µ—Ç'}'),
                  SizedBox(height: 8),
                  Text('ID –ø–∞–ø–∫–∏: ${diagnosticInfo['targetFolderId']}'),
                  SizedBox(height: 8),
                  // –ù–æ–≤—ã–µ –ø–æ–ª—è
                  Text('–°—Ç–∞—Ç—É—Å –∫–µ—à–∞: ${diagnosticInfo['cacheStatus'] ?? '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}'),
                  SizedBox(height: 8),
                  Text('–§–∞–π–ª–æ–≤ –≤ –∫–µ—à–µ: ${diagnosticInfo['cachedFilesCount'] ?? '0'}'),
                  SizedBox(height: 8),
                  Text('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞: ${
                    diagnosticInfo['cacheLastUpdated'] != null
                      ? DateTime.parse(diagnosticInfo['cacheLastUpdated']).toLocal().toString()
                      : '–ù–∏–∫–æ–≥–¥–∞'
                  }'),
                  SizedBox(height: 8),
                  // –ö–æ–Ω–µ—Ü –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
                  Text('–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${diagnosticInfo['lastError'] ?? '–ù–µ—Ç'}'),
                  SizedBox(height: 16),
                  Text('–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', style: TextStyle(fontWeight: FontWeight.bold)),
                  SizedBox(height: 8),
                  Container(
                    padding: EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      const JsonEncoder.withIndent('  ').convert(diagnosticInfo),
                      style: TextStyle(fontFamily: 'monospace', fontSize: 12),
                    ),
                  ),
                  SizedBox(height: 16),
                  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                  ElevatedButton.icon(
                    icon: Icon(Icons.copy),
                    label: Text('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.amber,
                      foregroundColor: Colors.black,
                      minimumSize: Size(double.infinity, 48),
                    ),
                    onPressed: () {
                      Clipboard.setData(ClipboardData(text: fullDiagnosticText));
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'),
                          backgroundColor: Colors.green,
                        ),
                      );
                    },
                  ),
                  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
                  SizedBox(height: 8),
                  ElevatedButton.icon(
                    icon: Icon(Icons.delete),
                    label: Text('–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                      foregroundColor: Colors.white,
                      minimumSize: Size(double.infinity, 48),
                    ),
                    onPressed: () async {
                      Navigator.pop(context);
                      await _googleDriveService.clearCache();
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω'),
                          backgroundColor: Colors.green,
                        ),
                      );
                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–Ω–æ–≤–∞
                      _showDiagnosticInfo();
                    },
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: Text('–ó–∞–∫—Ä—ã—Ç—å'),
              ),
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                  _connectToGoogleDrive();
                },
                child: Text('–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'),
              ),
            ],
          ),
        );
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        title: Text(
          '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∏',
          style: TextStyle(
            color: Colors.white,
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        iconTheme: IconThemeData(color: Colors.white),
        actions: [
          // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ª–∞–¥–∫–∏
          IconButton(
            icon: Icon(
              _useDebugMode ? Icons.bug_report : Icons.cloud,
              color: _useDebugMode ? Colors.orange : Colors.blue,
            ),
            onPressed: _isLoading ? null : () {
              setState(() {
                _useDebugMode = !_useDebugMode;
              });
              _loadAudiobooks();
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(_useDebugMode 
                    ? 'üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã' 
                    : '‚òÅÔ∏è –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: Google Drive + –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã'
                  ),
                  backgroundColor: _useDebugMode ? Colors.orange : Colors.blue,
                ),
              );
            },
            tooltip: _useDebugMode 
                ? '–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã)'
                : '–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (Google Drive + –ª–æ–∫–∞–ª—å–Ω—ã–µ)',
          ),
          // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Drive (—Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
          if (!_useDebugMode) IconButton(
            icon: Icon(
              _isGoogleDriveConnected ? Icons.cloud_done : Icons.cloud_off,
              color: _isGoogleDriveConnected ? Colors.green : Colors.grey,
            ),
            onPressed: _isLoading ? null : _connectToGoogleDrive,
            tooltip: _isGoogleDriveConnected
                ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Drive'
                : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Drive',
          ),
          // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ Drive (—Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
          if (!_useDebugMode) IconButton(
            icon: Icon(Icons.cloud_sync),
            onPressed: _isLoading ? null : () async {
              setState(() { _isLoading = true; });
              try {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
                await _googleDriveService.refreshFiles();
                // –ó–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏
                await _loadAudiobooks();
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ Drive –æ–±–Ω–æ–≤–ª–µ–Ω'))
                );
              } catch (e) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $e'))
                );
              } finally {
                if (mounted) setState(() { _isLoading = false; });
              }
            },
            tooltip: '–û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ªÔøΩÔøΩ Drive',
          ),
          // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
          if (!_useDebugMode) IconButton(
            icon: Icon(Icons.info_outline),
            onPressed: _isLoading ? null : _showDiagnosticInfo,
            tooltip: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Google Drive',
          ),
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: _isLoading ? null : _loadAudiobooks,
            tooltip: '–û–±–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É',
          ),
        ],
      ),
      body: Stack(
        children: [
          // –†–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
          Image.asset(
            'assets/images/backgrounds/main_bg.jpg',
            fit: BoxFit.cover,
            width: double.infinity,
            height: double.infinity,
          ),

          // –°—Ç–µ–∫–ª—è–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GlassBackground
          SafeArea(
            child: GlassBackground(
              borderRadius: BorderRadius.circular(20),
              child: _isLoading
                ? Center(
                    child: CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.amber),
                    ),
                  )
                : _audiobooks.isEmpty
                    ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              _useDebugMode ? Icons.bug_report : Icons.audiotrack,
                              size: 80,
                              color: _useDebugMode ? Colors.orange[600] : Colors.grey[600],
                            ),
                            SizedBox(height: 20),
                            Text(
                              _useDebugMode 
                                ? '–ù–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ–∫–Ω–∏–≥'
                                : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ–∫–Ω–∏–≥',
                              style: TextStyle(
                                color: Colors.grey[400],
                                fontSize: 18,
                              ),
                            ),
                            SizedBox(height: 10),
                            Text(
                              _useDebugMode
                                ? '–î–æ–±–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É assets/audiobooks/\n–∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º'
                                : '–î–æ–±–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É Google Drive\n–∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏',
                              style: TextStyle(
                                color: Colors.grey[600],
                                fontSize: 14,
                              ),
                              textAlign: TextAlign.center,
                            ),
                            if (_useDebugMode) ...[
                              SizedBox(height: 20),
                              ElevatedButton.icon(
                                icon: Icon(Icons.cloud),
                                label: Text('–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º'),
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.blue,
                                  foregroundColor: Colors.white,
                                ),
                                onPressed: () {
                                  setState(() {
                                    _useDebugMode = false;
                                  });
                                  _loadAudiobooks();
                                },
              ),
                            ],
                          ],
                        ),
                      )
                    : RefreshIndicator(
                        onRefresh: _loadAudiobooks,
                        child: GridView.builder(
                          padding: EdgeInsets.all(16),
                          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                            crossAxisCount: MediaQuery.of(context).size.width > 600 ? 3 : 2,
                            childAspectRatio: 0.7,
                            crossAxisSpacing: 16,
                            mainAxisSpacing: 16,
                          ),
                          itemCount: _audiobooks.length,
                          itemBuilder: (context, index) {
                            final audiobook = _audiobooks[index];
                            return AudiobookCard(
                              audiobook: audiobook,
                              onTap: () {
                                Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => AudiobookPlayerScreen(
                                      audiobook: audiobook,
                                    ),
                                  ),
                                );
                              },
                            );
                          },
                        ),
                      ),
            ),
          ),
        ],
      ),
    );
  }
}
