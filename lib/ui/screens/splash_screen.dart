// lib/ui/screens/splash_screen.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:just_audio/just_audio.dart';

import '../../services/quote_extraction_service.dart';
import '../../services/favorites_service.dart';
import '../../utils/custom_cache.dart';
import 'quote_page.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  bool _visible = true;
  final _firePlayer = AudioPlayer();

  @override
  void initState() {
    super.initState();
    _startSplash();
  }

  Future<void> _startSplash() async {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
      await CustomCache.prefs.init();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      await FavoritesService.init();
      
      // üî• –ó–≤—É–∫ –∫–æ—Å—Ç—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞)
      try {
        await _firePlayer.setAsset('assets/sounds/fire.mp3');
        _firePlayer.setLoopMode(LoopMode.one);
        _firePlayer.play();
      } catch (e) {
        print('Fire sound not available: $e');
      }

      // ‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Ü–∏—Ç–∞—Ç—É
      await _ensureTodayQuote();

      // ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ splash —ç–∫—Ä–∞–Ω–∞
      await Future.delayed(const Duration(seconds: 2));

      // üîî –ó–≤—É–∫ —É–¥–∞—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      try {
        final chime = AudioPlayer();
        await chime.setAsset('assets/sounds/chime.mp3');
        chime.play();
      } catch (e) {
        print('Chime sound not available: $e');
      }

      // üåë –ó–∞—Ç—É—Ö–∞–Ω–∏–µ
      if (mounted) {
        setState(() => _visible = false);
        await Future.delayed(const Duration(milliseconds: 600));
      }

      // üö™ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
      if (mounted) {
        _firePlayer.dispose();
        
        Navigator.of(context).pushReplacement(
          PageRouteBuilder(
            pageBuilder: (_, __, ___) => const QuotePage(),
            transitionDuration: const Duration(milliseconds: 500),
            transitionsBuilder: (_, anim, __, child) => 
                FadeTransition(opacity: anim, child: child),
          ),
        );
      }
    } catch (e) {
      print('Error during splash initialization: $e');
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (_) => const QuotePage()),
        );
      }
    }
  }

  Future<void> _ensureTodayQuote() async {
    final quoteService = QuoteExtractionService();
    final cache = CustomCache.prefs;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ü–∏—Ç–∞—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
      final existingQuote = cache.getTodayQuote();
      if (existingQuote != null) {
        print('Today\'s quote already exists');
        return;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É
      final dailyQuote = await quoteService.generateDailyQuote();
      if (dailyQuote != null) {
        await cache.cacheDailyQuote(dailyQuote);
        print('Generated new daily quote: "${dailyQuote.quote.text.substring(0, 50)}..."');
      } else {
        print('Failed to generate daily quote');
      }
    } catch (e) {
      print('Error generating daily quote: $e');
    }
  }

  @override
  void dispose() {
    _firePlayer.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: Center(
        child: AnimatedOpacity(
          opacity: _visible ? 1.0 : 0.0,
          duration: const Duration(milliseconds: 600),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // –ò–∫–æ–Ω–∫–∞ –∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è
              Container(
                width: 120,
                height: 120,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  gradient: LinearGradient(
                    colors: [
                      Colors.orange.withOpacity(0.8),
                      Colors.red.withOpacity(0.6),
                    ],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                ),
                child: const Icon(
                  Icons.local_fire_department,
                  color: Colors.white,
                  size: 60,
                ),
              ),
              
              const SizedBox(height: 24),
              
              // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
              const Text(
                'SACRAL',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 3,
                ),
              ),
              
              const SizedBox(height: 8),
              
              // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
              Text(
                '–¶–∏—Ç–∞—Ç—ã –¥–Ω—è',
                style: TextStyle(
                  color: Colors.white.withOpacity(0.7),
                  fontSize: 16,
                  letterSpacing: 1,
                ),
              ),
              
              const SizedBox(height: 48),
              
              // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
              const CircularProgressIndicator(
                color: Colors.white,
                strokeWidth: 2,
              ),
            ],
          ),
        ),
      ),
    );
  }
}