import 'package:flutter/material.dart';
import '../services/google_drive_service_fixed.dart';

class GoogleDriveTestPage extends StatefulWidget {
  const GoogleDriveTestPage({Key? key}) : super(key: key);

  @override
  State<GoogleDriveTestPage> createState() => _GoogleDriveTestPageState();
}

class _GoogleDriveTestPageState extends State<GoogleDriveTestPage> {
  final GoogleDriveServiceFixed _driveService = GoogleDriveServiceFixed();
  String _status = '–ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é';
  String _details = '';
  bool _isLoading = false;
  Map<String, dynamic>? _diagnostics;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üîß –¢–µ—Å—Ç Google Drive'),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –°—Ç–∞—Ç—É—Å
            Card(
              color: _getStatusColor(),
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üìä –°—Ç–∞—Ç—É—Å',
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      _status,
                      style: const TextStyle(
                        fontSize: 16,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isLoading ? null : _testInitialization,
                    icon: const Icon(Icons.login),
                    label: const Text('–¢–µ—Å—Ç –≤—Ö–æ–¥–∞'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isLoading ? null : _testFilesList,
                    icon: const Icon(Icons.folder),
                    label: const Text('–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 8),
            
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isLoading ? null : _getDiagnostics,
                    icon: const Icon(Icons.info),
                    label: const Text('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _isLoading ? null : _forceReauth,
                    icon: const Icon(Icons.refresh),
                    label: const Text('–ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple,
                      foregroundColor: Colors.white,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // –î–µ—Ç–∞–ª–∏
            if (_details.isNotEmpty)
              Expanded(
                child: Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'üìù –î–µ—Ç–∞–ª–∏',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 8),
                        Expanded(
                          child: SingleChildScrollView(
                            child: Text(
                              _details,
                              style: const TextStyle(
                                fontSize: 12,
                                fontFamily: 'monospace',
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (_isLoading)
              const Padding(
                padding: EdgeInsets.all(16.0),
                child: Center(
                  child: CircularProgressIndicator(),
                ),
              ),
          ],
        ),
      ),
    );
  }

  Color _getStatusColor() {
    if (_status.contains('‚úÖ')) return Colors.green;
    if (_status.contains('‚ùå')) return Colors.red;
    if (_status.contains('‚ö†Ô∏è')) return Colors.orange;
    return Colors.blue;
  }

  Future<void> _testInitialization() async {
    setState(() {
      _isLoading = true;
      _status = 'üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...';
      _details = '';
    });

    try {
      final success = await _driveService.initialize();
      
      setState(() {
        if (success) {
          _status = '‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞';
          _details = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${_driveService.getCurrentUserEmail()}\n';
          _details += '–°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${_driveService.isServiceInitialized()}';
        } else {
          _status = '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏';
          _details = _driveService.getLastError();
        }
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _status = 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞';
        _details = '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e';
        _isLoading = false;
      });
    }
  }

  Future<void> _testFilesList() async {
    setState(() {
      _isLoading = true;
      _status = 'üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...';
      _details = '';
    });

    try {
      final files = await _driveService.getAudiobookFiles();
      
      setState(() {
        _status = 'üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}';
        _details = '–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:\n\n';
        
        if (files.isEmpty) {
          _details += '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n';
          _details += '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n';
          _details += '- –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞\n';
          _details += '- –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ\n';
          _details += '- –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—ÇÔøΩÔøΩ—Ä–∏–∑–∞—Ü–∏–µ–π\n';
        } else {
          for (int i = 0; i < files.length && i < 10; i++) {
            final file = files[i];
            _details += '${i + 1}. ${file.name}\n';
            _details += '   ID: ${file.id}\n';
            _details += '   –¢–∏–ø: ${file.mimeType}\n\n';
          }
          
          if (files.length > 10) {
            _details += '... –∏ –µ—â–µ ${files.length - 10} —Ñ–∞–π–ª–æ–≤';
          }
        }
        
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _status = '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤';
        _details = '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e\n\n';
        _details += '–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: ${_driveService.getLastError()}';
        _isLoading = false;
      });
    }
  }

  Future<void> _getDiagnostics() async {
    setState(() {
      _isLoading = true;
      _status = 'üîç –°–æ–±–∏—Ä–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...';
      _details = '';
    });

    try {
      final diagnostics = await _driveService.getDiagnosticInfo();
      _diagnostics = diagnostics;
      
      setState(() {
        _status = 'üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
        _details = _formatDiagnostics(diagnostics);
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _status = '‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏';
        _details = '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e';
        _isLoading = false;
      });
    }
  }

  Future<void> _forceReauth() async {
    setState(() {
      _isLoading = true;
      _status = 'üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...';
      _details = '';
    });

    try {
      final success = await _driveService.forceReauth();
      
      setState(() {
        if (success) {
          _status = '‚úÖ –ü–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞';
          _details = '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${_driveService.getCurrentUserEmail()}';
        } else {
          _status = '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
          _details = _driveService.getLastError();
        }
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _status = 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
        _details = '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: $e';
        _isLoading = false;
      });
    }
  }

  String _formatDiagnostics(Map<String, dynamic> diagnostics) {
    final buffer = StringBuffer();
    
    buffer.writeln('üïê –í—Ä–µ–º—è: ${diagnostics['timestamp']}');
    buffer.writeln('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${diagnostics['isInitialized']}');
    buffer.writeln('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${diagnostics['userEmail']}');
    buffer.writeln('üåê –û–Ω–ª–∞–π–Ω: ${diagnostics['isOnline']}');
    buffer.writeln('üìÅ ID –ø–∞–ø–∫–∏: ${diagnostics['targetFolderId']}');
    buffer.writeln('üíæ –°—Ç–∞—Ç—É—Å –∫–µ—à–∞: ${diagnostics['cacheStatus']}');
    buffer.writeln('üìÑ –§–∞–π–ª–æ–≤ –≤ –∫–µ—à–µ: ${diagnostics['cachedFilesCount']}');
    buffer.writeln('‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${diagnostics['cacheLastUpdated'] ?? '–ù–∏–∫–æ–≥–¥–∞'}');
    buffer.writeln('üîç –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: ${diagnostics['debugMode']}');
    buffer.writeln('üîë Scopes: ${diagnostics['scopes']}');
    
    if (diagnostics['lastError'] != null && diagnostics['lastError'].toString().isNotEmpty) {
      buffer.writeln('\n‚ùå –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:');
      buffer.writeln(diagnostics['lastError']);
    }
    
    if (diagnostics['googleSignInCurrentUser'] != null) {
      buffer.writeln('\nüë§ Google Sign-In:');
      buffer.writeln('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${diagnostics['googleSignInCurrentUser']}');
      buffer.writeln('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${diagnostics['googleSignInIsSignedIn']}');
    }
    
    if (diagnostics['driveApiInitialized'] != null) {
      buffer.writeln('\nüîß Drive API:');
      buffer.writeln('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${diagnostics['driveApiInitialized']}');
      buffer.writeln('–°—Ç–∞—Ç—É—Å: ${diagnostics['driveApiStatus'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}');
    }
    
    if (diagnostics['connectivityType'] != null) {
      buffer.writeln('\nüåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${diagnostics['connectivityType']}');
    }
    
    return buffer.toString();
  }
}