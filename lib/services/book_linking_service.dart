import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/audiobook.dart';
import '../models/book_source.dart';

class BookLinkingService {
  static const String _linkingKey = 'book_audio_links';
  
  // –°–≤—è–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–æ–π
  static Future<void> linkBooks(String textBookId, String audiobookId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final links = await _getLinks();
      
      links[textBookId] = audiobookId;
      
      await prefs.setString(_linkingKey, json.encode(links));
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∫–Ω–∏–≥: $e');
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ—Ç ID –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏
  static Future<String?> getLinkedAudiobook(String textBookId) async {
    try {
      final links = await _getLinks();
      return links[textBookId];
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏: $e');
      return null;
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏
  static Future<String?> getLinkedTextBook(String audiobookId) async {
    try {
      final links = await _getLinks();
      
      // –ò—â–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
      for (final entry in links.entries) {
        if (entry.value == audiobookId) {
          return entry.key;
        }
      }
      
      return null;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏: $e');
      return null;
    }
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  static Future<void> autoLinkBooks(List<BookSource> textBooks, List<Audiobook> audiobooks) async {
    try {
      final links = await _getLinks();
      bool hasChanges = false;
      
      for (final textBook in textBooks) {
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–≤—è–∑—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (links.containsKey(textBook.id)) continue;
        
        // –ò—â–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥—É —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        final matchingAudiobook = _findMatchingAudiobook(textBook, audiobooks);
        
        if (matchingAudiobook != null) {
          links[textBook.id] = matchingAudiobook.id;
          hasChanges = true;
          print('üîó –ê–≤—Ç–æ—Å–≤—è–∑—å: "${textBook.title}" ‚Üî "${matchingAudiobook.title}"');
        }
      }
      
      if (hasChanges) {
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString(_linkingKey, json.encode(links));
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∫–Ω–∏–≥: $e');
    }
  }
  
  // –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –∞—É–¥–∏–æ–∫–Ω–∏–≥—É –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏
  static Audiobook? _findMatchingAudiobook(BookSource textBook, List<Audiobook> audiobooks) {
    final textTitle = _normalizeTitle(textBook.title);
    final textAuthor = _normalizeTitle(textBook.author);
    
    for (final audiobook in audiobooks) {
      final audioTitle = _normalizeTitle(audiobook.title);
      final audioAuthor = _normalizeTitle(audiobook.author);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      if (_isSimilar(textTitle, audioTitle)) {
        return audiobook;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ + —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      if (_isSimilar(textAuthor, audioAuthor) && _hasCommonWords(textTitle, audioTitle)) {
        return audiobook;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      if (_hasSignificantOverlap(textTitle, audioTitle)) {
        return audiobook;
      }
    }
    
    return null;
  }
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  static String _normalizeTitle(String title) {
    return title
        .toLowerCase()
        .replaceAll(RegExp(r'[^\w\s]'), '') // –£–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
        .replaceAll(RegExp(r'\s+'), ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        .trim();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ö–æ–∂–µ—Å—Ç—å —Å—Ç—Ä–æ–∫
  static bool _isSimilar(String str1, String str2) {
    if (str1 == str2) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥—Ä—É–≥—É—é
    if (str1.contains(str2) || str2.contains(str1)) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ —Å–ª–æ–≤–∞–º
    final words1 = str1.split(' ');
    final words2 = str2.split(' ');
    
    int commonWords = 0;
    for (final word1 in words1) {
      if (word1.length > 2 && words2.any((word2) => word2.contains(word1) || word1.contains(word2))) {
        commonWords++;
      }
    }
    
    // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    return commonWords >= (words1.length / 2).ceil();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—èÔøΩÔøΩ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—â–∏—Ö —Å–ª–æ–≤
  static bool _hasCommonWords(String str1, String str2) {
    final words1 = str1.split(' ').where((w) => w.length > 2).toSet();
    final words2 = str2.split(' ').where((w) => w.length > 2).toSet();
    
    return words1.intersection(words2).isNotEmpty;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
  static bool _hasSignificantOverlap(String str1, String str2) {
    final words1 = str1.split(' ').where((w) => w.length > 3).toSet();
    final words2 = str2.split(' ').where((w) => w.length > 3).toSet();
    
    final intersection = words1.intersection(words2);
    final union = words1.union(words2);
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª—å—à–µ 30% –æ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
    return intersection.length / union.length > 0.3;
  }
  
  // –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∏
  static Future<Map<String, String>> _getLinks() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final linksString = prefs.getString(_linkingKey);
      
      if (linksString != null) {
        final Map<String, dynamic> linksJson = json.decode(linksString);
        return Map<String, String>.from(linksJson);
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π: $e');
    }
    
    return {};
  }
  
  // –£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å
  static Future<void> unlinkBooks(String textBookId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final links = await _getLinks();
      
      links.remove(textBookId);
      
      await prefs.setString(_linkingKey, json.encode(links));
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏: $e');
    }
  }
  
  // –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  static Future<Map<String, String>> getAllLinks() async {
    return await _getLinks();
  }
}