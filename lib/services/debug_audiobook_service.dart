import 'dart:convert';
import 'package:flutter/services.dart';
import '../models/audiobook.dart';
import 'book_image_service.dart';

/// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞—É–¥–∏–æ–∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ Google Drive –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
class DebugAudiobookService {
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏–∑ assets
  Future<List<Audiobook>> getLocalAudiobooks() async {
    try {
      print('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      final configAudiobooks = await _loadFromConfig();
      if (configAudiobooks.isNotEmpty) {
        print('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${configAudiobooks.length} –∞—É–¥–∏–æ–∫–Ω–∏–≥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        return configAudiobooks;
      }
      
      // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏
      final scannedAudiobooks = await _scanAudiobookDirectory();
      print('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${scannedAudiobooks.length} –∞—É–¥–∏–æ–∫–Ω–∏–≥ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏');
      
      return scannedAudiobooks;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏–æ–∫–Ω–∏–≥: $e');
      return [];
    }
  }
  
  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  Future<List<Audiobook>> _loadFromConfig() async {
    try {
      final String configString = await rootBundle.loadString('assets/config/audiobooks.json');
      final Map<String, dynamic> config = json.decode(configString);
      
      final List<dynamic> audiobooksJson = config['audiobooks'] ?? [];
      final List<Audiobook> audiobooks = [];
      
      for (final json in audiobooksJson) {
        final audiobook = Audiobook.fromJson(json);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–ª–æ–∂–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        String finalCoverPath = audiobook.coverPath;
        
        if (audiobook.coverPath.isEmpty) {
          finalCoverPath = await BookImageService.getStableBookImage(
            audiobook.id, 
            'philosophy'
          );
        } else if (!audiobook.coverPath.startsWith('http') && 
                   !audiobook.coverPath.startsWith('assets/')) {
          // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–ª–æ–∂–∫–∏
          finalCoverPath = await BookImageService.getStableBookImage(
            audiobook.id, 
            audiobook.coverPath
          );
        }
        
        final updatedAudiobook = Audiobook(
          id: audiobook.id,
          title: audiobook.title,
          author: audiobook.author,
          coverPath: finalCoverPath,
          chapters: audiobook.chapters,
          totalDuration: audiobook.totalDuration,
          description: audiobook.description,
        );
        
        audiobooks.add(updatedAudiobook);
        print('üìñ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞: ${audiobook.title}');
      }
      
      return audiobooks;
    } catch (e) {
      print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $e');
      return [];
    }
  }
  
  /// –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫–∏ assets/audiobooks/ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥
  Future<List<Audiobook>> _scanAudiobookDirectory() async {
    final List<Audiobook> audiobooks = [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ AssetManifest
      final manifestContent = await rootBundle.loadString('AssetManifest.json');
      final Map<String, dynamic> manifestMap = json.decode(manifestContent);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –∞—É–¥–∏–æ–∫–Ω–∏–≥
      final audiobookFiles = manifestMap.keys
          .where((String key) => key.startsWith('assets/audiobooks/'))
          .toList();
      
      print('üìÅ –ù–∞–π–¥–µ–Ω–æ ${audiobookFiles.length} —Ñ–∞–π–ª–æ–≤ –≤ assets/audiobooks/');
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞–ø–∫–∞–º –∫–Ω–∏–≥
      final Map<String, List<String>> bookFolders = {};
      
      for (final file in audiobookFiles) {
        final parts = file.split('/');
        if (parts.length >= 4) {
          final bookFolder = parts[2]; // assets/audiobooks/[book_name]/...
          if (!bookFolders.containsKey(bookFolder)) {
            bookFolders[bookFolder] = [];
          }
          bookFolders[bookFolder]!.add(file);
        }
      }
      
      print('üìö –ù–∞–π–¥–µ–Ω–æ ${bookFolders.length} –ø–∞–ø–æ–∫ —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞–º–∏');
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
      for (final entry in bookFolders.entries) {
        final bookName = entry.key;
        final files = entry.value;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–ª–æ–∂–∫—É
        final coverPath = await BookImageService.getStableBookImage(bookName, 'pagan');
        
        // –ò—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
        final audioFiles = files
            .where((file) => file.endsWith('.mp3') || file.endsWith('.m4a'))
            .toList()
          ..sort();
        
        if (audioFiles.isNotEmpty) {
          final chapters = <AudiobookChapter>[];
          
          for (int i = 0; i < audioFiles.length; i++) {
            final file = audioFiles[i];
            final fileName = file.split('/').last;
            final chapterTitle = _formatChapterTitle(fileName, i + 1);
            
            chapters.add(AudiobookChapter(
              title: chapterTitle,
              filePath: file,
              duration: const Duration(minutes: 30), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              chapterNumber: i + 1,
            ));
          }
          
          final totalDuration = Duration(
            milliseconds: chapters.fold(0, (sum, chapter) => sum + chapter.duration.inMilliseconds),
          );
          
          audiobooks.add(Audiobook(
            id: bookName,
            title: _formatBookTitle(bookName),
            author: '–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
            coverPath: coverPath,
            chapters: chapters,
            totalDuration: totalDuration,
            description: '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏',
          ));
          
          print('üìñ –°–æ–∑–¥–∞–Ω–∞ –∞—É–¥–∏–æ–∫–Ω–∏–≥ÔøΩÔøΩ: ${_formatBookTitle(bookName)} (${chapters.length} –≥–ª–∞–≤)');
        }
      }
      
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥: $e');
    }
    
    return audiobooks;
  }
  
  String _formatBookTitle(String folderName) {
    return folderName
        .replaceAll('_', ' ')
        .split(' ')
        .map((word) => word.isNotEmpty 
            ? word[0].toUpperCase() + word.substring(1).toLowerCase()
            : word)
        .join(' ');
  }

  String _formatChapterTitle(String fileName, int chapterNumber) {
    final nameWithoutExtension = fileName.split('.').first;
    
    // –ï—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –µ—Å—Ç—å "chapter" –∏–ª–∏ "–≥–ª–∞–≤–∞", –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (nameWithoutExtension.toLowerCase().contains('chapter') ||
        nameWithoutExtension.toLowerCase().contains('–≥–ª–∞–≤–∞')) {
      return _formatBookTitle(nameWithoutExtension);
    }
    
    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã
    return '–ì–ª–∞–≤–∞ $chapterNumber';
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
  Future<bool> isFileAvailable(String filePath) async {
    try {
      await rootBundle.load(filePath);
      return true;
    } catch (e) {
      return false;
    }
  }
  
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  Future<Map<String, dynamic>> getLibraryInfo() async {
    try {
      final audiobooks = await getLocalAudiobooks();
      final totalChapters = audiobooks.fold(0, (sum, book) => sum + book.chapters.length);
      final totalDuration = audiobooks.fold(
        Duration.zero, 
        (sum, book) => sum + book.totalDuration
      );
      
      return {
        'totalBooks': audiobooks.length,
        'totalChapters': totalChapters,
        'totalDuration': totalDuration.inMinutes,
        'status': '–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤–∞',
        'source': 'assets',
      };
    } catch (e) {
      return {
        'totalBooks': 0,
        'totalChapters': 0,
        'totalDuration': 0,
        'status': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $e',
        'source': 'none',
      };
    }
  }
}