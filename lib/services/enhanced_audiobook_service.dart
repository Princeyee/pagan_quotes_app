import 'dart:convert';
import 'dart:io';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:path_provider/path_provider.dart';
import '../models/audiobook.dart';
import 'book_image_service.dart';
import 'public_google_drive_service.dart';
import 'text_file_service.dart';

class EnhancedAudiobookService {
  static const String _progressKey = 'audiobook_progress';
  static const String _favoritesKey = 'favorite_audiobooks';
  static const String _offlineAudiobooksKey = 'offline_audiobooks';
  static const String _preloadedChaptersKey = 'preloaded_chapters';
  static const String _urlCacheKey = 'audiobook_url_cache';
  
  final PublicGoogleDriveService _driveService = PublicGoogleDriveService();
  final Map<String, String> _preloadedFiles = {}; // fileId -> localPath
  final Map<String, String> _urlCache = {}; // chapterId -> cachedUrl

  Future<List<Audiobook>> getAudiobooks() async {
    print('üîç EnhancedAudiobookService.getAudiobooks() - –Ω–∞—á–∞–ª–æ');
    
    final connectivityResult = await Connectivity().checkConnectivity();
    final isOnline = connectivityResult != ConnectivityResult.none;
    
    print('üåê –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${isOnline ? "–æ–Ω–ª–∞–π–Ω" : "–æ—Ñ—Ñ–ª–∞–π–Ω"}');

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à URL –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
      print('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à URL...');
      await _loadUrlCache();
      print('‚úÖ –ö–µ—à URL –∑–∞–≥—Ä—É–∂–µ–Ω');
      
      if (isOnline) {
        print('üåê –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ Google Drive...');
        // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ Google Drive
        final onlineAudiobooks = await _getOnlineAudiobooks();
        print('üìö –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ–∫–Ω–∏–≥ –∏–∑ Google Drive: ${onlineAudiobooks.length}');
        
        if (onlineAudiobooks.isNotEmpty) {
          print('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞...');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
          await _saveOfflineAudiobooks(onlineAudiobooks);
          print('‚úÖ –ê—É–¥–∏–æ–∫–Ω–∏–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à');
          return onlineAudiobooks;
        } else {
          print('‚ö†Ô∏è –ù–µ—Ç –∞—É–¥–∏–æ–∫–Ω–∏–≥ –æ–Ω–ª–∞–π–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à...');
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
          final cachedAudiobooks = await _getOfflineAudiobooks();
          print('üìö –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ–∫–Ω–∏–≥ –∏–∑ –∫–µ—à–∞: ${cachedAudiobooks.length}');
          return cachedAudiobooks;
        }
      } else {
        print('üì± –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à...');
        // –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–µ—à
        final cachedAudiobooks = await _getOfflineAudiobooks();
        print('üìö –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ–∫–Ω–∏–≥ –∏–∑ –∫–µ—à–∞: ${cachedAudiobooks.length}');
        return cachedAudiobooks;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –≤ getAudiobooks: $e');
      // Fallback –Ω–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      final cachedAudiobooks = await _getOfflineAudiobooks();
      print('üìö Fallback: –ø–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ–∫–Ω–∏–≥ –∏–∑ –∫–µ—à–∞: ${cachedAudiobooks.length}');
      return cachedAudiobooks;
    }
  }

  Future<List<Audiobook>> _getOnlineAudiobooks() async {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π Google Drive —Å–µ—Ä–≤–∏—Å
      final isInitialized = await _driveService.initialize();
      if (!isInitialized) {
        return [];
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
      final folderStructure = await _driveService.getAudiobooksByFolders();
      if (folderStructure.isEmpty) {
        return [];
      }
      
      final List<Audiobook> audiobooks = [];
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏–∑ –ø–∞–ø–æ–∫
      for (final entry in folderStructure.entries) {
        final folderName = entry.key;
        final files = entry.value;
        
        if (files.isEmpty) continue;
        
        final chapters = <AudiobookChapter>[];
        for (int i = 0; i < files.length; i++) {
          final file = files[i];
          final fileName = file['name'] as String;
          final chapterTitle = _formatChapterTitle(fileName, i + 1);
          
          chapters.add(AudiobookChapter(
            title: chapterTitle,
            filePath: '', // –î–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            duration: const Duration(minutes: 30), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            chapterNumber: i + 1,
            driveFileId: file['id'] as String,
            isStreamable: true,
          ));
        }
        
        final totalDuration = Duration(
          milliseconds: chapters.fold(0, (sum, chapter) => sum + chapter.duration.inMilliseconds),
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±–ª–æ–∂–∫–∏
        String bookId = folderName;
        String category = 'pagan'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É
        try {
          final textService = TextFileService();
          final textBooks = await textService.loadBookSources();
          
          // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞–ø–æ–∫ –∫ ID —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–∏–≥
          final Map<String, String> folderToBookId = {
            '–∞—Ä–∏—Å—Ç–æ—Ç–µ–ª—å –º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞': 'aristotle_metaphysics',
            '–º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞': 'aristotle_metaphysics',
            '–∞—Ä–∏—Å—Ç–æ—Ç–µ–ª—å —ç—Ç–∏–∫–∞': 'aristotle_ethics',
            '—ç—Ç–∏–∫–∞': 'aristotle_ethics',
            '–∞—Ä–∏—Å—Ç–æ—Ç–µ–ª—å –ø–æ–ª–∏—Ç–∏–∫–∞': 'aristotle_politics',
            '–ø–æ–ª–∏—Ç–∏–∫–∞': 'aristotle_politics',
            '–∞—Ä–∏—Å—Ç–æ—Ç–µ–ª—å —Ä–∏—Ç–æ—Ä–∏–∫–∞': 'aristotle_rhetoric',
            '—Ä–∏—Ç–æ—Ä–∏–∫–∞': 'aristotle_rhetoric',
            '–ø–ª–∞—Ç–æ–Ω —Å–æ—Ñ–∏—Å—Ç': 'plato_sophist',
            '—Å–æ—Ñ–∏—Å—Ç': 'plato_sophist',
            '–ø–ª–∞—Ç–æ–Ω –ø–∞—Ä–º–µ–Ω–∏–¥': 'plato_parmenides',
            '–ø–∞—Ä–º–µ–Ω–∏–¥': 'plato_parmenides',
            '–≥–æ–º–µ—Ä –∏–ª–∏–∞–¥–∞': 'homer_iliad',
            '–∏–ª–∏–∞–¥–∞': 'homer_iliad',
            '–≥–æ–º–µ—Ä –æ–¥–∏—Å—Å–µ—è': 'homer_odyssey',
            '–æ–¥–∏—Å—Å–µ—è': 'homer_odyssey',
            '–≥–µ—Å–∏–æ–¥ —Ç—Ä—É–¥—ã': 'hesiod_labour',
            '—Ç—Ä—É–¥—ã –∏ –¥–Ω–∏': 'hesiod_labour',
            '–±–µ–æ–≤—É–ª—å—Ñ': 'beowulf',
            '—Å—Ç–∞—Ä—à–∞—è —ç–¥–¥–∞': 'elder_edda',
            '—ç–¥–¥–∞': 'elder_edda',
            '—Ö–∞–π–¥–µ–≥–≥–µ—Ä –±—ã—Ç–∏–µ': 'heidegger_being',
            '–±—ã—Ç–∏–µ –∏ –≤—Ä–µ–º—è': 'heidegger_being',
            '—Ö–∞–π–¥–µ–≥–≥–µ—Ä –º—ã—Å–ª–∏—Ç—å': 'heidegger_think',
            '—á—Ç–æ –∑–Ω–∞—á–∏—Ç –º—ã—Å–ª–∏—Ç—å': 'heidegger_think',
            '–Ω–∏—Ü—à–µ –∞–Ω—Ç–∏—Ö—Ä–∏—Å—Ç': 'nietzsche_antichrist',
            '–∞–Ω—Ç–∏—Ö—Ä–∏—Å—Ç': 'nietzsche_antichrist',
            '–Ω–∏—Ü—à–µ –≤–µ—Å–µ–ª–∞—è': 'nietzsche_gay_science',
            '–≤–µ—Å–µ–ª–∞—è –Ω–∞—É–∫–∞': 'nietzsche_gay_science',
            '–Ω–∏—Ü—à–µ –∑–∞—Ä–∞—Ç—É—Å—Ç—Ä–∞': 'nietzsche_zarathustra',
            '–∑–∞—Ä–∞—Ç—É—Å—Ç—Ä–∞': 'nietzsche_zarathustra',
            '–Ω–∏—Ü—à–µ —Ç—Ä–∞–≥–µ–¥–∏—è': 'nietzsche_tragedy',
            '—Ä–æ–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–≥–µ–¥–∏–∏': 'nietzsche_tragedy',
            '–Ω–∏—Ü—à–µ –¥–æ–±—Ä–æ –∑–ª–æ': 'nietzsche_beyond',
            '–ø–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É': 'nietzsche_beyond',
            '—à–æ–ø–µ–Ω–≥–∞—É—ç—Ä –º–∏—Ä': 'schopenhauer_world',
            '–º–∏—Ä –∫–∞–∫ –≤–æ–ª—è': 'schopenhauer_world',
            '—à–æ–ø–µ–Ω–≥–∞—É—ç—Ä –∞—Ñ–æ—Ä–∏–∑–º—ã': 'schopenhauer_aphorisms',
            '–∞—Ñ–æ—Ä–∏–∑–º—ã': 'schopenhauer_aphorisms',
            '–¥–µ –±–µ–Ω—É–∞ —è–∑—ã—á–Ω–∏–∫': 'on_being_a_pagan',
            '–∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Ç—å —è–∑—ã—á–Ω–∏–∫–æ–º': 'on_being_a_pagan',
            '—ç–ª–∏–∞–¥–µ —Å–≤—è—â–µ–Ω–Ω–æ–µ': 'eliade_sacred',
            '—Å–≤—è—â–µ–Ω–Ω–æ–µ –∏ –º–∏—Ä—Å–∫–æ–µ': 'eliade_sacred',
            '—ç–ª–∏–∞–¥–µ –º–∏—Ñ': 'eliade_myth',
            '–º–∏—Ñ –æ –≤–µ—á–Ω–æ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏': 'eliade_myth',
            '—ç–≤–æ–ª–∞ –∏–º–ø–µ—Ä–∏–∞–ª–∏–∑–º': 'evola_imperialism',
            '—è–∑—ã—á–µ—Å–∫–∏–π –∏–º–ø–µ—Ä–∏–∞–ª–∏–∑–º': 'evola_imperialism',
            '—ç–≤–æ–ª–∞ –ø–æ–ª': 'evola_sex',
            '–º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞ –ø–æ–ª–∞': 'evola_sex',
            '—ç–≤–æ–ª–∞ —Ä—É–∏–Ω—ã': 'evola_ruins',
            '–ª—é–¥–∏ –∏ —Ä—É–∏–Ω—ã': 'evola_ruins',
            '–∞—Å–∫—Ä –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å': 'askr_svarte_pagan_identity',
            '–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å —è–∑—ã—á–Ω–∏–∫–∞': 'askr_svarte_pagan_identity',
            '–∞—Å–∫—Ä –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ': 'askr_svarte_priblizhenie',
            '–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ': 'askr_svarte_priblizhenie',
            '–∞—Å–∫—Ä –ø–æ–ª–µ–º–æ—Å': 'askr_svarte_polemos',
            'polemos': 'askr_svarte_polemos',
          };
          
          // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É
          String? matchedBookId;
          for (final entry in folderToBookId.entries) {
            if (folderName.toLowerCase().contains(entry.key.toLowerCase()) ||
                entry.key.toLowerCase().contains(folderName.toLowerCase())) {
              matchedBookId = entry.value;
              break;
            }
          }
          
          if (matchedBookId != null) {
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É –ø–æ ID
            for (final textBook in textBooks) {
              if (textBook.id == matchedBookId) {
                bookId = textBook.id;
                category = textBook.category;
                print('üé® –ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–∏–≥–∞: ${textBook.title} (${textBook.category})');
                break;
              }
            }
          }
        } catch (e) {
          print('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è –æ–±–ª–æ–∂–∫–∏: $e');
        }
        
        final coverPath = await BookImageService.getStableBookImage(bookId, category);
        
        audiobooks.add(Audiobook(
          id: 'drive_${folderName.replaceAll(' ', '_')}',
          title: _formatBookTitle(folderName),
          author: '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞',
          coverPath: coverPath,
          chapters: chapters,
          totalDuration: totalDuration,
          description: '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ –∏–∑ Google Drive',
        ));
      }
      
      return audiobooks;
    } catch (e) {
      return [];
    }
  }

  // –£–ü–†–û–©–ï–ù–ù–´–ô –ò –ù–ê–î–ï–ñ–ù–´–ô –ú–ï–¢–û–î –ü–û–õ–£–ß–ï–ù–ò–Ø URL
  Future<String?> getPlayableUrl(AudiobookChapter chapter) async {
    if (chapter.isStreamable && chapter.driveFileId != null) {
      final fileName = '${chapter.driveFileId}.mp3';
      final chapterId = '${chapter.driveFileId}';
      
      print('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: $fileName');
      
      try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à URL
        if (_urlCache.containsKey(chapterId)) {
          final cachedUrl = _urlCache[chapterId]!;
          print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: $cachedUrl');
          return cachedUrl;
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–µ—à
        final cachedPath = await _driveService.getCachedFilePath(fileName);
        if (cachedPath != null && await File(cachedPath).exists()) {
          print('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª–Ω–æ–º –∫–µ—à–µ: $cachedPath');
          _urlCache[chapterId] = cachedPath;
          return cachedPath;
        }
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        final connectivityResult = await Connectivity().checkConnectivity();
        if (connectivityResult == ConnectivityResult.none) {
          print('‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
          return null;
        }
        
        // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Drive
        final directUrl = _driveService.getFileDownloadUrl(chapter.driveFileId!);
        print('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É: $directUrl');
        
        // –ö–µ—à–∏—Ä—É–µ–º URL
        _urlCache[chapterId] = directUrl;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if (_urlCache.length % 5 == 0) { // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 5 –Ω–æ–≤—ã—Ö URL
          _saveUrlCache();
        }
        
        return directUrl;
        
      } catch (e) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: $e');
        return null;
      }
    }
    
    return null;
  }

  // –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –°–õ–ï–î–£–Æ–©–ò–• –ì–õ–ê–í
  Future<void> preloadNextChapters(Audiobook audiobook, int currentChapterIndex, {int count = 2}) async {
    final connectivityResult = await Connectivity().checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) return;

    for (int i = 1; i <= count; i++) {
      final nextIndex = currentChapterIndex + i;
      if (nextIndex < audiobook.chapters.length) {
        final nextChapter = audiobook.chapters[nextIndex];
        
        if (nextChapter.driveFileId != null) {
          final fileName = '${nextChapter.driveFileId}.mp3';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
          final cachedPath = await _driveService.getCachedFilePath(fileName);
          if (cachedPath == null && !_preloadedFiles.containsKey(nextChapter.driveFileId)) {
            print('üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≥–ª–∞–≤—É: ${nextChapter.title}');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
            _driveService.startProgressiveDownload(
              nextChapter.driveFileId!,
              fileName,
            ).then((serverUrl) {
              if (serverUrl != null) {
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                _driveService.getPartialFilePath(nextChapter.driveFileId!).then((realPath) {
                  if (realPath != null) {
                    _preloadedFiles[nextChapter.driveFileId!] = realPath;
                    _savePreloadedChapters();
                    print('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≥–ª–∞–≤–∞: ${nextChapter.title}');
                  }
                });
              }
            }).catchError((e) {
              print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã "${nextChapter.title}": $e');
            });
          }
        }
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤–∞—Ö
  Future<void> _savePreloadedChapters() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_preloadedChaptersKey, json.encode(_preloadedFiles));
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤: $e');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤–∞—Ö
  Future<void> _loadPreloadedChapters() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final preloadedString = prefs.getString(_preloadedChaptersKey);
      
      if (preloadedString != null) {
        final Map<String, dynamic> preloadedMap = json.decode(preloadedString);
        _preloadedFiles.clear();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for (final entry in preloadedMap.entries) {
          final filePath = entry.value as String;
          if (await File(filePath).exists()) {
            _preloadedFiles[entry.key] = filePath;
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await _savePreloadedChapters();
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤: $e');
    }
  }

  Future<void> _saveOfflineAudiobooks(List<Audiobook> audiobooks) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final audiobooksJson = audiobooks.map((book) => book.toJson()).toList();
      await prefs.setString(_offlineAudiobooksKey, json.encode(audiobooksJson));
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  }

  Future<List<Audiobook>> _getOfflineAudiobooks() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final audiobooksString = prefs.getString(_offlineAudiobooksKey);
      
      if (audiobooksString != null) {
        final List<dynamic> audiobooksJson = json.decode(audiobooksString);
        return audiobooksJson.map((json) => Audiobook.fromJson(json)).toList();
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    }
    
    return [];
  }

  String _formatBookTitle(String folderName) {
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    String cleanName = folderName
        .replaceAll(RegExp(r'\.(mp3|m4a|wav)$', caseSensitive: false), '')
        .replaceAll('_', ' ')
        .replaceAll('-', ' ')
        .trim();
    
    // –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    return cleanName
        .split(' ')
        .where((word) => word.isNotEmpty)
        .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())
        .join(' ');
  }

  String _formatChapterTitle(String fileName, int chapterNumber) {
    final nameWithoutExtension = fileName.split('.').first;
    
    // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    String cleanName = nameWithoutExtension
        .replaceAll('_', ' ')
        .replaceAll('-', ' ')
        .trim();
    
    // –ï—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –µ—Å—Ç—å "chapter" –∏–ª–∏ "–≥–ª–∞–≤–∞", –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (cleanName.toLowerCase().contains('chapter') ||
        cleanName.toLowerCase().contains('–≥–ª–∞–≤–∞') ||
        cleanName.toLowerCase().contains('—á–∞—Å—Ç—å')) {
      return _formatBookTitle(cleanName);
    }
    
    // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ (–±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (cleanName.length > 3 && !RegExp(r'^\d+$').hasMatch(cleanName)) {
      return _formatBookTitle(cleanName);
    }
    
    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã
    return '–ì–ª–∞–≤–∞ $chapterNumber';
  }

  Future<void> saveProgress(String audiobookId, int chapterIndex, Duration position) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressMap = await _getProgressMap();
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–ª–∞–≤—ã
      final chapterKey = '${audiobookId}_chapter_$chapterIndex';
      
      final progress = AudiobookProgress(
        audiobookId: audiobookId,
        chapterIndex: chapterIndex,
        position: position,
        lastPlayed: DateTime.now(),
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–ª–∞–≤—ã
      progressMap[chapterKey] = progress.toJson();
      
      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏
      progressMap[audiobookId] = progress.toJson();
      
      await prefs.setString(_progressKey, json.encode(progressMap));
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
  }

  Future<AudiobookProgress?> getProgress(String audiobookId, {int? chapterIndex}) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressMap = await _getProgressMap();
      
      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≥–ª–∞–≤—ã, –∏—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ—ë
      if (chapterIndex != null) {
        final chapterKey = '${audiobookId}_chapter_$chapterIndex';
        final chapterProgress = progressMap[chapterKey];
        if (chapterProgress != null) {
          return AudiobookProgress.fromJson(chapterProgress);
        }
      }
      
      // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏
      final progress = progressMap[audiobookId];
      if (progress != null) {
        return AudiobookProgress.fromJson(progress);
      }
      
      return null;
    } catch (e) {
      return null;
    }
  }

  Future<Map<String, dynamic>> _getProgressMap() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressString = prefs.getString(_progressKey);
      
      if (progressString != null) {
        return Map<String, dynamic>.from(json.decode(progressString));
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
    
    return {};
  }

  Future<void> addToFavorites(String audiobookId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final favorites = await getFavorites();
      
      if (!favorites.contains(audiobookId)) {
        favorites.add(audiobookId);
        await prefs.setStringList(_favoritesKey, favorites);
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    }
  }

  Future<void> removeFromFavorites(String audiobookId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final favorites = await getFavorites();
      
      favorites.remove(audiobookId);
      await prefs.setStringList(_favoritesKey, favorites);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    }
  }

  Future<List<String>> getFavorites() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getStringList(_favoritesKey) ?? [];
    } catch (e) {
      return [];
    }
  }

  Future<bool> isFavorite(String audiobookId) async {
    final favorites = await getFavorites();
    return favorites.contains(audiobookId);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    await _loadPreloadedChapters();
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  Future<void> clearCache() async {
    try {
      _preloadedFiles.clear();
      _urlCache.clear();
      
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_preloadedChaptersKey);
      await prefs.remove(_urlCacheKey);
      
      print('üßπ –ö–µ—à –æ—á–∏—â–µ–Ω');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: $e');
    }
  }

  Future<void> _loadUrlCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final urlCacheString = prefs.getString(_urlCacheKey);
      
      if (urlCacheString != null) {
        final Map<String, dynamic> urlCacheMap = json.decode(urlCacheString);
        _urlCache.clear();
        
        for (final entry in urlCacheMap.entries) {
          _urlCache[entry.key] = entry.value as String;
        }
        
        print('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–µ—à URL: ${_urlCache.length} –∑–∞–ø–∏—Å–µ–π');
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞ URL: $e');
    }
  }

  Future<void> _saveUrlCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_urlCacheKey, json.encode(_urlCache));
      print('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–µ—à URL: ${_urlCache.length} –∑–∞–ø–∏—Å–µ–π');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞ URL: $e');
    }
  }
}