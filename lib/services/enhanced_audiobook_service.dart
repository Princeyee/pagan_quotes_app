import 'dart:convert';
import 'dart:io';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:path_provider/path_provider.dart';
import '../models/audiobook.dart';
import 'book_image_service.dart';
import 'public_google_drive_service.dart';

class EnhancedAudiobookService {
  static const String _progressKey = 'audiobook_progress';
  static const String _favoritesKey = 'favorite_audiobooks';
  static const String _offlineAudiobooksKey = 'offline_audiobooks';
  static const String _preloadedChaptersKey = 'preloaded_chapters';
  
  final PublicGoogleDriveService _driveService = PublicGoogleDriveService();
  final Map<String, String> _preloadedFiles = {}; // fileId -> localPath

  Future<List<Audiobook>> getAudiobooks() async {
    final connectivityResult = await Connectivity().checkConnectivity();
    final isOnline = connectivityResult != ConnectivityResult.none;

    try {
      if (isOnline) {
        // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ Google Drive
        final onlineAudiobooks = await _getOnlineAudiobooks();
        
        if (onlineAudiobooks.isNotEmpty) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
          await _saveOfflineAudiobooks(onlineAudiobooks);
          return onlineAudiobooks;
        } else {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
          return await _getOfflineAudiobooks();
        }
      } else {
        // –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–µ—à
        return await _getOfflineAudiobooks();
      }
    } catch (e) {
      // Fallback –Ω–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      return await _getOfflineAudiobooks();
    }
  }

  Future<List<Audiobook>> _getOnlineAudiobooks() async {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π Google Drive —Å–µ—Ä–≤–∏—Å
      final isInitialized = await _driveService.initialize();
      if (!isInitialized) {
        return [];
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
      final folderStructure = await _driveService.getAudiobooksByFolders();
      if (folderStructure.isEmpty) {
        return [];
      }
      
      final List<Audiobook> audiobooks = [];
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏–∑ –ø–∞–ø–æ–∫
      for (final entry in folderStructure.entries) {
        final folderName = entry.key;
        final files = entry.value;
        
        if (files.isEmpty) continue;
        
        final chapters = <AudiobookChapter>[];
        for (int i = 0; i < files.length; i++) {
          final file = files[i];
          final fileName = file['name'] as String;
          final chapterTitle = _formatChapterTitle(fileName, i + 1);
          
          chapters.add(AudiobookChapter(
            title: chapterTitle,
            filePath: '', // –î–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            duration: const Duration(minutes: 30), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            chapterNumber: i + 1,
            driveFileId: file['id'] as String,
            isStreamable: true,
          ));
        }
        
        final totalDuration = Duration(
          milliseconds: chapters.fold(0, (sum, chapter) => sum + chapter.duration.inMilliseconds),
        );
        
        final coverPath = await BookImageService.getStableBookImage(folderName, 'pagan');
        
        audiobooks.add(Audiobook(
          id: 'drive_${folderName.replaceAll(' ', '_')}',
          title: _formatBookTitle(folderName),
          author: '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞',
          coverPath: coverPath,
          chapters: chapters,
          totalDuration: totalDuration,
          description: '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ –∏–∑ Google Drive',
        ));
      }
      
      return audiobooks;
    } catch (e) {
      return [];
    }
  }

  // –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–ï–¢–û–î –ü–û–õ–£–ß–ï–ù–ò–Ø URL –° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú –ò –ü–†–û–ì–†–ï–°–°–ò–í–ù–û–ô –ó–ê–ì–†–£–ó–ö–û–ô
  Future<String?> getPlayableUrl(AudiobookChapter chapter) async {
    if (chapter.isStreamable && chapter.driveFileId != null) {
      final fileName = '${chapter.driveFileId}.mp3';
      
      print('üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞: $fileName');
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–µ—à
      final cachedPath = await _driveService.getCachedFilePath(fileName);
      if (cachedPath != null && await File(cachedPath).exists()) {
        print('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–ª–Ω–æ–º –∫–µ—à–µ: $cachedPath');
        return cachedPath;
      }
      
      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç–∏
      if (_preloadedFiles.containsKey(chapter.driveFileId)) {
        final preloadedPath = _preloadedFiles[chapter.driveFileId]!;
        if (await File(preloadedPath).exists()) {
          print('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ (–ø–∞–º—è—Ç—å): $preloadedPath');
          return preloadedPath;
        } else {
          // –§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω, —É–±–∏—Ä–∞–µ–º –∏–∑ –∫–µ—à–∞
          _preloadedFiles.remove(chapter.driveFileId);
          await _savePreloadedChapters();
        }
      }
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      final progressivePath = await _driveService.getPartialFilePath(chapter.driveFileId!);
      if (progressivePath != null && await File(progressivePath).exists()) {
        final isPlayable = await _driveService.isFilePlayable(chapter.driveFileId!);
        if (isPlayable) {
          print('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: $progressivePath');
          _preloadedFiles[chapter.driveFileId!] = progressivePath;
          await _savePreloadedChapters();
          return progressivePath;
        }
      }
      
      // 4. –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      final connectivityResult = await Connectivity().checkConnectivity();
      if (connectivityResult != ConnectivityResult.none) {
        print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: $fileName');
        
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
          final progressiveUrl = await _driveService.startProgressiveDownload(
            chapter.driveFileId!,
            fileName,
          );
          
          if (progressiveUrl != null) {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            final realPath = await _driveService.getPartialFilePath(chapter.driveFileId!);
            if (realPath != null) {
              _preloadedFiles[chapter.driveFileId!] = realPath;
              await _savePreloadedChapters();
            }
            print('‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É: $progressiveUrl');
            return progressiveUrl;
          }
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: $e');
        }
        
        // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π URL
        print('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥: ${chapter.driveFileId}');
        return _driveService.getFileDownloadUrl(chapter.driveFileId!);
      }
      
      return null;
    }
    
    return null;
  }

  // –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –°–õ–ï–î–£–Æ–©–ò–• –ì–õ–ê–í
  Future<void> preloadNextChapters(Audiobook audiobook, int currentChapterIndex, {int count = 2}) async {
    final connectivityResult = await Connectivity().checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) return;

    for (int i = 1; i <= count; i++) {
      final nextIndex = currentChapterIndex + i;
      if (nextIndex < audiobook.chapters.length) {
        final nextChapter = audiobook.chapters[nextIndex];
        
        if (nextChapter.driveFileId != null) {
          final fileName = '${nextChapter.driveFileId}.mp3';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
          final cachedPath = await _driveService.getCachedFilePath(fileName);
          if (cachedPath == null && !_preloadedFiles.containsKey(nextChapter.driveFileId)) {
            print('üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≥–ª–∞–≤—É: ${nextChapter.title}');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ñ–æ–Ω–µ
            _driveService.startProgressiveDownload(
              nextChapter.driveFileId!,
              fileName,
            ).then((serverUrl) {
              if (serverUrl != null) {
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                _driveService.getPartialFilePath(nextChapter.driveFileId!).then((realPath) {
                  if (realPath != null) {
                    _preloadedFiles[nextChapter.driveFileId!] = realPath;
                    _savePreloadedChapters();
                    print('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≥–ª–∞–≤–∞: ${nextChapter.title}');
                  }
                });
              }
            }).catchError((e) {
              print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤—ã "${nextChapter.title}": $e');
            });
          }
        }
      }
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤–∞—Ö
  Future<void> _savePreloadedChapters() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_preloadedChaptersKey, json.encode(_preloadedFiles));
    } catch (e) {
      print('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤: $e');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤–∞—Ö
  Future<void> _loadPreloadedChapters() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final preloadedString = prefs.getString(_preloadedChaptersKey);
      
      if (preloadedString != null) {
        final Map<String, dynamic> preloadedMap = json.decode(preloadedString);
        _preloadedFiles.clear();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for (final entry in preloadedMap.entries) {
          final filePath = entry.value as String;
          if (await File(filePath).exists()) {
            _preloadedFiles[entry.key] = filePath;
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await _savePreloadedChapters();
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤: $e');
    }
  }

  Future<void> _saveOfflineAudiobooks(List<Audiobook> audiobooks) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final audiobooksJson = audiobooks.map((book) => book.toJson()).toList();
      await prefs.setString(_offlineAudiobooksKey, json.encode(audiobooksJson));
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  }

  Future<List<Audiobook>> _getOfflineAudiobooks() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final audiobooksString = prefs.getString(_offlineAudiobooksKey);
      
      if (audiobooksString != null) {
        final List<dynamic> audiobooksJson = json.decode(audiobooksString);
        return audiobooksJson.map((json) => Audiobook.fromJson(json)).toList();
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    }
    
    return [];
  }

  String _formatBookTitle(String folderName) {
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    String cleanName = folderName
        .replaceAll(RegExp(r'\.(mp3|m4a|wav)$', caseSensitive: false), '')
        .replaceAll('_', ' ')
        .replaceAll('-', ' ')
        .trim();
    
    // –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    return cleanName
        .split(' ')
        .where((word) => word.isNotEmpty)
        .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())
        .join(' ');
  }

  String _formatChapterTitle(String fileName, int chapterNumber) {
    final nameWithoutExtension = fileName.split('.').first;
    
    // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    String cleanName = nameWithoutExtension
        .replaceAll('_', ' ')
        .replaceAll('-', ' ')
        .trim();
    
    // –ï—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –µ—Å—Ç—å "chapter" –∏–ª–∏ "–≥–ª–∞–≤–∞", –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (cleanName.toLowerCase().contains('chapter') ||
        cleanName.toLowerCase().contains('–≥–ª–∞–≤–∞') ||
        cleanName.toLowerCase().contains('—á–∞—Å—Ç—å')) {
      return _formatBookTitle(cleanName);
    }
    
    // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ (–±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (cleanName.length > 3 && !RegExp(r'^\d+$').hasMatch(cleanName)) {
      return _formatBookTitle(cleanName);
    }
    
    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã
    return '–ì–ª–∞–≤–∞ $chapterNumber';
  }

  Future<void> saveProgress(String audiobookId, int chapterIndex, Duration position) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressMap = await _getProgressMap();
      
      final progress = AudiobookProgress(
        audiobookId: audiobookId,
        chapterIndex: chapterIndex,
        position: position,
        lastPlayed: DateTime.now(),
      );
      
      progressMap[audiobookId] = progress.toJson();
      
      await prefs.setString(_progressKey, json.encode(progressMap));
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
  }

  Future<AudiobookProgress?> getProgress(String audiobookId) async {
    try {
      final progressMap = await _getProgressMap();
      final progressJson = progressMap[audiobookId];
      
      if (progressJson != null) {
        return AudiobookProgress.fromJson(progressJson);
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
    
    return null;
  }

  Future<Map<String, dynamic>> _getProgressMap() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressString = prefs.getString(_progressKey);
      
      if (progressString != null) {
        return Map<String, dynamic>.from(json.decode(progressString));
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
    
    return {};
  }

  Future<void> addToFavorites(String audiobookId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final favorites = await getFavorites();
      
      if (!favorites.contains(audiobookId)) {
        favorites.add(audiobookId);
        await prefs.setStringList(_favoritesKey, favorites);
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    }
  }

  Future<void> removeFromFavorites(String audiobookId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final favorites = await getFavorites();
      
      favorites.remove(audiobookId);
      await prefs.setStringList(_favoritesKey, favorites);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    }
  }

  Future<List<String>> getFavorites() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getStringList(_favoritesKey) ?? [];
    } catch (e) {
      return [];
    }
  }

  Future<bool> isFavorite(String audiobookId) async {
    final favorites = await getFavorites();
    return favorites.contains(audiobookId);
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  Future<void> initialize() async {
    await _loadPreloadedChapters();
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  Future<void> clearCache() async {
    try {
      _preloadedFiles.clear();
      await _driveService.clearCache();
      
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_preloadedChaptersKey);
      
      print('üóëÔ∏è –ö–µ—à –æ—á–∏—â–µ–Ω');
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: $e');
    }
  }
}