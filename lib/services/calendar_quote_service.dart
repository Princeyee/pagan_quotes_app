
// lib/services/calendar_quote_service.dart
import 'dart:math';
import '../models/daily_quote.dart';
import '../models/quote.dart';
import '../utils/custom_cache.dart';
import 'quote_extraction_service.dart';
import 'theme_service.dart';

class CalendarQuoteService {
  static final CalendarQuoteService _instance = CalendarQuoteService._internal();
  factory CalendarQuoteService() => _instance;
  CalendarQuoteService._internal();

  final QuoteExtractionService _quoteService = QuoteExtractionService();
  final CustomCachePrefs _cache = CustomCache.prefs;

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—É –¥–ª—è –ª—é–±–æ–π –¥–∞—Ç—ã (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—à–ª—ã–µ)
  Future<DailyQuote?> generateQuoteForDate(DateTime date) async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      final cachedQuote = _cache.getCachedDailyQuote(date);
      if (cachedQuote != null) {
        return cachedQuote;
      }

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
      final today = DateTime.now();
      if (_isSameDate(date, today)) {
        return await _quoteService.generateDailyQuote(date: date);
      }

      // –î–ª—è –ø—Ä–æ—à–ª—ã—Ö/–±—É–¥—É—â–∏—Ö –¥–∞—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ
      final quote = await _generateDeterministicQuote(date);
      if (quote != null) {
        final dailyQuote = DailyQuote(
          quote: quote,
          date: date,
          isViewed: false,
          isContextViewed: false,
        );
        
        // –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await _cache.cacheDailyQuote(dailyQuote);
        return dailyQuote;
      }

      return null;
    } catch (e) {
      print('Error generating quote for date $date: $e');
      return null;
    }
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  Future<Quote?> _generateDeterministicQuote(DateTime date) async {
    try {
      // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ú–ï–¢–û–î –§–ò–õ–¨–¢–†–ê–¶–ò–ò
      final filteredQuotes = await _quoteService.getFilteredQuotes();
      
      if (filteredQuotes.isEmpty) {
        print('‚ùå –ù–µ—Ç —Ü–∏—Ç–∞—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∞—Ç—ã $date');
        
        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        final curated = await _quoteService.loadCuratedQuotes();
        if (curated.isNotEmpty) {
          final allQuotes = <Quote>[];
          for (final categoryQuotes in curated.values) {
            allQuotes.addAll(categoryQuotes.map((q) => q.toQuote()));
          }
          
          if (allQuotes.isNotEmpty) {
            final daysSinceEpoch = date.difference(DateTime(1970)).inDays;
            final random = Random(daysSinceEpoch);
            return allQuotes[random.nextInt(allQuotes.length)];
          }
        }
        
        return null;
      }

      print('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${filteredQuotes.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –¥–ª—è –¥–∞—Ç—ã $date');
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      final quotesByCategory = <String, List<Quote>>{};
      for (final quote in filteredQuotes) {
        quotesByCategory.putIfAbsent(quote.category, () => []).add(quote);
      }

      final categories = quotesByCategory.keys.toList();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å–∏–¥ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
      final daysSinceEpoch = date.difference(DateTime(1970)).inDays;
      
      // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ
      final categoryIndex = daysSinceEpoch % categories.length;
      final selectedCategory = categories[categoryIndex];
      
      print('üé≤ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: $selectedCategory –¥–ª—è –¥–∞—Ç—ã ${date.day}.${date.month}.${date.year}');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      final categoryQuotes = quotesByCategory[selectedCategory]!;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Ü–∏—Ç–∞—Ç—É –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ
      final random = Random(daysSinceEpoch + selectedCategory.hashCode);
      final selectedQuote = categoryQuotes[random.nextInt(categoryQuotes.length)];
      
      return selectedQuote;
      
    } catch (e) {
      print('Error generating deterministic quote: $e');
      return null;
    }
  }

  /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç (–¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
  Future<Map<DateTime, DailyQuote>> generateQuotesForRange(
    DateTime startDate, 
    DateTime endDate
  ) async {
    final quotes = <DateTime, DailyQuote>{};
    
    DateTime currentDate = startDate;
    while (currentDate.isBefore(endDate) || _isSameDate(currentDate, endDate)) {
      final quote = await generateQuoteForDate(currentDate);
      if (quote != null) {
        quotes[currentDate] = quote;
      }
      
      currentDate = currentDate.add(const Duration(days: 1));
    }
    
    return quotes;
  }

  /// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–∏—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  Future<void> preloadCurrentMonth() async {
    final now = DateTime.now();
    final startOfMonth = DateTime(now.year, now.month, 1);
    final endOfMonth = DateTime(now.year, now.month + 1, 0);
    
    await generateQuotesForRange(startOfMonth, endOfMonth);
  }

  /// –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã (—Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤)
  Future<void> cleanupOldQuotes() async {
    try {
      await _cache.clearOldDailyQuotes(90); // –û—Å—Ç–∞–≤–ª—è–µ–º 3 –º–µ—Å—è—Ü–∞
    } catch (e) {
      print('Error cleaning up old quotes: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –¥–≤–µ –¥–∞—Ç—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –≤—Ä–µ–º—è)
  bool _isSameDate(DateTime date1, DateTime date2) {
    return date1.year == date2.year &&
           date1.month == date2.month &&
           date1.day == date2.day;
  }

  /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–∏—Ç–∞—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
  Future<Map<String, int>> getCalendarStats() async {
    final stats = _cache.getCacheStats();
    
    return {
      'totalCachedQuotes': stats['dailyQuotes'] ?? 0,
      'cacheSize': _cache.getCacheSize(),
      'viewedQuotes': (stats['viewedQuotes'] ?? 0),
    };
  }
}