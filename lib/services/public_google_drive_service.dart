import 'dart:io';
import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'progressive_download_service.dart';
import 'local_audio_server.dart';

class PublicGoogleDriveService {
  String _lastError = '';
  bool _isInitialized = false;
  
  // ID –ø—É–±–ª–∏—á–Ω–æ–π –ø–∞–ø–∫–∏ —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞–º–∏
  static const String _folderId = '1b7PFjESsnY6bsn9rDmdAe10AU0pQNwiM';
  
  // API –∫–ª—é—á –¥–ª—è Google Drive
  static const String _apiKey = 'AIzaSyD1sGI81Bep1Nm_zWNtQctmGbjO1eKQ24M';
  
  // –ö–µ—à
  static const String _filesCacheKey = 'public_drive_files_cache';
  static const String _filesCacheTimestampKey = 'public_drive_files_cache_timestamp';
  static const Duration _cacheValidity = Duration(days: 1);
  
  final Dio _dio = Dio();
  List<Map<String, dynamic>>? _cachedFiles;
  List<Map<String, dynamic>>? _cachedFolders;
  DateTime? _cacheTimestamp;
  
  // –°–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤ÔøΩÔøΩ–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  final ProgressiveDownloadService _progressiveDownloadService = ProgressiveDownloadService();
  final LocalAudioServer _localServer = LocalAudioServer.instance;

  Future<bool> initialize() async {
    try {
      _lastError = '';
      _isInitialized = false;
      
      print('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive —Å–µ—Ä–≤–∏—Å–∞...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à
      await _loadFilesCache();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
      final serverStarted = await _localServer.start();
      if (!serverStarted) {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä');
        _lastError = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä';
      } else {
        print('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${_localServer.port}');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ API
      if (await isOnline()) {
        print('üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Google Drive API...');
        final testUrl = 'https://www.googleapis.com/drive/v3/files/$_folderId?key=$_apiKey';
        
        try {
          final response = await _dio.get(testUrl);
          if (response.statusCode == 200) {
            print('‚úÖ Google Drive API –¥–æ—Å—Ç—É–ø–µ–Ω');
            _isInitialized = true;
            return true;
          } else {
            print('‚ùå Google Drive API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}');
            _lastError = 'Google Drive API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.statusCode}';
          }
        } catch (e) {
          print('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Drive API: $e');
          _lastError = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Drive API: $e';
        }
      } else {
        print('‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        _lastError = '–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
      if (_cachedFiles != null && _cachedFiles!.isNotEmpty) {
        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        _isInitialized = true;
        return true;
      }
      
      print('‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      return false;
    } catch (e) {
      print('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      _lastError = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e';
      return false;
    }
  }

  Future<bool> isOnline() async {
    final connectivityResult = await Connectivity().checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
  Future<Map<String, List<Map<String, dynamic>>>> getAudiobooksByFolders() async {
    if (!await isOnline()) {
      return {};
    }

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
      final foldersUrl = 'https://www.googleapis.com/drive/v3/files'
          '?q=${Uri.encodeComponent("'$_folderId' in parents and mimeType='application/vnd.google-apps.folder'")}'
          '&key=$_apiKey'
          '&fields=files(id,name)';
      
      final foldersResponse = await _dio.get(foldersUrl);
      
      if (foldersResponse.statusCode != 200) {
        _lastError = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫: ${foldersResponse.statusCode}';
        return {};
      }
      
      final foldersData = foldersResponse.data;
      final folders = List<Map<String, dynamic>>.from(foldersData['files'] ?? []);
      
      final Map<String, List<Map<String, dynamic>>> result = {};
      
      // –î–ª—è –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ –ø–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
      for (final folder in folders) {
        final folderId = folder['id'] as String;
        final folderName = folder['name'] as String;
        
        final filesUrl = 'https://www.googleapis.com/drive/v3/files'
            '?q=${Uri.encodeComponent("'$folderId' in parents")}'
            '&key=$_apiKey'
            '&fields=files(id,name,mimeType,size,webContentLink)';
        
        final filesResponse = await _dio.get(filesUrl);
        
        if (filesResponse.statusCode == 200) {
          final filesData = filesResponse.data;
          final files = List<Map<String, dynamic>>.from(filesData['files'] ?? []);
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
          final audioFiles = files.where((file) {
            final mimeType = file['mimeType'] as String? ?? '';
            final fileName = file['name'] as String? ?? '';
            return mimeType.startsWith('audio/') || 
                   fileName.toLowerCase().endsWith('.mp3') ||
                   fileName.toLowerCase().endsWith('.m4a') ||
                   fileName.toLowerCase().endsWith('.wav');
          }).toList();
          
          if (audioFiles.isNotEmpty) {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏
            audioFiles.sort((a, b) => (a['name'] as String).compareTo(b['name'] as String));
            result[folderName] = audioFiles;
          }
        }
      }
      
      return result;
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫: $e';
      return {};
    }
  }

  String getFileDownloadUrl(String fileId) {
    return 'https://drive.google.com/uc?id=$fileId&export=download';
  }

  Future<String?> getCachedFilePath(String fileName) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final filePath = '${directory.path}/audiobook_cache/$fileName';
      
      if (await File(filePath).exists()) {
        return filePath;
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–µ—à–∞
    }
    
    return null;
  }

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –∫–µ—à (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  Future<String?> preloadFile(String fileId, String fileName, {Function(double)? onProgress}) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final cacheDir = Directory('${directory.path}/audiobook_cache');
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–µ—à–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!await cacheDir.exists()) {
        await cacheDir.create(recursive: true);
      }
      
      final filePath = '${cacheDir.path}/$fileName';
      final file = File(filePath);
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ, –≤–æÔøΩÔøΩ–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å
      if (await file.exists()) {
        return filePath;
      }
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      final downloadUrl = getFileDownloadUrl(fileId);
      
      final response = await _dio.get(
        downloadUrl,
        options: Options(
          responseType: ResponseType.stream,
          followRedirects: true,
          validateStatus: (status) => status! < 500,
        ),
      );
      
      if (response.statusCode == 200) {
        final contentLength = response.headers.value('content-length');
        final total = contentLength != null ? int.parse(contentLength) : 0;
        
        int downloaded = 0;
        final sink = file.openWrite();
        
        await for (final chunk in response.data.stream) {
          sink.add(chunk);
          downloaded += (chunk as List<int>).length;
          
          if (total > 0 && onProgress != null) {
            onProgress(downloaded / total);
          }
        }
        
        await sink.close();
        return filePath;
      }
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: $e');
    }
    
    return null;
  }

  /// –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–û–ì–†–ï–°–°–ò–í–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò
  
  /// –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞
  Future<String?> startProgressiveDownload(String fileId, String fileName, {Function(DownloadProgress)? onProgress}) async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
      final existingPath = await _progressiveDownloadService.getPartialFilePath(fileId);
      if (existingPath != null && await File(existingPath).exists()) {
        final isPlayable = await _progressiveDownloadService.isPlayable(fileId);
        if (isPlayable) {
          // –§–∞–π–ª —É–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é
          final serverUrl = _localServer.registerFile(fileId, existingPath);
          print('üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: $serverUrl');
          return serverUrl;
        }
      }
      
      final downloadUrl = getFileDownloadUrl(fileId);
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
      if (onProgress != null) {
        _progressiveDownloadService.getProgressStream(fileId).listen(onProgress);
      }
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É (–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µÔøΩÔøΩ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é)
      final filePath = await _progressiveDownloadService.startProgressiveDownload(
        fileId: fileId,
        downloadUrl: downloadUrl,
        fileName: fileName,
        resumeIfExists: true, // –í–∞–∂–Ω–æ: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      );
      
      if (filePath != null) {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        final serverUrl = _localServer.registerFile(fileId, filePath);
        print('üéµ –§–∞–π–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ: $serverUrl');
        return serverUrl;
      }
      
      return null;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: $e');
      return null;
    }
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  Stream<DownloadProgress> getDownloadProgressStream(String fileId) {
    return _progressiveDownloadService.getProgressStream(fileId);
  }
  
  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞ÔøΩÔøΩ–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
  Future<bool> isFilePlayable(String fileId) async {
    return await _progressiveDownloadService.isPlayable(fileId);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
  Future<String?> getPartialFilePath(String fileId) async {
    return await _progressiveDownloadService.getPartialFilePath(fileId);
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞)
  Future<String?> getPlayableUrl(String fileId, String fileName) async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å—Ç–∞—Ä–æ–º –∫–µ—à–µ
    final cachedPath = await getCachedFilePath(fileName);
    if (cachedPath != null) {
      print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: $cachedPath');
      return cachedPath;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    final partialPath = await _progressiveDownloadService.getPartialFilePath(fileId);
    if (partialPath != null) {
      final isPlayable = await _progressiveDownloadService.isPlayable(fileId);
      if (isPlayable) {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL
        final serverUrl = _localServer.registerFile(fileId, partialPath);
        print('üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: $serverUrl');
        return serverUrl;
      }
    }
    
    // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    if (await isOnline()) {
      print('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É: $fileName');
      return await startProgressiveDownload(fileId, fileName);
    }
    
    return null;
  }
  
  /// –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  void pauseDownload(String fileId) {
    _progressiveDownloadService.pauseDownload(fileId);
  }
  
  /// –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
  Future<void> cancelDownload(String fileId) async {
    await _progressiveDownloadService.cancelDownload(fileId);
    _localServer.unregisterFile(fileId);
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
  List<PartialFileInfo> getPartialDownloads() {
    return _progressiveDownloadService.getPartialFiles();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
  bool _isCacheValid() {
    if (_cachedFiles == null || _cachedFiles!.isEmpty || _cacheTimestamp == null) {
      return false;
    }

    final now = DateTime.now();
    final difference = now.difference(_cacheTimestamp!);
    return difference < _cacheValidity;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞
  Future<void> _saveFilesCache(List<Map<String, dynamic>> files) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      final String jsonFiles = jsonEncode(files);
      await prefs.setString(_filesCacheKey, jsonFiles);
      await prefs.setString(_filesCacheTimestampKey, DateTime.now().toIso8601String());
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–µ—à–∞
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞
  Future<void> _loadFilesCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      
      final timestampString = prefs.getString(_filesCacheTimestampKey);
      if (timestampString != null) {
        _cacheTimestamp = DateTime.parse(timestampString);
      }
      
      final jsonFiles = prefs.getString(_filesCacheKey);
      if (jsonFiles != null) {
        final List<dynamic> filesList = jsonDecode(jsonFiles);
        _cachedFiles = List<Map<String, dynamic>>.from(filesList);
      }
    } catch (e) {
      _cachedFiles = null;
      _cacheTimestamp = null;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  Future<void> clearCache() async {
    try {
      _cachedFiles = null;
      _cacheTimestamp = null;

      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_filesCacheKey);
      await prefs.remove(_filesCacheTimestampKey);

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
      final directory = await getApplicationDocumentsDirectory();
      final cacheDir = Directory('${directory.path}/audiobook_cache');
      if (await cacheDir.exists()) {
        await cacheDir.delete(recursive: true);
      }
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∫–µ—à
      await _progressiveDownloadService.clearCache();
      
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
    }
  }
  
  /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    _progressiveDownloadService.dispose();
    await _localServer.stop();
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  String getLastError() => _lastError;
  bool isServiceInitialized() => _isInitialized;
  bool get isLocalServerRunning => _localServer.isRunning;
  int get localServerPort => _localServer.port;
}