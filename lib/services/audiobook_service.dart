import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import '../models/audiobook.dart';
import 'book_image_service.dart';
import 'public_google_drive_service.dart';
import 'text_file_service.dart';

class AudiobookService {
  static const String _progressKey = 'audiobook_progress';
  static const String _favoritesKey = 'favorite_audiobooks';
  static const String _offlineAudiobooksKey = 'offline_audiobooks';
  
  final PublicGoogleDriveService _driveService = PublicGoogleDriveService();

  Future<List<Audiobook>> getAudiobooks() async {
    final connectivityResult = await Connectivity().checkConnectivity();
    final isOnline = connectivityResult != ConnectivityResult.none;

    try {
      if (isOnline) {
        // –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ Google Drive
        final onlineAudiobooks = await _getOnlineAudiobooks();
        
        if (onlineAudiobooks.isNotEmpty) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
          await _saveOfflineAudiobooks(onlineAudiobooks);
          return onlineAudiobooks;
        } else {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
          return await _getOfflineAudiobooks();
        }
      } else {
        // –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–µ—à
        return await _getOfflineAudiobooks();
      }
    } catch (e) {
      // Fallback –Ω–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      return await _getOfflineAudiobooks();
    }
  }

  Future<List<Audiobook>> _getOnlineAudiobooks() async {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π Google Drive —Å–µ—Ä–≤–∏—Å
      final isInitialized = await _driveService.initialize();
      if (!isInitialized) {
        return [];
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏
      final folderStructure = await _driveService.getAudiobooksByFolders();
      if (folderStructure.isEmpty) {
        return [];
      }
      
      final List<Audiobook> audiobooks = [];
      
      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ–∫–Ω–∏–≥–∏ –∏–∑ –ø–∞–ø–æ–∫
      for (final entry in folderStructure.entries) {
        final folderName = entry.key;
        final files = entry.value;
        
        if (files.isEmpty) continue;
        
        final chapters = <AudiobookChapter>[];
        for (int i = 0; i < files.length; i++) {
          final file = files[i];
          final fileName = file['name'] as String;
          final chapterTitle = _formatChapterTitle(fileName, i + 1);
          
          chapters.add(AudiobookChapter(
            title: chapterTitle,
            filePath: '', // –î–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            duration: const Duration(minutes: 30), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            chapterNumber: i + 1,
            driveFileId: file['id'] as String,
            isStreamable: true,
          ));
        }
        
        final totalDuration = Duration(
          milliseconds: chapters.fold(0, (sum, chapter) => sum + chapter.duration.inMilliseconds),
        );
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±–ª–æ–∂–∫–∏
        String bookId = folderName;
        String category = 'pagan'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É
        try {
          final textService = TextFileService();
          final textBooks = await textService.loadBookSources();
          
          // –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–∞–ø–æ–∫ –∫ ID —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–∏–≥
          final Map<String, String> folderToBookId = {
            '–∞—Ä–∏—Å—Ç–æ—Ç–µ–ª—å –º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞': 'aristotle_metaphysics',
            '–º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞': 'aristotle_metaphysics',
            '–∞—Ä–∏—Å—Ç–æ—Ç–µ–ª—å —ç—Ç–∏–∫–∞': 'aristotle_ethics',
            '—ç—Ç–∏–∫–∞': 'aristotle_ethics',
            '–∞—Ä–∏—Å—Ç–æ—Ç–µ–ª—å –ø–æ–ª–∏—Ç–∏–∫–∞': 'aristotle_politics',
            '–ø–æ–ª–∏—Ç–∏–∫–∞': 'aristotle_politics',
            '–∞—Ä–∏—Å—Ç–æ—Ç–µ–ª—å —Ä–∏—Ç–æ—Ä–∏–∫–∞': 'aristotle_rhetoric',
            '—Ä–∏—Ç–æ—Ä–∏–∫–∞': 'aristotle_rhetoric',
            '–ø–ª–∞—Ç–æ–Ω —Å–æ—Ñ–∏—Å—Ç': 'plato_sophist',
            '—Å–æ—Ñ–∏—Å—Ç': 'plato_sophist',
            '–ø–ª–∞—Ç–æ–Ω –ø–∞—Ä–º–µ–Ω–∏–¥': 'plato_parmenides',
            '–ø–∞—Ä–º–µ–Ω–∏–¥': 'plato_parmenides',
            '–≥–æ–º–µ—Ä –∏–ª–∏–∞–¥–∞': 'homer_iliad',
            '–∏–ª–∏–∞–¥–∞': 'homer_iliad',
            '–≥–æ–º–µ—Ä –æ–¥–∏—Å—Å–µ—è': 'homer_odyssey',
            '–æ–¥–∏—Å—Å–µ—è': 'homer_odyssey',
            '–≥–µ—Å–∏–æ–¥ —Ç—Ä—É–¥—ã': 'hesiod_labour_and_days',
            '—Ç—Ä—É–¥—ã –∏ –¥–Ω–∏': 'hesiod_labour_and_days',
            '–±–µ–æ–≤—É–ª—å—Ñ': 'beowulf',
            '—Å—Ç–∞—Ä—à–∞—è —ç–¥–¥–∞': 'elder_edda',
            '—ç–¥–¥–∞': 'elder_edda',
            '—Ö–∞–π–¥–µ–≥–≥–µ—Ä –±—ã—Ç–∏–µ': 'heidegger_being_and_time',
            '–±—ã—Ç–∏–µ –∏ –≤—Ä–µ–º—è': 'heidegger_being_and_time',
            '—Ö–∞–π–¥–µ–≥–≥–µ—Ä –º—ã—Å–ª–∏—Ç—å': 'heidegger_what_means_to_think',
            '—á—Ç–æ –∑–Ω–∞—á–∏—Ç –º—ã—Å–ª–∏—Ç—å': 'heidegger_what_means_to_think',
            '–Ω–∏—Ü—à–µ –∞–Ω—Ç–∏—Ö—Ä–∏—Å—Ç': 'nietzsche_antichrist',
            '–∞–Ω—Ç–∏—Ö—Ä–∏—Å—Ç': 'nietzsche_antichrist',
            '–Ω–∏—Ü—à–µ –≤–µ—Å–µ–ª–∞—è': 'nietzsche_gay_science',
            '–≤–µ—Å–µ–ª–∞—è –Ω–∞—É–∫–∞': 'nietzsche_gay_science',
            '–Ω–∏—Ü—à–µ –∑–∞—Ä–∞—Ç—É—Å—Ç—Ä–∞': 'nietzsche_thus_spoke_zarathustra',
            '–∑–∞—Ä–∞—Ç—É—Å—Ç—Ä–∞': 'nietzsche_thus_spoke_zarathustra',
            '–Ω–∏—Ü—à–µ —Ç—Ä–∞–≥–µ–¥–∏—è': 'nietzsche_birth_of_tragedy',
            '—Ä–æ–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–≥–µ–¥–∏–∏': 'nietzsche_birth_of_tragedy',
            '–Ω–∏—Ü—à–µ –¥–æ–±—Ä–æ –∑–ª–æ': 'nietzsche_beyond_good_and_evil',
            '–ø–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É': 'nietzsche_beyond_good_and_evil',
            '—à–æ–ø–µ–Ω–≥–∞—É—ç—Ä –º–∏—Ä': 'schopenhauer_world_as_will',
            '–º–∏—Ä –∫–∞–∫ –≤–æ–ª—è': 'schopenhauer_world_as_will',
            '—à–æ–ø–µ–Ω–≥–∞—É—ç—Ä –∞—Ñ–æ—Ä–∏–∑–º—ã': 'schopenhauer_aphorisms',
            '–∞—Ñ–æ—Ä–∏–∑–º—ã': 'schopenhauer_aphorisms',
            '–¥–µ –±–µ–Ω—É–∞ —è–∑—ã—á–Ω–∏–∫': 'on_being_a_pagan',
            '–∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Ç—å —è–∑—ã—á–Ω–∏–∫–æ–º': 'on_being_a_pagan',
            '—ç–ª–∏–∞–¥–µ —Å–≤—è—â–µ–Ω–Ω–æ–µ': 'eliade_sacred_and_profane',
            '—Å–≤—è—â–µ–Ω–Ω–æ–µ –∏ –º–∏—Ä—Å–∫–æ–µ': 'eliade_sacred_and_profane',
            '—ç–ª–∏–∞–¥–µ –º–∏—Ñ': 'eliade_myth_eternal_return',
            '–º–∏—Ñ –æ –≤–µ—á–Ω–æ–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏': 'eliade_myth_eternal_return',
            '—ç–≤–æ–ª–∞ –∏–º–ø–µ—Ä–∏–∞–ª–∏–∑–º': 'evola_pagan_imperialism',
            '—è–∑—ã—á–µ—Å–∫–∏–π –∏–º–ø–µ—Ä–∏–∞–ª–∏–∑–º': 'evola_pagan_imperialism',
            '—ç–≤–æ–ª–∞ –ø–æ–ª': 'evola_metaphysics_of_sex',
            '–º–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞ –ø–æ–ª–∞': 'evola_metaphysics_of_sex',
            '—ç–≤–æ–ª–∞ —Ä—É–∏–Ω—ã': 'evola_men_among_ruins',
            '–ª—é–¥–∏ –∏ —Ä—É–∏–Ω—ã': 'evola_men_among_ruins',
            '–∞—Å–∫—Ä –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å': 'askr_svarte_pagan_identity',
            '–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å —è–∑—ã—á–Ω–∏–∫–∞': 'askr_svarte_pagan_identity',
            '–∞—Å–∫—Ä –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ': 'askr_svarte_priblizhenie',
            '–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ': 'askr_svarte_priblizhenie',
            '–∞—Å–∫—Ä –ø–æ–ª–µ–º–æ—Å': 'askr_svarte_polemos',
            'polemos': 'askr_svarte_polemos',
          };
          
          // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É
          String? matchedBookId;
          for (final entry in folderToBookId.entries) {
            if (folderName.toLowerCase().contains(entry.key.toLowerCase()) ||
                entry.key.toLowerCase().contains(folderName.toLowerCase())) {
              matchedBookId = entry.value;
              break;
            }
          }
          
          if (matchedBookId != null) {
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É –ø–æ ID
            for (final textBook in textBooks) {
              if (textBook.id == matchedBookId) {
                bookId = textBook.id;
                category = textBook.category;
                print('üé® –ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–∏–≥–∞: ${textBook.title} (${textBook.category})');
                break;
              }
            }
          }
        } catch (e) {
          print('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è –æ–±–ª–æ–∂–∫–∏: $e');
        }
        
        final coverPath = await BookImageService.getStableBookImage(bookId, category);
        
        audiobooks.add(Audiobook(
          id: 'drive_${folderName.replaceAll(' ', '_')}',
          title: _formatBookTitle(folderName),
          author: '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞',
          coverPath: coverPath,
          chapters: chapters,
          totalDuration: totalDuration,
          description: '–ê—É–¥–∏–æ–∫–Ω–∏–≥–∞ –∏–∑ Google Drive',
        ));
      }
      
      return audiobooks;
    } catch (e) {
      return [];
    }
  }

  Future<void> _saveOfflineAudiobooks(List<Audiobook> audiobooks) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final audiobooksJson = audiobooks.map((book) => book.toJson()).toList();
      await prefs.setString(_offlineAudiobooksKey, json.encode(audiobooksJson));
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  }

  Future<List<Audiobook>> _getOfflineAudiobooks() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final audiobooksString = prefs.getString(_offlineAudiobooksKey);
      
      if (audiobooksString != null) {
        final List<dynamic> audiobooksJson = json.decode(audiobooksString);
        return audiobooksJson.map((json) => Audiobook.fromJson(json)).toList();
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    }
    
    return [];
  }

  Future<String?> getPlayableUrl(AudiobookChapter chapter) async {
    if (chapter.isStreamable && chapter.driveFileId != null) {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      final fileName = '${chapter.driveFileId}.mp3';
      final cachedPath = await _driveService.getCachedFilePath(fileName);
      
      if (cachedPath != null) {
        return cachedPath;
      }
      
      // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π URL
      final connectivityResult = await Connectivity().checkConnectivity();
      if (connectivityResult != ConnectivityResult.none) {
        return _driveService.getFileDownloadUrl(chapter.driveFileId!);
      }
      
      return null;
    }
    
    return null; // –£–±–∏—Ä–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  }

  String _formatBookTitle(String folderName) {
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    String cleanName = folderName
        .replaceAll(RegExp(r'\.(mp3|m4a|wav)$', caseSensitive: false), '')
        .replaceAll('_', ' ')
        .replaceAll('-', ' ')
        .trim();
    
    // –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    return cleanName
        .split(' ')
        .where((word) => word.isNotEmpty)
        .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())
        .join(' ');
  }

  String _formatChapterTitle(String fileName, int chapterNumber) {
    final nameWithoutExtension = fileName.split('.').first;
    
    // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    String cleanName = nameWithoutExtension
        .replaceAll('_', ' ')
        .replaceAll('-', ' ')
        .trim();
    
    // –ï—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –µ—Å—Ç—å "chapter" –∏–ª–∏ "–≥–ª–∞–≤–∞", –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (cleanName.toLowerCase().contains('chapter') ||
        cleanName.toLowerCase().contains('–≥–ª–∞–≤–∞') ||
        cleanName.toLowerCase().contains('—á–∞—Å—Ç—å')) {
      return _formatBookTitle(cleanName);
    }
    
    // –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ (–±–æ–ª—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (cleanName.length > 3 && !RegExp(r'^\d+$').hasMatch(cleanName)) {
      return _formatBookTitle(cleanName);
    }
    
    // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã
    return '–ì–ª–∞–≤–∞ $chapterNumber';
  }

  Future<void> saveProgress(String audiobookId, int chapterIndex, Duration position) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressMap = await _getProgressMap();
      
      final progress = AudiobookProgress(
        audiobookId: audiobookId,
        chapterIndex: chapterIndex,
        position: position,
        lastPlayed: DateTime.now(),
      );
      
      progressMap[audiobookId] = progress.toJson();
      
      await prefs.setString(_progressKey, json.encode(progressMap));
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
  }

  Future<AudiobookProgress?> getProgress(String audiobookId) async {
    try {
      final progressMap = await _getProgressMap();
      final progressJson = progressMap[audiobookId];
      
      if (progressJson != null) {
        return AudiobookProgress.fromJson(progressJson);
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
    
    return null;
  }

  Future<Map<String, dynamic>> _getProgressMap() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final progressString = prefs.getString(_progressKey);
      
      if (progressString != null) {
        return Map<String, dynamic>.from(json.decode(progressString));
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    }
    
    return {};
  }

  Future<void> addToFavorites(String audiobookId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final favorites = await getFavorites();
      
      if (!favorites.contains(audiobookId)) {
        favorites.add(audiobookId);
        await prefs.setStringList(_favoritesKey, favorites);
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    }
  }

  Future<void> removeFromFavorites(String audiobookId) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final favorites = await getFavorites();
      
      favorites.remove(audiobookId);
      await prefs.setStringList(_favoritesKey, favorites);
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    }
  }

  Future<List<String>> getFavorites() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getStringList(_favoritesKey) ?? [];
    } catch (e) {
      return [];
    }
  }

  Future<bool> isFavorite(String audiobookId) async {
    final favorites = await getFavorites();
    return favorites.contains(audiobookId);
  }
}