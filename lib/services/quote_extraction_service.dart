// lib/services/quote_extraction_service.dart - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø

import 'dart:math';
import 'dart:convert';
import 'package:flutter/services.dart';
import '../models/quote.dart';
import '../models/quote_context.dart';
import '../models/book_source.dart';
import '../models/daily_quote.dart';
import 'text_file_service.dart';
import 'theme_service.dart'; // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢

class CuratedQuote {
  final String id;
  final String text;
  final String author;
  final String source;
  final String category;
  final int position;
  final bool approved;

  const CuratedQuote({
    required this.id,
    required this.text,
    required this.author,
    required this.source,
    required this.category,
    required this.position,
    required this.approved,
  });

  factory CuratedQuote.fromJson(Map<String, dynamic> json) {
    return CuratedQuote(
      id: json['id'] as String,
      text: json['text'] as String,
      author: json['author'] as String,
      source: json['source'] as String,
      category: json['category'] as String,
      position: json['position'] as int,
      approved: json['approved'] as bool,
    );
  }

  Quote toQuote() {
    return Quote(
      id: id,
      text: text,
      author: author,
      source: source,
      category: category,
      position: position,
      dateAdded: DateTime.now(),
      theme: category,
      isFavorite: false,
    );
  }
}

class QuoteExtractionService {
  static final QuoteExtractionService _instance = QuoteExtractionService._internal();
  factory QuoteExtractionService() => _instance;
  QuoteExtractionService._internal();

  final TextFileService _textService = TextFileService();

  // –ö—ç—à –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö —Ü–∏—Ç–∞—Ç - –°–î–ï–õ–ê–ï–ú –ü–£–ë–õ–ò–ß–ù–´–ú
  Map<String, List<CuratedQuote>>? _curatedQuotesCache;

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ assets/curated/ - –ü–£–ë–õ–ò–ß–ù–´–ô –ú–ï–¢–û–î
  Future<Map<String, List<CuratedQuote>>> loadCuratedQuotes() async {
    if (_curatedQuotesCache != null) {
      return _curatedQuotesCache!;
    }

    final curatedQuotes = <String, List<CuratedQuote>>{};

    // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏
    final curatedFiles = [
      'assets/curated/my_quotes_approved.json',
    ];

    for (final filePath in curatedFiles) {
      try {
        print('üìö –ó–∞–≥—Ä—É–∂–∞–µ–º: $filePath');
        final jsonString = await rootBundle.loadString(filePath);
        final List<dynamic> jsonData = json.decode(jsonString);

        final quotes = jsonData
            .map((json) => CuratedQuote.fromJson(json as Map<String, dynamic>))
            .where((quote) => quote.approved) // –¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
            .toList();

        if (quotes.isNotEmpty) {
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—ã –ø–æ –∏—Ö —Ä–µ–∞–ª—å–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
          for (final quote in quotes) {
            curatedQuotes.putIfAbsent(quote.category, () => []).add(quote);
          }
          
          // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
          for (final category in curatedQuotes.keys) {
            print('‚úÖ ${curatedQuotes[category]!.length} —Ü–∏—Ç–∞—Ç –¥–ª—è: $category');
          }
        }
      } catch (e) {
        print('‚ö†Ô∏è –§–∞–π–ª $filePath –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: $e');
        // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      }
    }

    _curatedQuotesCache = curatedQuotes;
    return curatedQuotes;
  }

  /// –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –ø–æ —Ç–µ–º–∞–º –∏ –∞–≤—Ç–æ—Ä–∞–º
  Future<List<Quote>> getFilteredQuotes() async {
    final curated = await loadCuratedQuotes();
    final enabledThemes = await ThemeService.getEnabledThemes();
    final selectedAuthors = await ThemeService.getSelectedAuthors();
    
    print('üéØ –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—ã: —Ç–µ–º—ã=$enabledThemes, –∞–≤—Ç–æ—Ä—ã=$selectedAuthors');
    
    final filteredQuotes = <Quote>[];
    
    for (final themeId in enabledThemes) {
      if (curated.containsKey(themeId)) {
        for (final curatedQuote in curated[themeId]!) {
          // –î–ª—è —Å–µ–≤–µ—Ä–Ω–æ–π —Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ source (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏), –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø–æ author
          final filterKey = curatedQuote.category == 'nordic' ? curatedQuote.source : curatedQuote.author;
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ—Ä–∞–º –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã–±—Ä–∞–Ω—ã
          if (selectedAuthors.isEmpty || selectedAuthors.contains(filterKey)) {
            filteredQuotes.add(curatedQuote.toQuote());
          }
        }
      }
    }
    
    print('‚úÖ –ù–∞–π–¥–µ–Ω–æ ${filteredQuotes.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç');
    return filteredQuotes;
  }

  /// –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã - —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –ò –∞–≤—Ç–æ—Ä–æ–≤
  Future<DailyQuote?> generateDailyQuote({DateTime? date}) async {
    date ??= DateTime.now();

    try {
      print('üé≠ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É –Ω–∞ ${date.toString().split(' ')[0]}');

      // –ü–û–õ–£–ß–ê–ï–ú –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–´–ï –¶–ò–¢–ê–¢–´
      final filteredQuotes = await getFilteredQuotes();

      if (filteredQuotes.isEmpty) {
        print('‚ùå –ù–µ—Ç —Ü–∏—Ç–∞—Ç –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º –∏ –∞–≤—Ç–æ—Ä–æ–≤');
        
        // Fallback - –±–µ—Ä–µ–º –ª—é–±—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
        final curated = await loadCuratedQuotes();
        if (curated.isNotEmpty) {
          final allQuotes = <Quote>[];
          for (final categoryQuotes in curated.values) {
            allQuotes.addAll(categoryQuotes.map((q) => q.toQuote()));
          }
          
          if (allQuotes.isNotEmpty) {
            final daysSinceEpoch = date.difference(DateTime(1970)).inDays;
            final dayRandom = Random(daysSinceEpoch);
            final selectedQuote = allQuotes[dayRandom.nextInt(allQuotes.length)];
            
            print('üîÑ Fallback: –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞');
            return DailyQuote(quote: selectedQuote, date: date);
          }
        }
        
        return null;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      final quotesByCategory = <String, List<Quote>>{};
      for (final quote in filteredQuotes) {
        quotesByCategory.putIfAbsent(quote.category, () => []).add(quote);
      }

      final categories = quotesByCategory.keys.toList();
      print('üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: $categories');

      // –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –¥–Ω—é (—á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ)
      final daysSinceEpoch = date.difference(DateTime(1970)).inDays;
      final categoryIndex = daysSinceEpoch % categories.length;
      final selectedCategory = categories[categoryIndex];

      print('üéØ –î–µ–Ω—å $daysSinceEpoch -> –ö–∞—Ç–µ–≥–æ—Ä–∏—è: $selectedCategory');

      // –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      final categoryQuotes = quotesByCategory[selectedCategory]!;

      // –í—ã–±–∏—Ä–∞–µ–º —Ü–∏—Ç–∞—Ç—É —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è
      final dayRandom = Random(daysSinceEpoch + selectedCategory.hashCode);
      final selectedQuote = categoryQuotes[dayRandom.nextInt(categoryQuotes.length)];

      print('üìú –í—ã–±—Ä–∞–Ω–∞: ${selectedQuote.author} - "${selectedQuote.text.substring(0, min(50, selectedQuote.text.length))}..."');

      return DailyQuote(
        quote: selectedQuote,
        date: date,
      );

    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã: $e');
      print('Stack trace: $stackTrace');
      return null;
    }
  }

  /// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã
  Future<QuoteContext?> getQuoteContext(Quote quote) async {
    try {
      print('üîç –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ü–∏—Ç–∞—Ç—ã: ${quote.id}');

      // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –≥–∏–±–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞
      final matchingSource = _textService.findBookSource(quote.author, quote.source);

      if (matchingSource == null) {
        print('‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è: ${quote.author} - ${quote.source}');
        print('üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:');
        final sources = await _textService.loadBookSources();
        for (final s in sources) {
          print('   - ${s.author} : ${s.title} (${s.category})');
        }
        return null;
      }

      print('‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: ${matchingSource.title} - ${matchingSource.cleanedFilePath}');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      final cleanedText = await _textService.loadTextFile(matchingSource.cleanedFilePath);
      print('üìñ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π: ${cleanedText.length} —Å–∏–º–≤–æ–ª–æ–≤');

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –ø–æ–∑–∏—Ü–∏–∏ —Ü–∏—Ç–∞—Ç—ã
      final contextParagraphs = _textService.getContextAroundPosition(
        cleanedText, 
        quote.position,
        contextSize: 1, // –£–º–µ–Ω—å—à–∞–µ–º —Å 5 –¥–æ 1 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–æ –∏ –ø–æ—Å–ª–µ
      );

      print('üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ ${contextParagraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
      print('üîç DEBUG: –ü–æ–∑–∏—Ü–∏—è —Ü–∏—Ç–∞—Ç—ã: ${quote.position}');
      print('üîç DEBUG: –¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã: ${quote.text.substring(0, min(50, quote.text.length))}...');
      
      for (int i = 0; i < contextParagraphs.length; i++) {
        final para = contextParagraphs[i];
        final content = para['content'] as String;
        final position = para['position'] as int;
        print('üîç DEBUG: –ü–∞—Ä–∞–≥—Ä–∞—Ñ $i (–ø–æ–∑–∏—Ü–∏—è $position): ${content.substring(0, min(100, content.length))}...');
      }

      if (contextParagraphs.isEmpty) {
        print('‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${quote.position}');

        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—É –ø–æ —Ç–µ–∫—Å—Ç—É
        print('üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—É –ø–æ —Ç–µ–∫—Å—Ç—É...');
        final paragraphs = _textService.extractParagraphsWithPositions(cleanedText);

        for (final para in paragraphs) {
          final content = para['content'] as String;
          final position = para['position'] as int;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –≤ —ç—Ç–æ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ–µ
          if (content.toLowerCase().contains(quote.text.toLowerCase().substring(0, min(30, quote.text.length)))) {
            print('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: $position');

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            final foundContextParagraphs = _textService.getContextAroundPosition(
              cleanedText, 
              position,
              contextSize: 1, // –£–º–µ–Ω—å—à–∞–µ–º —Å 5 –¥–æ 1 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–æ –∏ –ø–æ—Å–ª–µ
            );

            if (foundContextParagraphs.isNotEmpty) {
              final contextText = foundContextParagraphs
                  .map((p) => p['content'] as String)
                  .join('\n\n');

              final startPosition = foundContextParagraphs.first['position'] as int;
              final endPosition = foundContextParagraphs.last['position'] as int;

              return QuoteContext(
                quote: quote,
                contextText: contextText,
                startPosition: startPosition,
                endPosition: endPosition,
                contextParagraphs: foundContextParagraphs
                    .map((p) => p['content'] as String)
                    .toList(),
              );
            }
          }
        }

        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—É –Ω–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏, –Ω–∏ –ø–æ —Ç–µ–∫—Å—Ç—É');
        return null;
      }

      final contextText = contextParagraphs
          .map((p) => p['content'] as String)
          .join('\n\n');

      final startPosition = contextParagraphs.first['position'] as int;
      final endPosition = contextParagraphs.last['position'] as int;

      print('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω: ${contextParagraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤');

      return QuoteContext(
        quote: quote,
        contextText: contextText,
        startPosition: startPosition,
        endPosition: endPosition,
        contextParagraphs: contextParagraphs
            .map((p) => p['content'] as String)
            .toList(),
      );

    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: $e');
      print('Stack trace: $stackTrace');
      return null;
    }
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  Future<Quote?> extractRandomQuote(BookSource source, {int? minLength, int? maxLength}) async {
    return null;
  }

  Future<List<Quote>> searchQuotes(String query, {int limit = 20}) async {
    final curated = await loadCuratedQuotes();
    final allQuotes = <Quote>[];

    for (final categoryQuotes in curated.values) {
      for (final curatedQuote in categoryQuotes) {
        final quote = curatedQuote.toQuote();
        if (quote.text.toLowerCase().contains(query.toLowerCase()) ||
            quote.author.toLowerCase().contains(query.toLowerCase()) ||
            quote.source.toLowerCase().contains(query.toLowerCase())) {
          allQuotes.add(quote);
        }
      }
    }

    return allQuotes.take(limit).toList();
  }

  Future<Map<String, int>> getExtractionStats() async {
    final curated = await loadCuratedQuotes();
    final stats = <String, int>{};

    for (final entry in curated.entries) {
      stats[entry.key] = entry.value.length;
    }

    return stats;
  }
}