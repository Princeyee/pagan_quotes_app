import 'dart:io';
import 'dart:convert';
import 'package:googleapis/drive/v3.dart' as drive;
import 'package:path_provider/path_provider.dart';
import 'package:dio/dio.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:http/http.dart';
import 'package:shared_preferences/shared_preferences.dart';

class GoogleDriveServiceFixed {
  // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  String _lastError = '';
  bool _isInitialized = false;
  String _currentUserEmail = '';
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –ø–∞–ø–∫—É —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞–º–∏
  static const String _folderId = '1b7PFjESsnY6bsn9rDmdAe10AU0pQNwiM'; // ID –ø–∞–ø–∫–∏ —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞–º–∏
  static const bool _debugMode = true; // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
  static const List<String> _scopes = [drive.DriveApi.driveReadonlyScope];

  // –ö–ª—é—á–∏ –¥–ª—è SharedPreferences
  static const String _filesCacheKey = 'google_drive_files_cache';
  static const String _filesCacheTimestampKey = 'google_drive_files_cache_timestamp';
  static const Duration _cacheValidity = Duration(days: 1); // –ö–µ—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞

  drive.DriveApi? _driveApi;
  final Dio _dio = Dio();
  GoogleSignIn? _googleSignIn;

  // –ö–µ—à —Ñ–∞–π–ª–æ–≤
  List<drive.File>? _cachedFiles;
  DateTime? _cacheTimestamp;

  Future<bool> initialize() async {
    try {
      _lastError = '';
      _isInitialized = false;
      _currentUserEmail = '';
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      await _loadFilesCache();

      print('üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Google Drive Service...');
      
      // –°–æ–∑–¥–∞–µ–º GoogleSignIn —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
      _googleSignIn = GoogleSignIn(
        scopes: _scopes,
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Client ID –∏–∑ google-services.json
        clientId: '112687964915-usd3dib9prsllich0e8n9nlo9arceco0.apps.googleusercontent.com',
      );
      
      print('üì± –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      GoogleSignInAccount? account = _googleSignIn!.currentUser;
      
      if (account == null) {
        print('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥...');
        try {
          account = await _googleSignIn!.signInSilently();
          if (account != null) {
            print('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω: ${account.email}');
          }
        } catch (silentError) {
          print('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: $silentError');
        }
      } else {
        print('üë§ –ù–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${account.email}');
      }
      
      if (account == null) {
        print('üîê –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥...');
        try {
          account = await _googleSignIn!.signIn();
        } catch (signInError) {
          _lastError = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Google: $signInError';
          print('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: $signInError');
          
          // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
          final errorString = signInError.toString();
          if (errorString.contains('sign_in_failed')) {
            if (errorString.contains('J1.b: 10:')) {
              _lastError += '\n\nüîç –ö–æ–¥ –æ—à–∏–±–∫–∏ J1.b:10 - –ø—Ä–æ–±–ª–µ–º–∞ —Å OAuth 2.0 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π';
              _lastError += '\n\nüìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ Google Cloud Console:';
              _lastError += '\n1. ‚úÖ –í–∫–ª—é—á–µ–Ω –ª–∏ Google Sign-In API';
              _lastError += '\n2. ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ OAuth 2.0 Client ID –¥–ª—è Android';
              _lastError += '\n3. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ª–∏ SHA-1: E8:39:D8:08:6A:81:8A:E4:ED:AB:3F:9C:25:9B:47:34:DE:37:C3:7E';
              _lastError += '\n4. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ package name: com.sacral.app';
              _lastError += '\n5. ‚úÖ –í–∫–ª—é—á–µ–Ω –ª–∏ Google Drive API';
              _lastError += '\n\nüåê –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
            } else {
              _lastError += '\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ OAuth 2.0\n2. –ù–µ–≤–µ—Ä–Ω—ã–π SHA-1 –æ—Ç–ø–µ—á–∞—Ç–æ–∫\n3. Google Sign-In API –Ω–µ –≤–∫–ª—é—á–µ–Ω\n4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é';
            }
          }
          return false;
        }
      }
      
      if (account == null) {
        _lastError = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥';
        print('‚ùå –í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        return false;
      }
      
      _currentUserEmail = account.email;
      print('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${account.email}');
      
      try {
        print('üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        final authHeaders = await account.authHeaders;
        print('‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã: ${authHeaders.keys.join(', ')}');
        
        final client = GoogleAuthClient(authHeaders);
        _driveApi = drive.DriveApi(client);
      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ Drive API
        try {
          print('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Drive API...');
          final about = await _driveApi!.about.get();
          print('‚úÖ Drive API —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${about.user?.displayName}');
          _isInitialized = true;
          return true;
        } catch (apiError) {
          _lastError = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Drive API: $apiError';
          print('‚ùå Drive API –æ—à–∏–±–∫–∞: $apiError');
          
          // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ API
          final errorStr = apiError.toString();
          if (errorStr.contains('403')) {
            _lastError += '\n\nüö´ –û—à–∏–±–∫–∞ 403 - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
            _lastError += '\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ Google Cloud Console:';
            _lastError += '\n1. ‚úÖ Google Drive API –≤–∫–ª—é—á–µ–Ω';
            _lastError += '\n2. ‚úÖ –ö–≤–æ—Ç—ã API –Ω–µ –ø—Ä–µ–≤—ã—àÔøΩÔøΩ–Ω—ã';
            _lastError += '\n3. ‚úÖ –ü—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω';
          } else if (errorStr.contains('401')) {
            _lastError += '\n\nüîê –û—à–∏–±–∫–∞ 401 - –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π';
            _lastError += '\nüìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:';
            _lastError += '\n1. –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω';
            _lastError += '\n2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ scopes';
          } else if (errorStr.contains('400')) {
            _lastError += '\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ 400 - –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å';
          }
          return false;
        }
      } catch (authError) {
        _lastError = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: $authError';
        print('‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: $authError');
        return false;
      }
    } catch (e) {
      _lastError = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e';
      print('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $e');
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
  Future<bool> forceReauth() async {
    try {
      print('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
      
      if (_googleSignIn != null) {
        await _googleSignIn!.disconnect();
        print('ÔøΩÔøΩÔøΩÔøΩ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏');
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      _isInitialized = false;
      _driveApi = null;
      _currentUserEmail = '';
      
      // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      return await initialize();
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e';
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
      return false;
    }
  }

  Future<bool> isOnline() async {
    final connectivityResult = await Connectivity().checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }

  Future<List<drive.File>> getAudiobookFiles() async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
    if (_isCacheValid()) {
      print('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ (${_cachedFiles!.length} —Ñ–∞–π–ª–æ–≤)');
      return _cachedFiles!;
    }
    
    if (_driveApi == null) {
      print('‚ùå DriveApi –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      // –ï—Å–ª–∏ DriveApi –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ —É –Ω–∞—Å –µ—Å—Ç—å –∫–µ—à, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫
      if (_cachedFiles != null && _cachedFiles!.isNotEmpty) {
        print('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à (DriveApi –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω)');
        return _cachedFiles!;
      }

      return [];
    }

    if (!await isOnline()) {
      print('üåê –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫
      if (_cachedFiles != null && _cachedFiles!.isNotEmpty) {
        print('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
        return _cachedFiles!;
      }

      return [];
    }

   try {
  print('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏: $_folderId');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–∞–ø–∫–µ
  try {
    final folderResponse = await _driveApi!.files.get(_folderId);
    final folder = folderResponse as drive.File;
    print('‚úÖ –ü–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${folder.name}');
  } catch (folderError) {
    print('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ $_folderId: $folderError');
    _lastError = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ–∫–Ω–∏–≥–∞–º–∏: $folderError';
  }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
      try {
        final fileList = await _driveApi!.files.list(
          q: "'$_folderId' in parents and (mimeType contains 'audio' or mimeType='application/vnd.google-apps.folder')",
          spaces: 'drive',
          pageSize: 100,
        );
        
        final files = fileList.files ?? [];
        print('üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ');

        if (files.isNotEmpty) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
          _cachedFiles = files;
          _cacheTimestamp = DateTime.now();
          await _saveFilesCache(files);
          print('üíæ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω');
          return files;
        } else {
          print('üì≠ –í –ø–∞–ø–∫–µ –Ω–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤');
        }
      } catch (folderError) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: $folderError');
        _lastError = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: $folderError';
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
      print('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã...');
      try {
        final allFilesList = await _driveApi!.files.list(
          q: "mimeType contains 'audio' or mimeType='application/vnd.google-apps.folder'",
          spaces: 'drive',
          pageSize: 100,
        );
        
        final allFiles = allFilesList.files ?? [];
        print('üìÅ –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}');
        
        if (allFiles.isNotEmpty) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
          _cachedFiles = allFiles;
          _cacheTimestamp = DateTime.now();
          await _saveFilesCache(allFiles);
          print('üíæ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω (–≤—Å–µ —Ñ–∞–π–ª—ã)');
        }
        
        return allFiles;
      } catch (allFilesError) {
        print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤: $allFilesError');
        _lastError = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: $allFilesError';
      }
      
      return [];
    } catch (e) {
      print('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: $e');
      _lastError = '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $e';

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–µ—à, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (_cachedFiles != null && _cachedFiles!.isNotEmpty) {
        print('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
        return _cachedFiles!;
      }

      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–µ—à–∞
  bool _isCacheValid() {
    if (_cachedFiles == null || _cachedFiles!.isEmpty || _cacheTimestamp == null) {
      return false;
    }

    final now = DateTime.now();
    final difference = now.difference(_cacheTimestamp!);

    return difference < _cacheValidity;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ —Ñ–∞–π–ª–æ–≤
  Future<void> _saveFilesCache(List<drive.File> files) async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç
      final List<Map<String, dynamic>> filesList = [];

      for (final file in files) {
        final Map<String, dynamic> fileMap = {
          'id': file.id,
          'name': file.name,
          'mimeType': file.mimeType,
        };

        if (file.parents != null) {
          fileMap['parents'] = file.parents;
        }

        filesList.add(fileMap);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Å—Ç—Ä–æ–∫—É
      final String jsonFiles = jsonEncode(filesList);
      await prefs.setString(_filesCacheKey, jsonFiles);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
      await prefs.setString(_filesCacheTimestampKey, DateTime.now().toIso8601String());

      print('üíæ –ö–µ—à —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${files.length} —Ñ–∞–π–ª–æ–≤)');
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞: $e');
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ—à–∞ —Ñ–∞–π–ª–æ–≤
  Future<void> _loadFilesCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
      final timestampString = prefs.getString(_filesCacheTimestampKey);
      if (timestampString != null) {
        _cacheTimestamp = DateTime.parse(timestampString);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
      final jsonFiles = prefs.getString(_filesCacheKey);
      if (jsonFiles != null) {
        final List<dynamic> filesList = jsonDecode(jsonFiles);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã drive.File
        _cachedFiles = filesList.map((fileMap) {
          return drive.File()
            ..id = fileMap['id']
            ..name = fileMap['name']
            ..mimeType = fileMap['mimeType']
            ..parents = fileMap['parents'] != null
                ? List<String>.from(fileMap['parents'])
                : null;
        }).toList();

        print('üì¶ –ö–µ—à –∑–∞–≥—Ä—É–∂–µ–Ω (${_cachedFiles!.length} —Ñ–∞–π–ª–æ–≤)');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–µ—à–∞
        if (_isCacheValid()) {
          print('‚úÖ –ö–µ—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${_cacheTimestamp!.add(_cacheValidity)}');
        } else if (_cacheTimestamp != null) {
          print('‚è∞ –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª, –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: $_cacheTimestamp');
        }
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ—à–∞: $e');
      _cachedFiles = null;
      _cacheTimestamp = null;
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
  Future<List<drive.File>> refreshFiles() async {
    print('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞...');
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à
    _cachedFiles = null;
    _cacheTimestamp = null;

    // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    return await getAudiobookFiles();
  }

  Future<String?> getFileStreamUrl(String fileId) async {
    if (_driveApi == null || !await isOnline()) {
      _lastError = 'DriveApi –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      print(_lastError);
      return null;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
    if (_debugMode) {
  try {
    final fileResponse = await _driveApi!.files.get(fileId);
    final file = fileResponse as drive.File;
    print('‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω: ${file.name}');
  } catch (fileError) {
    _lastError = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É $fileId: $fileError';
    print(_lastError);
  }
}
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      return 'https://drive.google.com/uc?id=$fileId&export=download';
    } catch (e) {
      _lastError = '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: $e';
      print(_lastError);
      return null;
    }
  }

  Future<String?> downloadAndCacheFile(String fileId, String fileName) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    final cachedPath = await getCachedFilePath(fileName);
    if (cachedPath != null) {
      print('üì¶ –§–∞–π–ª $fileName —É–∂–µ –≤ –∫–µ—à–µ');
      return cachedPath;
    }

    if (!await isOnline()) {
      print('üåê –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª');
      return null;
    }

    try {
      final url = await getFileStreamUrl(fileId);
      if (url == null) return null;

      final directory = await getApplicationDocumentsDirectory();
      final cacheDir = Directory('${directory.path}/audiobook_cache');
      if (!await cacheDir.exists()) {
        await cacheDir.create(recursive: true);
      }

      final filePath = '${cacheDir.path}/$fileName';
      print('‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ $fileName...');
      await _dio.download(url, filePath);

      print('‚úÖ –§–∞–π–ª $fileName –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–µ—à');
      return filePath;
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: $e');
      return null;
    }
  }

  Future<String?> getCachedFilePath(String fileName) async {
    try {
      final directory = await getApplicationDocumentsDirectory();
      final filePath = '${directory.path}/audiobook_cache/$fileName';
      
      if (await File(filePath).exists()) {
        return filePath;
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $e');
    }
    
    return null;
  }

  Future<bool> isFileCached(String fileName) async {
    final cachedPath = await getCachedFilePath(fileName);
    return cachedPath != null;
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
  Future<void> clearCache() async {
    try {
      // –û—á–∏—â–∞–µ–º –∫–µ—à –≤ –ø–∞–º—è—Ç–∏
      _cachedFiles = null;
      _cacheTimestamp = null;

      // –û—á–∏—â–∞–µ–º SharedPreferences
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_filesCacheKey);
      await prefs.remove(_filesCacheTimestampKey);

      // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –∫–µ—à
      final directory = await getApplicationDocumentsDirectory();
      final cacheDir = Directory('${directory.path}/audiobook_cache');
      if (await cacheDir.exists()) {
        await cacheDir.delete(recursive: true);
        print('üóëÔ∏è –ö–µ—à —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω');
      }
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: $e');
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  String getLastError() => _lastError;
  bool isServiceInitialized() => _isInitialized;
  String getCurrentUserEmail() => _currentUserEmail;
  
  Future<Map<String, dynamic>> getDiagnosticInfo() async {
    final Map<String, dynamic> info = {
      'timestamp': DateTime.now().toIso8601String(),
      'isInitialized': _isInitialized,
      'lastError': _lastError,
      'userEmail': _currentUserEmail,
      'isOnline': await isOnline(),
      'targetFolderId': _folderId,
      'cacheStatus': _isCacheValid() ? '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' : '–£—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      'cachedFilesCount': _cachedFiles?.length ?? 0,
      'cacheLastUpdated': _cacheTimestamp?.toIso8601String(),
      'debugMode': _debugMode,
      'scopes': _scopes,
    };
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Google Sign-In
    try {
      if (_googleSignIn != null) {
        info['googleSignInCurrentUser'] = _googleSignIn!.currentUser?.email ?? 'null';
        info['googleSignInIsSignedIn'] = await _googleSignIn!.isSignedIn();
        
        final currentUser = _googleSignIn!.currentUser;
        if (currentUser != null) {
          info['currentUserDetails'] = {
            'email': currentUser.email,
            'displayName': currentUser.displayName,
            'id': currentUser.id,
            'photoUrl': currentUser.photoUrl,
          };
          
          try {
            final authHeaders = await currentUser.authHeaders;
            info['authHeadersAvailable'] = true;
            info['authHeadersKeys'] = authHeaders.keys.toList();
          } catch (e) {
            info['authHeadersError'] = e.toString();
            info['authHeadersAvailable'] = false;
          }
        }
      }
    } catch (e) {
      info['googleSignInError'] = e.toString();
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Drive API
    if (_driveApi != null) {
      info['driveApiInitialized'] = true;
      try {
        final about = await _driveApi!.about.get();
        info['driveApiStatus'] = 'OK';
        info['driveApiUser'] = {
          'displayName': about.user?.displayName,
          'emailAddress': about.user?.emailAddress,
        };
      } catch (e) {
        info['driveApiError'] = e.toString();
        info['driveApiStatus'] = 'ERROR';
      }
    } else {
      info['driveApiInitialized'] = false;
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
    try {
      final connectivityResult = await Connectivity().checkConnectivity();
      info['connectivityType'] = connectivityResult.toString();
    } catch (e) {
      info['connectivityError'] = e.toString();
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
    try {
      final directory = await getApplicationDocumentsDirectory();
      final cacheDir = Directory('${directory.path}/audiobook_cache');
      info['cacheDirExists'] = await cacheDir.exists();
      if (await cacheDir.exists()) {
        final files = await cacheDir.list().toList();
        info['cachedFilesOnDisk'] = files.length;
      }
    } catch (e) {
      info['fileSystemError'] = e.toString();
    }
    
    return info;
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class GoogleAuthClient extends BaseClient {
  final Map<String, String> _headers;
  final Client _client = Client();

  GoogleAuthClient(this._headers);

  @override
  Future<StreamedResponse> send(BaseRequest request) {
    request.headers.addAll(_headers);
    return _client.send(request);
  }
}