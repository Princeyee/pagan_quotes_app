// lib/services/sound_manager.dart
import 'package:just_audio/just_audio.dart';
import '../utils/custom_cache.dart';

class SoundManager {
  static final SoundManager _instance = SoundManager._internal();
  factory SoundManager() => _instance;
  SoundManager._internal();

  final Map<String, AudioPlayer> _players = {};
  bool _isMuted = false;
  final CustomCachePrefs _cache = CustomCache.prefs;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  Future<void> init() async {
    _isMuted = await _cache.getSetting<bool>('global_sound_muted') ?? false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞
  bool get isMuted => _isMuted;

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
  Future<void> setMuted(bool muted) async {
    _isMuted = muted;
    await _cache.setSetting('global_sound_muted', muted);
    
    if (muted) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–≤—É–∫–∏
      await stopAll();
    }
  }

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫
  Future<void> playSound(String key, String assetPath, {bool loop = false}) async {
  if (_isMuted) return;

  try {
    await stopSound(key);

    final player = AudioPlayer();
    _players[key] = player;

    await player.setAsset(assetPath);
    if (loop) {
      player.setLoopMode(LoopMode.one);
      player.play(); // üîÑ –ù–ï await ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–≤—É–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π
    } else {
      await player.play(); // ‚úÖ –¢–æ–ª—å–∫–æ –∂–¥–µ–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞—Ü–∏–∫–ª–µ–Ω
    }
  } catch (e) {
    print('Error playing sound $key: $e');
  }
}

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–≤—É–∫
  Future<void> stopSound(String key) async {
    final player = _players[key];
    if (player != null) {
      try {
        await player.stop();
        await player.dispose();
      } catch (e) {
        print('Error stopping sound $key: $e');
      }
      _players.remove(key);
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–≤—É–∫–∏
  Future<void> stopAll() async {
    final keys = _players.keys.toList();
    for (final key in keys) {
      await stopSound(key);
    }
  }

  // –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–≤—É–∫–∏ (–¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
  Future<void> pauseAll() async {
    for (final player in _players.values) {
      try {
        if (player.playing) {
          await player.pause();
        }
      } catch (e) {
        print('Error pausing sound: $e');
      }
    }
  }

  // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–≤—É–∫–∏ (–¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
  Future<void> resumeAll() async {
    if (_isMuted) return;
    
    for (final player in _players.values) {
      try {
        await player.play();
      } catch (e) {
        print('Error resuming sound: $e');
      }
    }
  }

  // –ü–ª–∞–≤–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –∑–≤—É–∫–∞
  Future<void> fadeOut(String key, {Duration duration = const Duration(milliseconds: 500)}) async {
    final player = _players[key];
    if (player == null) return;

    try {
      final steps = 10;
      final stepDuration = duration.inMilliseconds ~/ steps;
      
      for (int i = steps; i >= 0; i--) {
        await player.setVolume(i / steps);
        await Future.delayed(Duration(milliseconds: stepDuration));
      }
      
      await stopSound(key);
    } catch (e) {
      print('Error fading out sound $key: $e');
    }
  }

  // –ü–ª–∞–≤–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∑–≤—É–∫–∞
  Future<void> fadeIn(String key, String assetPath, {Duration duration = const Duration(milliseconds: 500), bool loop = false}) async {
    if (_isMuted) return;

    try {
      await stopSound(key);

      final player = AudioPlayer();
      _players[key] = player;

      await player.setAsset(assetPath);
      await player.setVolume(0.0);
      if (loop) {
        player.setLoopMode(LoopMode.one);
      }
      
      player.play();

      final steps = 10;
      final stepDuration = duration.inMilliseconds ~/ steps;
      
      for (int i = 0; i <= steps; i++) {
        await player.setVolume(i / steps);
        await Future.delayed(Duration(milliseconds: stepDuration));
      }
    } catch (e) {
      print('Error fading in sound $key: $e');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  Future<void> dispose() async {
    await stopAll();
  }
}
