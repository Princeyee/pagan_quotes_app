// lib/services/theme_service.dart - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/custom_cache.dart'; // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢
import '../models/theme_info.dart';
import 'quote_extraction_service.dart'; // –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢

class ThemeService {
  static const _key = 'enabled_themes';
  static const _selectedAuthorsKey = 'selected_authors';

  static Future<List<String>> getEnabledThemes() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getStringList(_key) ?? ['greece', 'nordic', 'pagan', 'philosophy'];
  }

  static Future<void> setEnabledThemes(List<String> themes) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setStringList(_key, themes);
    
    // –°–ë–†–ê–°–´–í–ê–ï–ú –ö–≠–® –ï–ñ–ï–î–ù–ï–í–ù–´–• –¶–ò–¢–ê–¢ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–º
    await CustomCache.prefs.clearDailyQuotes();
    print('üîÑ –ö—ç—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –æ—á–∏—â–µ–Ω ÔøΩÔøΩ–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ç–µ–º');
  }

  static Future<void> toggleTheme(String themeId) async {
    final current = await getEnabledThemes();
    if (current.contains(themeId)) {
      if (current.length == 1) return; // –∑–∞–ø—Ä–µ—â–∞–µ–º –æ—Ç–∫–ª—é—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–º—É
      current.remove(themeId);
      
      // –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ–º—ã —É–±–∏—Ä–∞–µ–º –µ—ë –∞–≤—Ç–æ—Ä–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      await _removeAuthorsFromDisabledTheme(themeId);
    } else {
      current.add(themeId);
    }
    await setEnabledThemes(current); // –ò—Å–ø–æ–ª—å–∑—É–µ–º setEnabledThemes –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞
  }

  static Future<bool> isEnabled(String themeId) async {
    final current = await getEnabledThemes();
    return current.contains(themeId);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–µ–º—ã
  static Future<String> getRandomActiveTheme() async {
    final enabledThemes = await getEnabledThemes();
    if (enabledThemes.isEmpty) {
      return 'greece'; // fallback
    }
    enabledThemes.shuffle();
    return enabledThemes.first;
  }

  // ========== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–í–¢–û–†–ê–ú–ò ==========

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
  static List<String> getAuthorsForTheme(String themeId) {
    final theme = allThemes.firstWhere(
      (t) => t.id == themeId,
      orElse: () => ThemeInfo(id: themeId, name: '', image: '', authors: [], description: ''),
    );
    return theme.authors;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ç–µ–º
  static Future<List<String>> getAllAuthorsForEnabledThemes() async {
    final enabledThemes = await getEnabledThemes();
    final allAuthors = <String>{};
    
    for (final themeId in enabledThemes) {
      allAuthors.addAll(getAuthorsForTheme(themeId));
    }
    
    return allAuthors.toList()..sort();
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
  static Future<Set<String>> getSelectedAuthors() async {
    final prefs = await SharedPreferences.getInstance();
    final selectedList = prefs.getStringList(_selectedAuthorsKey) ?? [];
    return selectedList.toSet();
  }

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
  static Future<void> _saveSelectedAuthors(Set<String> authors) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setStringList(_selectedAuthorsKey, authors.toList());
    
    // –°–ë–†–ê–°–´–í–ê–ï–ú –ö–≠–® –ï–ñ–ï–î–ù–ï–í–ù–´–• –¶–ò–¢–ê–¢ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–æ–≤
    await CustomCache.prefs.clearDailyQuotes();
    print('üîÑ –ö—ç—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ü–∏—Ç–∞—Ç –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–≤—Ç–æ—Ä–æ–≤');
  }

  /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ (–¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö)
  static Future<void> toggleAuthor(String author) async {
    final selectedAuthors = await getSelectedAuthors();
    
    if (selectedAuthors.contains(author)) {
      selectedAuthors.remove(author);
    } else {
      selectedAuthors.add(author);
    }
    
    await _saveSelectedAuthors(selectedAuthors);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–±—Ä–∞–Ω –ª–∏ –∞–≤—Ç–æ—Ä
  static Future<bool> isAuthorSelected(String author) async {
    final selectedAuthors = await getSelectedAuthors();
    return selectedAuthors.contains(author);
  }

  /// –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ —Ç–µ–º—ã
  static Future<void> selectAllAuthorsForTheme(String themeId) async {
    final selectedAuthors = await getSelectedAuthors();
    final themeAuthors = getAuthorsForTheme(themeId);
    
    selectedAuthors.addAll(themeAuthors);
    await _saveSelectedAuthors(selectedAuthors);
  }

  /// –£–±—Ä–∞—Ç—å –≤—Å–µ—Ö –∞–≤—Ç–æ—Ä–æ–≤ —Ç–µ–º—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
  static Future<void> deselectAllAuthorsForTheme(String themeId) async {
    final selectedAuthors = await getSelectedAuthors();
    final themeAuthors = getAuthorsForTheme(themeId);
    
    for (final author in themeAuthors) {
      selectedAuthors.remove(author);
    }
    
    await _saveSelectedAuthors(selectedAuthors);
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
  static Future<void> clearSelectedAuthors() async {
    await _saveSelectedAuthors(<String>{});
  }

  /// –£–±—Ä–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π —Ç–µ–º—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
  static Future<void> _removeAuthorsFromDisabledTheme(String themeId) async {
    final selectedAuthors = await getSelectedAuthors();
    final themeAuthors = getAuthorsForTheme(themeId);
    
    for (final author in themeAuthors) {
      selectedAuthors.remove(author);
    }
    
    await _saveSelectedAuthors(selectedAuthors);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ—Ä–∞–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è —Ü–∏—Ç–∞—Ç
  static Future<Map<String, int>> getAuthorStats() async {
    final enabledThemes = await getEnabledThemes();
    final selectedAuthors = await getSelectedAuthors();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ –µ—Å—Ç—å —Ü–∏—Ç–∞—Ç
    final authorsWithQuotes = await getAuthorsWithQuotes();
    final selectedAuthorsWithQuotes = selectedAuthors.where((author) => 
      authorsWithQuotes.containsKey(author)
    ).toList();
    
    return {
      'total_authors': (await getAllAuthorsForEnabledThemes()).length,
      'selected_authors': selectedAuthors.length,
      'enabled_themes': enabledThemes.length,
      'authors_with_quotes': authorsWithQuotes.length,
      'selected_authors_with_quotes': selectedAuthorsWithQuotes.length,
    };
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ö —Ü–∏—Ç–∞—Ç
  static Future<Map<String, int>> getAuthorsWithQuotes() async {
    try {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º QuoteExtractionService –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      final quoteService = QuoteExtractionService();
      final curated = await quoteService.loadCuratedQuotes();
      
      final authorsWithQuotes = <String, int>{};
      
      for (final categoryQuotes in curated.values) {
        for (final quote in categoryQuotes) {
          authorsWithQuotes[quote.author] = (authorsWithQuotes[quote.author] ?? 0) + 1;
        }
      }
      
      return authorsWithQuotes;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–æ–≤ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏: $e');
      return {};
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –∞–≤—Ç–æ—Ä–∞ —Ü–∏—Ç–∞—Ç—ã
  static Future<bool> hasAuthorQuotes(String author) async {
    final authorsWithQuotes = await getAuthorsWithQuotes();
    return authorsWithQuotes.containsKey(author) && authorsWithQuotes[author]! > 0;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ—Ä–æ–≤ —Ç–µ–º—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ü–∏—Ç–∞—Ç—ã
  static Future<List<String>> getAuthorsWithQuotesForTheme(String themeId) async {
    final themeAuthors = getAuthorsForTheme(themeId);
    final authorsWithQuotes = await getAuthorsWithQuotes();
    
    return themeAuthors.where((author) => 
      authorsWithQuotes.containsKey(author)
    ).toList();
  }

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ—Ä–æ–≤ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –¥–ª—è —Ç–µ–º—ã
  static Future<void> selectAuthorsWithQuotesForTheme(String themeId) async {
    final authorsWithQuotes = await getAuthorsWithQuotesForTheme(themeId);
    final selectedAuthors = await getSelectedAuthors();
    
    selectedAuthors.addAll(authorsWithQuotes);
    await _saveSelectedAuthors(selectedAuthors);
  }
}