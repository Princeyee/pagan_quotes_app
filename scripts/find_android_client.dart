import 'dart:io';
import 'dart:convert';

void main() async {
  print('=== –ü–û–ò–°–ö –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û ANDROID CLIENT ===\n');

  const projectId = 'sinuous-transit-460717-j9';
  const projectNumber = '358123091745';
  const webClientId = '358123091745-dk8931trk267ed1qbn8q00giqcldab58.apps.googleusercontent.com';

  print('üéØ Android OAuth client —É–∂–µ —Å–æ–∑–¥–∞–Ω!');
  print('–û—à–∏–±–∫–∞ "already in use" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ client —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n');

  print('=== –ö–ê–ö –ù–ê–ô–¢–ò ANDROID CLIENT ID ===\n');
  
  print('1. –û—Ç–∫—Ä–æ–π—Ç–µ Google Cloud Console:');
  print('   https://console.cloud.google.com/apis/credentials?project=$projectId\n');
  
  print('2. –í —Ä–∞–∑–¥–µ–ª–µ "OAuth 2.0 Client IDs" –Ω–∞–π–¥–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∏–ø–æ–º "Android"\n');
  
  print('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Client ID (–¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫):');
  print('   358123091745-XXXXXXXXXX.apps.googleusercontent.com\n');

  print('4. –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–π—Ç–µ API Key (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω):');
  print('   - –ù–∞–∂–º–∏—Ç–µ "+ CREATE CREDENTIALS" ‚Üí "API key"');
  print('   - –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –¥–ª—è Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π\n');

  print('=== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø ===\n');
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
  String packageName = await getPackageNameFromGradle() ?? 'com.yourcompany.dailyquotes';
  String sha1Hash = await getSha1Fingerprint();
  
  print('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  print('- Package name: $packageName');
  print('- SHA-1: $sha1Hash\n');

  // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å placeholder'–æ–º –¥–ª—è Android Client ID
  await createGoogleServicesTemplate(
    projectId: projectId,
    projectNumber: projectNumber,
    packageName: packageName,
    webClientId: webClientId,
    sha1Hash: sha1Hash,
  );

  print('=== –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò ===\n');
  print('1. –ù–∞–π–¥–∏—Ç–µ Android Client ID –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ');
  print('2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: google-services-template.json');
  print('3. –ó–∞–º–µ–Ω–∏—Ç–µ "–ù–ê–ô–î–ò–¢–ï_ANDROID_CLIENT_ID" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Client ID');
  print('4. –ó–∞–º–µ–Ω–∏—Ç–µ "–°–û–ó–î–ê–ô–¢–ï_API_KEY" –Ω–∞ –≤–∞—à API Key');
  print('5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª: cp google-services-template.json android/app/google-services.json');
  print('6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: dart run scripts/find_android_client.dart --verify\n');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
  if (Platform.executableArguments.contains('--verify')) {
    await verifyGoogleServicesFile();
  }
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ package name –∏–∑ build.gradle
Future<String?> getPackageNameFromGradle() async {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º build.gradle.kts
  final gradleKtsFile = File('android/app/build.gradle.kts');
  if (await gradleKtsFile.exists()) {
    final content = await gradleKtsFile.readAsString();
    final match = RegExp(r'applicationId\s*=\s*"([^"]+)"').firstMatch(content);
    if (match != null) {
      return match.group(1);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º build.gradle
  final gradleFile = File('android/app/build.gradle');
  if (await gradleFile.exists()) {
    final content = await gradleFile.readAsString();
    final match = RegExp(r'applicationId\s+"([^"]+)"').firstMatch(content);
    if (match != null) {
      return match.group(1);
    }
  }

  return null;
}

/// –ü–æ–ª—É—á–µ–Ω–∏–µ SHA-1 –æ—Ç–ø–µ—á–∞—Ç–∫–∞
Future<String> getSha1Fingerprint() async {
  try {
    final homeDir = Platform.environment['HOME'] ?? Platform.environment['USERPROFILE'] ?? '';
    final keystorePath = '$homeDir/.android/debug.keystore';
    
    final keystoreFile = File(keystorePath);
    if (!await keystoreFile.exists()) {
      return '–ü–†–û–í–ï–†–¨–¢–ï_SHA1_–í–†–£–ß–ù–£–Æ';
    }

    final result = await Process.run('keytool', [
      '-list',
      '-v',
      '-keystore', keystorePath,
      '-alias', 'androiddebugkey',
      '-storepass', 'android',
      '-keypass', 'android'
    ]);

    if (result.exitCode == 0) {
      final output = result.stdout.toString();
      final sha1Match = RegExp(r'SHA1:\s*([A-F0-9:]+)').firstMatch(output);
      
      if (sha1Match != null) {
        return sha1Match.group(1)!;
      }
    }
  } catch (e) {
    print('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SHA-1 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: $e');
  }

  return '–ü–†–û–í–ï–†–¨–¢–ï_SHA1_–í–†–£–ß–ù–£–Æ';
}

/// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ google-services.json
Future<void> createGoogleServicesTemplate({
  required String projectId,
  required String projectNumber,
  required String packageName,
  required String webClientId,
  required String sha1Hash,
}) async {
  final template = {
    'project_info': {
      'project_number': projectNumber,
      'project_id': projectId,
      'storage_bucket': '$projectId.appspot.com'
    },
    'client': [
      {
        'client_info': {
          'mobilesdk_app_id': '1:$projectNumber:android:generated',
          'android_client_info': {
            'package_name': packageName
          }
        },
        'oauth_client': [
          {
            'client_id': '–ù–ê–ô–î–ò–¢–ï_ANDROID_CLIENT_ID.apps.googleusercontent.com',
            'client_type': 1,
            'android_info': {
              'package_name': packageName,
              'certificate_hash': sha1Hash
            }
          },
          {
            'client_id': webClientId,
            'client_type': 3
          }
        ],
        'api_key': [
          {
            'current_key': '–°–û–ó–î–ê–ô–¢–ï_API_KEY'
          }
        ],
        'services': {
          'appinvite_service': {
            'other_platform_oauth_client': [
              {
                'client_id': webClientId,
                'client_type': 3
              }
            ]
          }
        }
      }
    ],
    'configuration_version': '1'
  };

  const fileName = 'google-services-template.json';
  final file = File(fileName);
  await file.writeAsString(
    const JsonEncoder.withIndent('  ').convert(template)
  );

  print('‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: $fileName');
}

/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
Future<void> verifyGoogleServicesFile() async {
  print('\n=== –ü–†–û–í–ï–†–ö–ê GOOGLE-SERVICES.JSON ===');
  
  final file = File('android/app/google-services.json');
  if (!await file.exists()) {
    print('‚ùå –§–∞–π–ª android/app/google-services.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    print('   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑ google-services-template.json');
    return;
  }

  try {
    final content = await file.readAsString();
    final json = jsonDecode(content) as Map<String, dynamic>;

    print('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º placeholder'—ã
    if (content.contains('–ù–ê–ô–î–ò–¢–ï_ANDROID_CLIENT_ID')) {
      print('‚ùå –ù–µ –∑–∞–º–µ–Ω–µ–Ω Android Client ID');
      print('   –ó–∞–º–µ–Ω–∏—Ç–µ "–ù–ê–ô–î–ò–¢–ï_ANDROID_CLIENT_ID" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Client ID');
    } else {
      print('‚úÖ Android Client ID –∑–∞–º–µ–Ω–µ–Ω');
    }

    if (content.contains('–°–û–ó–î–ê–ô–¢–ï_API_KEY')) {
      print('‚ùå –ù–µ –∑–∞–º–µ–Ω–µ–Ω API Key');
      print('   –ó–∞–º–µ–Ω–∏—Ç–µ "–°–û–ó–î–ê–ô–¢–ï_API_KEY" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API Key');
    } else {
      print('‚úÖ API Key –∑–∞–º–µ–Ω–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    final clients = json['client'] as List;
    if (clients.isNotEmpty) {
      final client = clients[0] as Map<String, dynamic>;
      final oauthClients = client['oauth_client'] as List;
      
      bool hasAndroidClient = false;
      String? androidClientId;
      
      for (final oauthClient in oauthClients) {
        if (oauthClient['client_type'] == 1) {
          hasAndroidClient = true;
          androidClientId = oauthClient['client_id'];
          break;
        }
      }
      
      if (hasAndroidClient) {
        print('‚úÖ Android client (client_type: 1) –Ω–∞–π–¥–µ–Ω');
        print('   Client ID: $androidClientId');
      } else {
        print('‚ùå Android client (client_type: 1) –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º package name
    final clients2 = json['client'] as List;
    if (clients2.isNotEmpty) {
      final client = clients2[0] as Map<String, dynamic>;
      final clientInfo = client['client_info'] as Map<String, dynamic>;
      final androidClientInfo = clientInfo['android_client_info'] as Map<String, dynamic>;
      final packageName = androidClientInfo['package_name'];
      
      print('‚úÖ Package name: $packageName');
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å build.gradle
      final gradlePackage = await getPackageNameFromGradle();
      if (gradlePackage != null && gradlePackage != packageName) {
        print('‚ö†Ô∏è  Package name –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å build.gradle: $gradlePackage');
      }
    }

    print('\nüéâ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    print('   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Google Sign-In');

  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: $e');
  }
}